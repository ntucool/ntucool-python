[
    {
        "api_method_name": "List scopes",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.scopes_api.index",
        "subtopic": "API Token Scopes",
        "defined_in": [
            "ScopesApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/scopes_api_controller.rb"
        ],
        "beta": "BETA: This API endpoint is not finalized, and there could be breaking changes before its final release.",
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/scopes",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "A list of scopes that can be applied to developer keys and access tokens."
        ],
        "request_parameters": [
            {
                "parameter": "group_by",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Scopes"
        ],
        "paginated": false,
        "function_name": "list_scopes"
    },
    {
        "api_method_name": "Search account domains",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.account_domain_lookups.search",
        "subtopic": "Account Domain Lookups",
        "defined_in": null,
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/search",
                "keys": []
            }
        ],
        "description": [
            "Returns a list of up to 5 matching account domains",
            "Partial match on name / domain are supported"
        ],
        "request_parameters": [
            {
                "parameter": "name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "domain",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "latitude",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "longitude",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "search_account_domains"
    },
    {
        "api_method_name": "Index of active global notification for the user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.account_notifications.user_index",
        "subtopic": "Account Notifications",
        "defined_in": [
            "AccountNotificationsController#user_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/account_notifications_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/account_notifications",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns a list of all global notifications in the account for the current user Any notifications that have been closed by the user will not be returned, unless a include_past parameter is passed in as true."
        ],
        "request_parameters": [
            {
                "parameter": "include_past",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of AccountNotifications"
        ],
        "paginated": false,
        "function_name": "index_of_active_global_notification_for_the_user"
    },
    {
        "api_method_name": "Show a global notification",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.account_notifications.show",
        "subtopic": "Account Notifications",
        "defined_in": [
            "AccountNotificationsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/account_notifications_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/account_notifications/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns a global notification for the current user A notification that has been closed by the user will not be returned"
        ],
        "request_parameters": null,
        "returns": [
            "a AccountNotification"
        ],
        "paginated": false,
        "function_name": "show_a_global_notification"
    },
    {
        "api_method_name": "Close notification for user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.account_notifications.user_close_notification",
        "subtopic": "Account Notifications",
        "defined_in": [
            "AccountNotificationsController#user_close_notification",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/account_notifications_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/account_notifications/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "If the current user no long wants to see this notification it can be excused with this call"
        ],
        "request_parameters": null,
        "returns": [
            "a AccountNotification"
        ],
        "paginated": false,
        "function_name": "close_notification_for_user"
    },
    {
        "api_method_name": "Create a global notification",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.account_notifications.create",
        "subtopic": "Account Notifications",
        "defined_in": [
            "AccountNotificationsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/account_notifications_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/account_notifications",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Create and return a new global notification for an account."
        ],
        "request_parameters": [
            {
                "parameter": "account_notification[subject]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "account_notification[message]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "account_notification[start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "account_notification[end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "account_notification[icon]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account_notification_roles[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_global_notification"
    },
    {
        "api_method_name": "Update a global notification",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.account_notifications.update",
        "subtopic": "Account Notifications",
        "defined_in": [
            "AccountNotificationsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/account_notifications_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/account_notifications/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update global notification for an account."
        ],
        "request_parameters": [
            {
                "parameter": "account_notification[subject]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account_notification[message]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account_notification[start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account_notification[end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account_notification[icon]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account_notification_roles[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_a_global_notification"
    },
    {
        "api_method_name": "List Available Reports",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.account_reports.available_reports",
        "subtopic": "Account Reports",
        "defined_in": [
            "AccountReportsController#available_reports",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/account_reports_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/reports",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns a paginated list of reports for the current context."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_available_reports"
    },
    {
        "api_method_name": "Start a Report",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.account_reports.create",
        "subtopic": "Account Reports",
        "defined_in": [
            "AccountReportsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/account_reports_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/reports/{report}",
                "keys": [
                    "account_id",
                    "report"
                ]
            }
        ],
        "description": [
            "Generates a report instance for the account. Note that \u201creport\u201d in the request must match one of the available report names. To fetch a list of available report names and parameters for each report (including whether or not those parameters are required), see List Available Reports."
        ],
        "request_parameters": [
            {
                "parameter": "parameters",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "parameters[course_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "parameters[users]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Report"
        ],
        "paginated": false,
        "function_name": "start_a_report"
    },
    {
        "api_method_name": "Index of Reports",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.account_reports.index",
        "subtopic": "Account Reports",
        "defined_in": [
            "AccountReportsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/account_reports_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/reports/{report}",
                "keys": [
                    "account_id",
                    "report"
                ]
            }
        ],
        "description": [
            "Shows all reports that have been run for the account of a specific type."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Reports"
        ],
        "paginated": false,
        "function_name": "index_of_reports"
    },
    {
        "api_method_name": "Status of a Report",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.account_reports.show",
        "subtopic": "Account Reports",
        "defined_in": [
            "AccountReportsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/account_reports_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/reports/{report}/{id}",
                "keys": [
                    "account_id",
                    "report",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the status of a report."
        ],
        "request_parameters": null,
        "returns": [
            "a Report"
        ],
        "paginated": false,
        "function_name": "status_of_a_report"
    },
    {
        "api_method_name": "Delete a Report",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.account_reports.destroy",
        "subtopic": "Account Reports",
        "defined_in": [
            "AccountReportsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/account_reports_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/reports/{report}/{id}",
                "keys": [
                    "account_id",
                    "report",
                    "id"
                ]
            }
        ],
        "description": [
            "Deletes a generated report instance."
        ],
        "request_parameters": null,
        "returns": [
            "a Report"
        ],
        "paginated": false,
        "function_name": "delete_a_report"
    },
    {
        "api_method_name": "List accounts",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.accounts.index",
        "subtopic": "Accounts",
        "defined_in": [
            "AccountsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts",
                "keys": []
            }
        ],
        "description": [
            "A paginated list of accounts that the current user can view or manage. Typically, students and even teachers will get an empty list in response, only account admins can view the accounts that they are in."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Accounts"
        ],
        "paginated": true,
        "function_name": "list_accounts"
    },
    {
        "api_method_name": "Get accounts that admins can manage",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.accounts.manageable_accounts",
        "subtopic": "Accounts",
        "defined_in": [
            "AccountsController#manageable_accounts",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/manageable_accounts",
                "keys": []
            }
        ],
        "description": [
            "A paginated list of accounts where the current user has permission to create or manage courses. List will be empty for students and teachers as only admins can view which accounts they are in."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Accounts"
        ],
        "paginated": true,
        "function_name": "get_accounts_that_admins_can_manage"
    },
    {
        "api_method_name": "List accounts for course admins",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.accounts.course_accounts",
        "subtopic": "Accounts",
        "defined_in": [
            "AccountsController#course_accounts",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/course_accounts",
                "keys": []
            }
        ],
        "description": [
            "A paginated list of accounts that the current user can view through their admin course enrollments. (Teacher, TA, or designer enrollments). Only returns \u201cid\u201d, \u201cname\u201d, \u201cworkflow_state\u201d, \u201croot_account_id\u201d and \u201cparent_account_id\u201d"
        ],
        "request_parameters": null,
        "returns": [
            "a list of Accounts"
        ],
        "paginated": true,
        "function_name": "list_accounts_for_course_admins"
    },
    {
        "api_method_name": "Get a single account",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.accounts.show",
        "subtopic": "Accounts",
        "defined_in": [
            "AccountsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Retrieve information on an individual account, given by id or sis sis_account_id."
        ],
        "request_parameters": null,
        "returns": [
            "a Account"
        ],
        "paginated": false,
        "function_name": "get_a_single_account"
    },
    {
        "api_method_name": "Settings",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.accounts.show_settings",
        "subtopic": "Accounts",
        "defined_in": [
            "AccountsController#show_settings",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/settings",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns all of the settings for the specified account as a JSON object. The caller must be an Account admin with the manage_account_settings permission."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "settings"
    },
    {
        "api_method_name": "Permissions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.accounts.permissions",
        "subtopic": "Accounts",
        "defined_in": [
            "AccountsController#permissions",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/permissions",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns permission information for the calling user and the given account. You may use `self` as the account id to check permissions against the domain root account. The caller must have an account role or admin (teacher/TA/designer) enrollment in a course in the account.",
            "See also the Course and Group counterparts."
        ],
        "request_parameters": [
            {
                "parameter": "permissions[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "permissions"
    },
    {
        "api_method_name": "Get the sub-accounts of an account",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.accounts.sub_accounts",
        "subtopic": "Accounts",
        "defined_in": [
            "AccountsController#sub_accounts",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/sub_accounts",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "List accounts that are sub-accounts of the given account."
        ],
        "request_parameters": [
            {
                "parameter": "recursive",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Accounts"
        ],
        "paginated": false,
        "function_name": "get_the_sub_accounts_of_an_account"
    },
    {
        "api_method_name": "Get the Terms of Service",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.accounts.terms_of_service",
        "subtopic": "Accounts",
        "defined_in": [
            "AccountsController#terms_of_service",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/terms_of_service",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns the terms of service for that account"
        ],
        "request_parameters": null,
        "returns": [
            "a TermsOfService"
        ],
        "paginated": false,
        "function_name": "get_the_terms_of_service"
    },
    {
        "api_method_name": "Get help links",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.accounts.help_links",
        "subtopic": "Accounts",
        "defined_in": [
            "AccountsController#help_links",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/help_links",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns the help links for that account"
        ],
        "request_parameters": null,
        "returns": [
            "a HelpLinks"
        ],
        "paginated": false,
        "function_name": "get_help_links"
    },
    {
        "api_method_name": "List active courses in an account",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.accounts.courses_api",
        "subtopic": "Accounts",
        "defined_in": [
            "AccountsController#courses_api",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/courses",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Retrieve a paginated list of courses in this account."
        ],
        "request_parameters": [
            {
                "parameter": "with_enrollments",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_type[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "published",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "completed",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "blueprint",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "blueprint_associated",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "by_teachers[]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "by_subaccounts[]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "hide_enrollmentless_courses",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "state[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_term_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "search_term",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sort",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "order",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "search_by",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "starts_before",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "ends_after",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "homeroom",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Courses"
        ],
        "paginated": true,
        "function_name": "list_active_courses_in_an_account"
    },
    {
        "api_method_name": "Update an account",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.accounts.update",
        "subtopic": "Accounts",
        "defined_in": [
            "AccountsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Update an existing account."
        ],
        "request_parameters": [
            {
                "parameter": "account[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[sis_account_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[default_time_zone]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[default_storage_quota_mb]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[default_user_storage_quota_mb]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[default_group_storage_quota_mb]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[course_template_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][restrict_student_past_view][value]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][restrict_student_past_view][locked]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][restrict_student_future_view][value]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][microsoft_sync_enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][microsoft_sync_tenant]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][microsoft_sync_login_attribute]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][restrict_student_future_view][locked]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][lock_all_announcements][value]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][lock_all_announcements][locked]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][usage_rights_required][value]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][usage_rights_required][locked]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][restrict_student_future_listing][value]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][restrict_student_future_listing][locked]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][lock_outcome_proficiency][value]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[lock_outcome_proficiency][locked]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[settings][lock_proficiency_calculation][value]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[lock_proficiency_calculation][locked]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[services]",
                "type": "Hash",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Account"
        ],
        "paginated": false,
        "function_name": "update_an_account"
    },
    {
        "api_method_name": "Delete a user from the root account",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.accounts.remove_user",
        "subtopic": "Accounts",
        "defined_in": [
            "AccountsController#remove_user",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/accounts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/users/{user_id}",
                "keys": [
                    "account_id",
                    "user_id"
                ]
            }
        ],
        "description": [
            "Delete a user record from a Canvas root account. If a user is associated with multiple root accounts (in a multi-tenant instance of Canvas), this action will NOT remove them from the other accounts.",
            "WARNING: This API will allow a user to remove themselves from the account. If they do this, they won't be able to make API calls or log into Canvas at that account."
        ],
        "request_parameters": null,
        "returns": [
            "a User"
        ],
        "paginated": false,
        "function_name": "delete_a_user_from_the_root_account"
    },
    {
        "api_method_name": "Create a new sub-account",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sub_accounts.create",
        "subtopic": "Subaccounts",
        "defined_in": [
            "SubAccountsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sub_accounts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/sub_accounts",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Add a new sub-account to a given account."
        ],
        "request_parameters": [
            {
                "parameter": "account[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "account[sis_account_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[default_storage_quota_mb]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[default_user_storage_quota_mb]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account[default_group_storage_quota_mb]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Account"
        ],
        "paginated": false,
        "function_name": "create_a_new_sub_account"
    },
    {
        "api_method_name": "Delete a sub-account",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sub_accounts.destroy",
        "subtopic": "Subaccounts",
        "defined_in": [
            "SubAccountsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sub_accounts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/sub_accounts/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Cannot delete an account with active courses or active sub_accounts. Cannot delete a root_account"
        ],
        "request_parameters": null,
        "returns": [
            "a Account"
        ],
        "paginated": false,
        "function_name": "delete_a_sub_account"
    },
    {
        "api_method_name": "Get account",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/account_lookup.show",
        "subtopic": "Accounts (LTI)",
        "defined_in": [
            "Lti::AccountLookupController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/account_lookup_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/accounts/{account_id}",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Retrieve information on an individual account, given by local or global ID."
        ],
        "request_parameters": null,
        "returns": [
            "a Account"
        ],
        "paginated": false,
        "function_name": "get_account"
    },
    {
        "api_method_name": "Make an account admin",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.admins.create",
        "subtopic": "Admins",
        "defined_in": [
            "AdminsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/admins_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/admins",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Flag an existing user as an admin within the account."
        ],
        "request_parameters": [
            {
                "parameter": "user_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "role",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "role_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "send_confirmation",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Admin"
        ],
        "paginated": false,
        "function_name": "make_an_account_admin"
    },
    {
        "api_method_name": "Remove account admin",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.admins.destroy",
        "subtopic": "Admins",
        "defined_in": [
            "AdminsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/admins_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/admins/{user_id}",
                "keys": [
                    "account_id",
                    "user_id"
                ]
            }
        ],
        "description": [
            "Remove the rights associated with an account admin role from a user."
        ],
        "request_parameters": [
            {
                "parameter": "role",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "role_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Admin"
        ],
        "paginated": false,
        "function_name": "remove_account_admin"
    },
    {
        "api_method_name": "List account admins",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.admins.index",
        "subtopic": "Admins",
        "defined_in": [
            "AdminsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/admins_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/admins",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "A paginated list of the admins in the account"
        ],
        "request_parameters": [
            {
                "parameter": "user_id[]",
                "type": "[Integer]",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Admins"
        ],
        "paginated": true,
        "function_name": "list_account_admins"
    },
    {
        "api_method_name": "Get department-level participation data",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.analytics_api.department_participation",
        "subtopic": "Analytics",
        "defined_in": null,
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/analytics/terms/{term_id}/activity",
                "keys": [
                    "account_id",
                    "term_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/analytics/current/activity",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/analytics/completed/activity",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns page view hits summed across all courses in the department. Two groupings of these counts are returned; one by day (by_date), the other by category (by_category). The possible categories are announcements, assignments, collaborations, conferences, discussions, files, general, grades, groups, modules, other, pages, and quizzes.",
            "This and the other department-level endpoints have three variations which all return the same style of data but for different subsets of courses. All share the prefix /api/v1/accounts/<account_id>/analytics. The possible suffixes are:",
            "Courses not yet offered or which have been deleted are never included.",
            "/current and /completed are intended for use when the account has only one term. /terms/<term_id> is intended for use when the account has multiple terms.",
            "The action follows the suffix."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_department_level_participation_data"
    },
    {
        "api_method_name": "Get department-level grade data",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.analytics_api.department_grades",
        "subtopic": "Analytics",
        "defined_in": null,
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/analytics/terms/{term_id}/grades",
                "keys": [
                    "account_id",
                    "term_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/analytics/current/grades",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/analytics/completed/grades",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns the distribution of grades for students in courses in the department.  Each data point is one student's current grade in one course; if a student is in multiple courses, he contributes one value per course, but if he's enrolled multiple times in the same course (e.g. a lecture section and a lab section), he only constributes on value for that course.",
            "Grades are binned to the nearest integer score; anomalous grades outside the 0 to 100 range are ignored. The raw counts are returned, not yet normalized by the total count.",
            "Shares the same variations on endpoint as the participation data."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_department_level_grade_data"
    },
    {
        "api_method_name": "Get department-level statistics",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.analytics_api.department_statistics",
        "subtopic": "Analytics",
        "defined_in": null,
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics",
                "keys": [
                    "account_id",
                    "term_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/analytics/current/statistics",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/analytics/completed/statistics",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns numeric statistics about the department and term (or filter).",
            "Shares the same variations on endpoint as the participation data."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_department_level_statistics"
    },
    {
        "api_method_name": "Get course-level participation data",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.analytics_api.course_participation",
        "subtopic": "Analytics",
        "defined_in": null,
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/analytics/activity",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns page view hits and participation numbers grouped by day through the entire history of the course. Page views is returned as a hash, where the hash keys are dates in the format \u201cYYYY-MM-DD\u201d. The page_views result set includes page views broken out by access category. Participations is returned as an array of dates in the format \u201cYYYY-MM-DD\u201d."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_course_level_participation_data"
    },
    {
        "api_method_name": "Get course-level assignment data",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.analytics_api.course_assignments",
        "subtopic": "Analytics",
        "defined_in": null,
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/analytics/assignments",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns a list of assignments for the course sorted by due date. For each assignment returns basic assignment information, the grade breakdown, and a breakdown of on-time/late status of homework submissions."
        ],
        "request_parameters": [
            {
                "parameter": "async",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_course_level_assignment_data"
    },
    {
        "api_method_name": "Get course-level student summary data",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.analytics_api.course_student_summaries",
        "subtopic": "Analytics",
        "defined_in": null,
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/analytics/student_summaries",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns a summary of per-user access information for all students in a course. This includes total page views, total participations, and a breakdown of on-time/late status for all homework submissions in the course.",
            "Each student's summary also includes the maximum number of page views and participations by any student in the course, which may be useful for some visualizations (since determining maximums client side can be tricky with pagination)."
        ],
        "request_parameters": [
            {
                "parameter": "sort_column",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "student_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "get_course_level_student_summary_data"
    },
    {
        "api_method_name": "Get user-in-a-course-level participation data",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.analytics_api.student_in_course_participation",
        "subtopic": "Analytics",
        "defined_in": null,
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/analytics/users/{student_id}/activity",
                "keys": [
                    "course_id",
                    "student_id"
                ]
            }
        ],
        "description": [
            "Returns page view hits grouped by hour, and participation details through the entire history of the course.",
            "`page_views` are returned as a hash, where the keys are iso8601 dates, bucketed by the hour. `participations` are returned as an array of hashes, sorted oldest to newest."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_user_in_a_course_level_participation_data"
    },
    {
        "api_method_name": "Get user-in-a-course-level assignment data",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.analytics_api.student_in_course_assignments",
        "subtopic": "Analytics",
        "defined_in": null,
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/analytics/users/{student_id}/assignments",
                "keys": [
                    "course_id",
                    "student_id"
                ]
            }
        ],
        "description": [
            "Returns a list of assignments for the course sorted by due date. For each assignment returns basic assignment information, the grade breakdown (including the student's actual grade), and the basic submission information for the student's submission if it exists."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_user_in_a_course_level_assignment_data"
    },
    {
        "api_method_name": "Get user-in-a-course-level messaging data",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.analytics_api.student_in_course_messaging",
        "subtopic": "Analytics",
        "defined_in": null,
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/analytics/users/{student_id}/communication",
                "keys": [
                    "course_id",
                    "student_id"
                ]
            }
        ],
        "description": [
            "Returns messaging \u201chits\u201d grouped by day through the entire history of the course. Returns a hash containing the number of instructor-to-student messages, and student-to-instructor messages, where the hash keys are dates in the format \u201cYYYY-MM-DD\u201d. Message hits include Conversation messages and comments on homework submissions."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_user_in_a_course_level_messaging_data"
    },
    {
        "api_method_name": "List external feeds",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.external_feeds.index",
        "subtopic": "Announcement External Feeds",
        "defined_in": [
            "ExternalFeedsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_feeds_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/external_feeds",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/external_feeds",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of External Feeds this course or group."
        ],
        "request_parameters": null,
        "returns": [
            "a list of ExternalFeeds"
        ],
        "paginated": true,
        "function_name": "list_external_feeds"
    },
    {
        "api_method_name": "Create an external feed",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.external_feeds.create",
        "subtopic": "Announcement External Feeds",
        "defined_in": [
            "ExternalFeedsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_feeds_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/external_feeds",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/external_feeds",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Create a new external feed for the course or group."
        ],
        "request_parameters": [
            {
                "parameter": "url",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "header_match",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "verbosity",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a ExternalFeed"
        ],
        "paginated": false,
        "function_name": "create_an_external_feed"
    },
    {
        "api_method_name": "Delete an external feed",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.external_feeds.destroy",
        "subtopic": "Announcement External Feeds",
        "defined_in": [
            "ExternalFeedsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_feeds_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/external_feeds/{external_feed_id}",
                "keys": [
                    "course_id",
                    "external_feed_id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/groups/{group_id}/external_feeds/{external_feed_id}",
                "keys": [
                    "group_id",
                    "external_feed_id"
                ]
            }
        ],
        "description": [
            "Deletes the external feed."
        ],
        "request_parameters": null,
        "returns": [
            "a ExternalFeed"
        ],
        "paginated": false,
        "function_name": "delete_an_external_feed"
    },
    {
        "api_method_name": "List announcements",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.announcements_api.index",
        "subtopic": "Announcements",
        "defined_in": [
            "AnnouncementsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/announcements_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/announcements",
                "keys": []
            }
        ],
        "description": [
            "Returns the paginated list of announcements for the given courses and date range.  Note that a context_code field is added to the responses so you can tell which course each announcement belongs to."
        ],
        "request_parameters": [
            {
                "parameter": "context_codes[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "start_date",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_date",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "active_only",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "latest_only",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include",
                "type": "array",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of DiscussionTopics"
        ],
        "paginated": true,
        "function_name": "list_announcements"
    },
    {
        "api_method_name": "List appointment groups",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.appointment_groups.index",
        "subtopic": "Appointment Groups",
        "defined_in": [
            "AppointmentGroupsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/appointment_groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/appointment_groups",
                "keys": []
            }
        ],
        "description": [
            "Retrieve the paginated list of appointment groups that can be reserved or managed by the current user."
        ],
        "request_parameters": [
            {
                "parameter": "scope",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "context_codes[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include_past_appointments",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "list_appointment_groups"
    },
    {
        "api_method_name": "Create an appointment group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.appointment_groups.create",
        "subtopic": "Appointment Groups",
        "defined_in": [
            "AppointmentGroupsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/appointment_groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/appointment_groups",
                "keys": []
            }
        ],
        "description": [
            "Create and return a new appointment group. If new_appointments are specified, the response will return a new_appointments array (same format as appointments array, see \u201cList appointment groups\u201d action)"
        ],
        "request_parameters": [
            {
                "parameter": "appointment_group[context_codes][]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[sub_context_codes][]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[description]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[location_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[location_address]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[publish]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[participants_per_appointment]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[min_appointments_per_participant]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[max_appointments_per_participant]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[new_appointments][X][]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[participant_visibility]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_an_appointment_group"
    },
    {
        "api_method_name": "Get a single appointment group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.appointment_groups.show",
        "subtopic": "Appointment Groups",
        "defined_in": [
            "AppointmentGroupsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/appointment_groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/appointment_groups/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Returns information for a single appointment group"
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_a_single_appointment_group"
    },
    {
        "api_method_name": "Update an appointment group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.appointment_groups.update",
        "subtopic": "Appointment Groups",
        "defined_in": [
            "AppointmentGroupsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/appointment_groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/appointment_groups/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Update and return an appointment group. If new_appointments are specified, the response will return a new_appointments array (same format as appointments array, see \u201cList appointment groups\u201d action)."
        ],
        "request_parameters": [
            {
                "parameter": "appointment_group[context_codes][]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[sub_context_codes][]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[description]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[location_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[location_address]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[publish]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[participants_per_appointment]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[min_appointments_per_participant]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[max_appointments_per_participant]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[new_appointments][X][]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "appointment_group[participant_visibility]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_an_appointment_group"
    },
    {
        "api_method_name": "Delete an appointment group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.appointment_groups.destroy",
        "subtopic": "Appointment Groups",
        "defined_in": [
            "AppointmentGroupsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/appointment_groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/appointment_groups/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Delete an appointment group (and associated time slots and reservations) and return the deleted group"
        ],
        "request_parameters": [
            {
                "parameter": "cancel_reason",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "delete_an_appointment_group"
    },
    {
        "api_method_name": "List user participants",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.appointment_groups.users",
        "subtopic": "Appointment Groups",
        "defined_in": [
            "AppointmentGroupsController#users",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/appointment_groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/appointment_groups/{id}/users",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "A paginated list of users that are (or may be) participating in this appointment group.  Refer to the Users API for the response fields. Returns no results for appointment groups with the \u201cGroup\u201d participant_type."
        ],
        "request_parameters": [
            {
                "parameter": "registration_status",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "list_user_participants"
    },
    {
        "api_method_name": "List student group participants",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.appointment_groups.groups",
        "subtopic": "Appointment Groups",
        "defined_in": [
            "AppointmentGroupsController#groups",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/appointment_groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/appointment_groups/{id}/groups",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "A paginated list of student groups that are (or may be) participating in this appointment group. Refer to the Groups API for the response fields. Returns no results for appointment groups with the \u201cUser\u201d participant_type."
        ],
        "request_parameters": [
            {
                "parameter": "registration_status",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "list_student_group_participants"
    },
    {
        "api_method_name": "Get next appointment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.appointment_groups.next_appointment",
        "subtopic": "Appointment Groups",
        "defined_in": [
            "AppointmentGroupsController#next_appointment",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/appointment_groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/appointment_groups/next_appointment",
                "keys": []
            }
        ],
        "description": [
            "Return the next appointment available to sign up for. The appointment is returned in a one-element array. If no future appointments are available, an empty array is returned."
        ],
        "request_parameters": [
            {
                "parameter": "appointment_group_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of CalendarEvents"
        ],
        "paginated": false,
        "function_name": "get_next_appointment"
    },
    {
        "api_method_name": "Set extensions for student assignment submissions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_extensions.create",
        "subtopic": "Assignment Extensions",
        "defined_in": [
            "AssignmentExtensionsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_extensions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/extensions",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Responses"
        ],
        "request_parameters": [
            {
                "parameter": "assignment_extensions[][user_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "assignment_extensions[][extra_attempts]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "set_extensions_for_student_assignment_submissions"
    },
    {
        "api_method_name": "List assignment groups",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_groups.index",
        "subtopic": "Assignment Groups",
        "defined_in": [
            "AssignmentGroupsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignment_groups",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of assignment groups for the current context. The returned groups are sorted by their position field."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "exclude_assignment_submission_types[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "override_assignment_dates",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grading_period_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "scope_assignments_to_student",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of AssignmentGroups"
        ],
        "paginated": true,
        "function_name": "list_assignment_groups"
    },
    {
        "api_method_name": "Get an Assignment Group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_groups_api.show",
        "subtopic": "Assignment Groups",
        "defined_in": [
            "AssignmentGroupsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignment_groups/{assignment_group_id}",
                "keys": [
                    "course_id",
                    "assignment_group_id"
                ]
            }
        ],
        "description": [
            "Returns the assignment group with the given id."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "override_assignment_dates",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grading_period_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a AssignmentGroup"
        ],
        "paginated": false,
        "function_name": "get_an_assignment_group"
    },
    {
        "api_method_name": "Create an Assignment Group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_groups_api.create",
        "subtopic": "Assignment Groups",
        "defined_in": [
            "AssignmentGroupsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/assignment_groups",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Create a new assignment group for this course."
        ],
        "request_parameters": [
            {
                "parameter": "name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "position",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "group_weight",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sis_source_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "integration_data",
                "type": "Object",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rules",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a AssignmentGroup"
        ],
        "paginated": false,
        "function_name": "create_an_assignment_group"
    },
    {
        "api_method_name": "Edit an Assignment Group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_groups_api.update",
        "subtopic": "Assignment Groups",
        "defined_in": [
            "AssignmentGroupsApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/assignment_groups/{assignment_group_id}",
                "keys": [
                    "course_id",
                    "assignment_group_id"
                ]
            }
        ],
        "description": [
            "Modify an existing Assignment Group. Accepts the same parameters as Assignment Group creation"
        ],
        "request_parameters": null,
        "returns": [
            "a AssignmentGroup"
        ],
        "paginated": false,
        "function_name": "edit_an_assignment_group"
    },
    {
        "api_method_name": "Destroy an Assignment Group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_groups_api.destroy",
        "subtopic": "Assignment Groups",
        "defined_in": [
            "AssignmentGroupsApiController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/assignment_groups/{assignment_group_id}",
                "keys": [
                    "course_id",
                    "assignment_group_id"
                ]
            }
        ],
        "description": [
            "Deletes the assignment group with the given id."
        ],
        "request_parameters": [
            {
                "parameter": "move_assignments_to",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a AssignmentGroup"
        ],
        "paginated": false,
        "function_name": "destroy_an_assignment_group"
    },
    {
        "api_method_name": "Delete an assignment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignments.destroy",
        "subtopic": "Assignments",
        "defined_in": [
            "AssignmentsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignments_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/assignments/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Delete the given assignment."
        ],
        "request_parameters": null,
        "returns": [
            "a Assignment"
        ],
        "paginated": false,
        "function_name": "delete_an_assignment"
    },
    {
        "api_method_name": "List assignments",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignments_api.index",
        "subtopic": "Assignments",
        "defined_in": [
            "AssignmentsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignment_groups/{assignment_group_id}/assignments",
                "keys": [
                    "course_id",
                    "assignment_group_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of assignments for the current course or assignment group."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "search_term",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "override_assignment_dates",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "needs_grading_count_by_section",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "bucket",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "order_by",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "post_to_sis",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Assignments"
        ],
        "paginated": true,
        "function_name": "list_assignments"
    },
    {
        "api_method_name": "List assignments for user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignments_api.user_index",
        "subtopic": "Assignments",
        "defined_in": [
            "AssignmentsApiController#user_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/courses/{course_id}/assignments",
                "keys": [
                    "user_id",
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of assignments for the specified user if the current user has rights to view. See List assignments for valid arguments."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_assignments_for_user"
    },
    {
        "api_method_name": "Duplicate assignnment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignments_api.duplicate",
        "subtopic": "Assignments",
        "defined_in": [
            "AssignmentsApiController#duplicate",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/duplicate",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Duplicate an assignment and return a json based on result_type argument."
        ],
        "request_parameters": [
            {
                "parameter": "result_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Assignment"
        ],
        "paginated": false,
        "function_name": "duplicate_assignnment"
    },
    {
        "api_method_name": "Get a single assignment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignments_api.show",
        "subtopic": "Assignments",
        "defined_in": [
            "AssignmentsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the assignment with the given id."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "override_assignment_dates",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "needs_grading_count_by_section",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "all_dates",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Assignment"
        ],
        "paginated": false,
        "function_name": "get_a_single_assignment"
    },
    {
        "api_method_name": "Create an assignment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignments_api.create",
        "subtopic": "Assignments",
        "defined_in": [
            "AssignmentsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/assignments",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Create a new assignment for this course. The assignment is created in the active state."
        ],
        "request_parameters": [
            {
                "parameter": "assignment[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "assignment[position]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[submission_types][]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[allowed_extensions][]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[turnitin_enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[vericite_enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[turnitin_settings]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[integration_data]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[integration_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[peer_reviews]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[automatic_peer_reviews]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[notify_of_update]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[group_category_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[grade_group_students_individually]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[external_tool_tag_attributes]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[points_possible]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[grading_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[due_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[lock_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[unlock_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[description]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[assignment_group_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[assignment_overrides][]",
                "type": "AssignmentOverride",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[only_visible_to_overrides]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[published]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[grading_standard_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[omit_from_final_grade]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[quiz_lti]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[moderated_grading]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[grader_count]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[final_grader_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[grader_comments_visible_to_graders]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[graders_anonymous_to_graders]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[graders_names_visible_to_final_grader]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[anonymous_grading]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[allowed_attempts]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment[annotatable_attachment_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Assignment"
        ],
        "paginated": false,
        "function_name": "create_an_assignment"
    },
    {
        "api_method_name": "Edit an assignment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignments_api.update",
        "subtopic": "Assignments",
        "defined_in": [
            "AssignmentsApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/assignments/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Modify an existing assignment."
        ],
        "request_parameters": [
            {
                "parameter": "assignment[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[position]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[submission_types][]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[allowed_extensions][]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[turnitin_enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[vericite_enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[turnitin_settings]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[sis_assignment_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[integration_data]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[integration_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[peer_reviews]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[automatic_peer_reviews]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[notify_of_update]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[group_category_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[grade_group_students_individually]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[external_tool_tag_attributes]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[points_possible]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[grading_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[due_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[lock_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[unlock_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[description]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[assignment_group_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[assignment_overrides][]",
                "type": "AssignmentOverride",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[only_visible_to_overrides]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[published]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[grading_standard_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[omit_from_final_grade]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[moderated_grading]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[grader_count]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[final_grader_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[grader_comments_visible_to_graders]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[graders_anonymous_to_graders]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[graders_names_visible_to_final_grader]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[anonymous_grading]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[allowed_attempts]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[annotatable_attachment_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": ""
            },
            {
                "parameter": "assignment[submission_types][]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": "[DEPRECATED]\nEffective 2021-05-26 (notice given 2021-02-18)"
            }
        ],
        "returns": [
            "a Assignment"
        ],
        "paginated": false,
        "function_name": "edit_an_assignment"
    },
    {
        "api_method_name": "Bulk update assignment dates",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignments_api.bulk_update",
        "subtopic": "Assignments",
        "defined_in": [
            "AssignmentsApiController#bulk_update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/assignments/bulk_update",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Update due dates and availability dates for multiple assignments in a course.",
            "Accepts a JSON array of objects containing two keys each: id, the assignment id, and all_dates, an array of AssignmentDate structures containing the base and/or override dates for the assignment, as returned from the List assignments endpoint with include[]=all_dates.",
            "This endpoint cannot create or destroy assignment overrides; any existing assignment overrides that are not referenced in the arguments will be left alone. If an override is given, any dates that are not supplied with it will be defaulted. To clear a date, specify null explicitly.",
            "All referenced assignments will be validated before any are saved. A list of errors will be returned if any provided dates are invalid, and no changes will be saved.",
            "The bulk update is performed in a background job, use the Progress API to check its status."
        ],
        "request_parameters": null,
        "returns": [
            "a Progress"
        ],
        "paginated": false,
        "function_name": "bulk_update_assignment_dates"
    },
    {
        "api_method_name": "List assignment overrides",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_overrides.index",
        "subtopic": "Assignment Overrides",
        "defined_in": [
            "AssignmentOverridesController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/overrides",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of overrides for this assignment that target sections/groups/students visible to the current user."
        ],
        "request_parameters": null,
        "returns": [
            "a list of AssignmentOverrides"
        ],
        "paginated": true,
        "function_name": "list_assignment_overrides"
    },
    {
        "api_method_name": "Get a single assignment override",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_overrides.show",
        "subtopic": "Assignment Overrides",
        "defined_in": [
            "AssignmentOverridesController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns details of the the override with the given id."
        ],
        "request_parameters": null,
        "returns": [
            "a AssignmentOverride"
        ],
        "paginated": false,
        "function_name": "get_a_single_assignment_override"
    },
    {
        "api_method_name": "Redirect to the assignment override for a group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_overrides.group_alias",
        "subtopic": "Assignment Overrides",
        "defined_in": [
            "AssignmentOverridesController#group_alias",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/assignments/{assignment_id}/override",
                "keys": [
                    "group_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Responds with a redirect to the override for the given group, if any (404 otherwise)."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "redirect_to_the_assignment_override_for_a_group"
    },
    {
        "api_method_name": "Redirect to the assignment override for a section",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_overrides.section_alias",
        "subtopic": "Assignment Overrides",
        "defined_in": [
            "AssignmentOverridesController#section_alias",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/sections/{course_section_id}/assignments/{assignment_id}/override",
                "keys": [
                    "course_section_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Responds with a redirect to the override for the given section, if any (404 otherwise)."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "redirect_to_the_assignment_override_for_a_section"
    },
    {
        "api_method_name": "Create an assignment override",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_overrides.create",
        "subtopic": "Assignment Overrides",
        "defined_in": [
            "AssignmentOverridesController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/overrides",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "One of student_ids, group_id, or course_section_id must be present. At most one should be present; if multiple are present only the most specific (student_ids first, then group_id, then course_section_id) is used and any others are ignored."
        ],
        "request_parameters": [
            {
                "parameter": "assignment_override[student_ids][]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_override[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_override[group_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_override[course_section_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_override[due_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_override[unlock_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_override[lock_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a AssignmentOverride"
        ],
        "paginated": false,
        "function_name": "create_an_assignment_override"
    },
    {
        "api_method_name": "Update an assignment override",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_overrides.update",
        "subtopic": "Assignment Overrides",
        "defined_in": [
            "AssignmentOverridesController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "id"
                ]
            }
        ],
        "description": [
            "All current overridden values must be supplied if they are to be retained; e.g. if due_at was overridden, but this PUT omits a value for due_at, due_at will no longer be overridden. If the override is adhoc and student_ids is not supplied, the target override set is unchanged. Target override sets cannot be changed for group or section overrides."
        ],
        "request_parameters": [
            {
                "parameter": "assignment_override[student_ids][]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_override[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_override[due_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_override[unlock_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_override[lock_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a AssignmentOverride"
        ],
        "paginated": false,
        "function_name": "update_an_assignment_override"
    },
    {
        "api_method_name": "Delete an assignment override",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_overrides.destroy",
        "subtopic": "Assignment Overrides",
        "defined_in": [
            "AssignmentOverridesController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Deletes an override and returns its former details."
        ],
        "request_parameters": null,
        "returns": [
            "a AssignmentOverride"
        ],
        "paginated": false,
        "function_name": "delete_an_assignment_override"
    },
    {
        "api_method_name": "Batch retrieve overrides in a course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_overrides.batch_retrieve",
        "subtopic": "Assignment Overrides",
        "defined_in": [
            "AssignmentOverridesController#batch_retrieve",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments/overrides",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns a list of specified overrides in this course, providing they target sections/groups/students visible to the current user. Returns null elements in the list for requests that were not found."
        ],
        "request_parameters": [
            {
                "parameter": "assignment_overrides[][id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "assignment_overrides[][assignment_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of AssignmentOverrides"
        ],
        "paginated": false,
        "function_name": "batch_retrieve_overrides_in_a_course"
    },
    {
        "api_method_name": "Batch create overrides in a course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_overrides.batch_create",
        "subtopic": "Assignment Overrides",
        "defined_in": [
            "AssignmentOverridesController#batch_create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/assignments/overrides",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Creates the specified overrides for each assignment.  Handles creation in a transaction, so all records are created or none are.",
            "One of student_ids, group_id, or course_section_id must be present. At most one should be present; if multiple are present only the most specific (student_ids first, then group_id, then course_section_id) is used and any others are ignored.",
            "Errors are reported in an errors attribute, an array of errors corresponding to inputs.  Global errors will be reported as a single element errors array"
        ],
        "request_parameters": [
            {
                "parameter": "assignment_overrides[]",
                "type": "AssignmentOverride",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of AssignmentOverrides"
        ],
        "paginated": false,
        "function_name": "batch_create_overrides_in_a_course"
    },
    {
        "api_method_name": "Batch update overrides in a course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.assignment_overrides.batch_update",
        "subtopic": "Assignment Overrides",
        "defined_in": [
            "AssignmentOverridesController#batch_update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/assignment_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/assignments/overrides",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Updates a list of specified overrides for each assignment.  Handles overrides in a transaction, so either all updates are applied or none. See Update an assignment override for available attributes.",
            "All current overridden values must be supplied if they are to be retained; e.g. if due_at was overridden, but this PUT omits a value for due_at, due_at will no longer be overridden. If the override is adhoc and student_ids is not supplied, the target override set is unchanged. Target override sets cannot be changed for group or section overrides.",
            "Errors are reported in an errors attribute, an array of errors corresponding to inputs.  Global errors will be reported as a single element errors array"
        ],
        "request_parameters": [
            {
                "parameter": "assignment_overrides[]",
                "type": "AssignmentOverride",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of AssignmentOverrides"
        ],
        "paginated": false,
        "function_name": "batch_update_overrides_in_a_course"
    },
    {
        "api_method_name": "List authentication providers",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.authentication_providers.index",
        "subtopic": "Authentication Providers",
        "defined_in": [
            "AuthenticationProvidersController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/authentication_providers_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/authentication_providers",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns a paginated list of authentication providers"
        ],
        "request_parameters": null,
        "returns": [
            "a list of AuthenticationProviders"
        ],
        "paginated": true,
        "function_name": "list_authentication_providers"
    },
    {
        "api_method_name": "Add authentication provider",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.authentication_providers.create",
        "subtopic": "Authentication Providers",
        "defined_in": [
            "AuthenticationProvidersController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/authentication_providers_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/authentication_providers",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Add external authentication provider(s) for the account. Services may be Apple, CAS, Facebook, GitHub, Google, LDAP, LinkedIn, Microsoft, OpenID Connect, SAML, or Twitter.",
            "Each authentication provider is specified as a set of parameters as described below. A provider specification must include an 'auth_type' parameter with a value of 'apple', 'canvas', 'cas', 'clever', 'facebook', 'github', 'google', 'ldap', 'linkedin', 'microsoft', 'openid_connect', 'saml', or 'twitter'. The other recognized parameters depend on this auth_type; unrecognized parameters are discarded. Provider specifications not specifying a valid auth_type are ignored.",
            "You can set the 'position' for any provider. The config in the 1st position is considered the default. You can set 'jit_provisioning' for any provider besides Canvas. You can set 'mfa_required' for any provider.",
            "For Apple, the additional recognized parameters are:",
            "For Canvas, the additional recognized parameter is:",
            "For CAS, the additional recognized parameters are:",
            "For Clever, the additional recognized parameters are:",
            "For Facebook, the additional recognized parameters are:",
            "For GitHub, the additional recognized parameters are:",
            "For Google, the additional recognized parameters are:",
            "For LDAP, the additional recognized parameters are:",
            "For LinkedIn, the additional recognized parameters are:",
            "For Microsoft, the additional recognized parameters are:",
            "For OpenID Connect, the additional recognized parameters are:",
            "For SAML, the additional recognized parameters are:",
            "For Twitter, the additional recognized parameters are:"
        ],
        "request_parameters": null,
        "returns": [
            "a AuthenticationProvider"
        ],
        "paginated": false,
        "function_name": "add_authentication_provider"
    },
    {
        "api_method_name": "Update authentication provider",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.authentication_providers.update",
        "subtopic": "Authentication Providers",
        "defined_in": [
            "AuthenticationProvidersController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/authentication_providers_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/authentication_providers/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update an authentication provider using the same options as the create endpoint. You can not update an existing provider to a new authentication type."
        ],
        "request_parameters": null,
        "returns": [
            "a AuthenticationProvider"
        ],
        "paginated": false,
        "function_name": "update_authentication_provider"
    },
    {
        "api_method_name": "Get authentication provider",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.authentication_providers.show",
        "subtopic": "Authentication Providers",
        "defined_in": [
            "AuthenticationProvidersController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/authentication_providers_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/authentication_providers/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Get the specified authentication provider"
        ],
        "request_parameters": null,
        "returns": [
            "a AuthenticationProvider"
        ],
        "paginated": false,
        "function_name": "get_authentication_provider"
    },
    {
        "api_method_name": "Delete authentication provider",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.authentication_providers.destroy",
        "subtopic": "Authentication Providers",
        "defined_in": [
            "AuthenticationProvidersController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/authentication_providers_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/authentication_providers/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Delete the config"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_authentication_provider"
    },
    {
        "api_method_name": "show account auth settings",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.authentication_providers.show_sso_settings",
        "subtopic": "Authentication Providers",
        "defined_in": [
            "AuthenticationProvidersController#show_sso_settings",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/authentication_providers_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/sso_settings",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "The way to get the current state of each account level setting that's relevant to Single Sign On configuration",
            "You can list the current state of each setting with \u201cupdate_sso_settings\u201d"
        ],
        "request_parameters": null,
        "returns": [
            "a SSOSettings"
        ],
        "paginated": false,
        "function_name": "show_account_auth_settings"
    },
    {
        "api_method_name": "update account auth settings",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.authentication_providers.update_sso_settings",
        "subtopic": "Authentication Providers",
        "defined_in": [
            "AuthenticationProvidersController#update_sso_settings",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/authentication_providers_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/sso_settings",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "For various cases of mixed SSO configurations, you may need to set some configuration at the account level to handle the particulars of your setup.",
            "This endpoint accepts a PUT request to set several possible account settings. All setting are optional on each request, any that are not provided at all are simply retained as is.  Any that provide the key but a null-ish value (blank string, null, undefined) will be UN-set.",
            "You can list the current state of each setting with \u201cshow_sso_settings\u201d"
        ],
        "request_parameters": null,
        "returns": [
            "a SSOSettings"
        ],
        "paginated": false,
        "function_name": "update_account_auth_settings"
    },
    {
        "api_method_name": "Query by login.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.authentication_audit_api.for_login",
        "subtopic": "Authentications Log",
        "defined_in": [
            "AuthenticationAuditApiController#for_login",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/authentication_audit_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/audit/authentication/logins/{login_id}",
                "keys": [
                    "login_id"
                ]
            }
        ],
        "description": [
            "List authentication events for a given login."
        ],
        "request_parameters": [
            {
                "parameter": "start_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "query_by_login_"
    },
    {
        "api_method_name": "Query by account.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.authentication_audit_api.for_account",
        "subtopic": "Authentications Log",
        "defined_in": [
            "AuthenticationAuditApiController#for_account",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/authentication_audit_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/audit/authentication/accounts/{account_id}",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "List authentication events for a given account."
        ],
        "request_parameters": [
            {
                "parameter": "start_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "query_by_account_"
    },
    {
        "api_method_name": "Query by user.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.authentication_audit_api.for_user",
        "subtopic": "Authentications Log",
        "defined_in": [
            "AuthenticationAuditApiController#for_user",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/authentication_audit_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/audit/authentication/users/{user_id}",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "List authentication events for a given user."
        ],
        "request_parameters": [
            {
                "parameter": "start_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "query_by_user_"
    },
    {
        "api_method_name": "Get blueprint information",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.master_courses/master_templates.show",
        "subtopic": "Blueprint Management",
        "defined_in": [
            "MasterCourses::MasterTemplatesController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/blueprint_templates/{template_id}",
                "keys": [
                    "course_id",
                    "template_id"
                ]
            }
        ],
        "description": [
            "Using 'default' as the template_id should suffice for the current implmentation (as there should be only one template per course). However, using specific template ids may become necessary in the future"
        ],
        "request_parameters": null,
        "returns": [
            "a BlueprintTemplate"
        ],
        "paginated": false,
        "function_name": "get_blueprint_information"
    },
    {
        "api_method_name": "Get associated course information",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.master_courses/master_templates.associated_courses",
        "subtopic": "Blueprint Management",
        "defined_in": [
            "MasterCourses::MasterTemplatesController#associated_courses",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/blueprint_templates/{template_id}/associated_courses",
                "keys": [
                    "course_id",
                    "template_id"
                ]
            }
        ],
        "description": [
            "Returns a list of courses that are configured to receive updates from this blueprint"
        ],
        "request_parameters": null,
        "returns": [
            "a list of Courses"
        ],
        "paginated": false,
        "function_name": "get_associated_course_information"
    },
    {
        "api_method_name": "Update associated courses",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.master_courses/master_templates.update_associations",
        "subtopic": "Blueprint Management",
        "defined_in": [
            "MasterCourses::MasterTemplatesController#update_associations",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/blueprint_templates/{template_id}/update_associations",
                "keys": [
                    "course_id",
                    "template_id"
                ]
            }
        ],
        "description": [
            "Send a list of course ids to add or remove new associations for the template. Cannot add courses that do not belong to the blueprint course's account. Also cannot add other blueprint courses or courses that already have an association with another blueprint course.",
            "After associating new courses, start a sync to populate their contents from the blueprint."
        ],
        "request_parameters": [
            {
                "parameter": "course_ids_to_add",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_ids_to_remove",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_associated_courses"
    },
    {
        "api_method_name": "Begin a migration to push to associated courses",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.master_courses/master_templates.queue_migration",
        "subtopic": "Blueprint Management",
        "defined_in": [
            "MasterCourses::MasterTemplatesController#queue_migration",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations",
                "keys": [
                    "course_id",
                    "template_id"
                ]
            }
        ],
        "description": [
            "Begins a migration to push recently updated content to all associated courses. Only one migration can be running at a time."
        ],
        "request_parameters": [
            {
                "parameter": "comment",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "send_notification",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "copy_settings",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "publish_after_initial_sync",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a BlueprintMigration"
        ],
        "paginated": false,
        "function_name": "begin_a_migration_to_push_to_associated_courses"
    },
    {
        "api_method_name": "Set or remove restrictions on a blueprint course object",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.master_courses/master_templates.restrict_item",
        "subtopic": "Blueprint Management",
        "defined_in": [
            "MasterCourses::MasterTemplatesController#restrict_item",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/blueprint_templates/{template_id}/restrict_item",
                "keys": [
                    "course_id",
                    "template_id"
                ]
            }
        ],
        "description": [
            "If a blueprint course object is restricted, editing will be limited for copies in associated courses."
        ],
        "request_parameters": [
            {
                "parameter": "content_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "content_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "restricted",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "restrictions",
                "type": "BlueprintRestriction",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "set_or_remove_restrictions_on_a_blueprint_course_object"
    },
    {
        "api_method_name": "Get unsynced changes",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.master_courses/master_templates.unsynced_changes",
        "subtopic": "Blueprint Management",
        "defined_in": [
            "MasterCourses::MasterTemplatesController#unsynced_changes",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/blueprint_templates/{template_id}/unsynced_changes",
                "keys": [
                    "course_id",
                    "template_id"
                ]
            }
        ],
        "description": [
            "Retrieve a list of learning objects that have changed since the last blueprint sync operation."
        ],
        "request_parameters": null,
        "returns": [
            "a list of ChangeRecords"
        ],
        "paginated": false,
        "function_name": "get_unsynced_changes"
    },
    {
        "api_method_name": "List blueprint migrations",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.master_courses/master_templates.migrations_index",
        "subtopic": "Blueprint Course History",
        "defined_in": [
            "MasterCourses::MasterTemplatesController#migrations_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations",
                "keys": [
                    "course_id",
                    "template_id"
                ]
            }
        ],
        "description": [
            "Shows a paginated list of migrations for the template, starting with the most recent. This endpoint can be called on a blueprint course. See also the associated course side."
        ],
        "request_parameters": null,
        "returns": [
            "a list of BlueprintMigrations"
        ],
        "paginated": true,
        "function_name": "list_blueprint_migrations"
    },
    {
        "api_method_name": "Show a blueprint migration",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.master_courses/master_templates.migrations_show",
        "subtopic": "Blueprint Course History",
        "defined_in": [
            "MasterCourses::MasterTemplatesController#migrations_show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}",
                "keys": [
                    "course_id",
                    "template_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Shows the status of a migration. This endpoint can be called on a blueprint course. See also the associated course side."
        ],
        "request_parameters": null,
        "returns": [
            "a BlueprintMigration"
        ],
        "paginated": false,
        "function_name": "show_a_blueprint_migration"
    },
    {
        "api_method_name": "Get migration details",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.master_courses/master_templates.migration_details",
        "subtopic": "Blueprint Course History",
        "defined_in": [
            "MasterCourses::MasterTemplatesController#migration_details",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}/details",
                "keys": [
                    "course_id",
                    "template_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Show the changes that were propagated in a blueprint migration. This endpoint can be called on a blueprint course. See also the associated course side."
        ],
        "request_parameters": null,
        "returns": [
            "a list of ChangeRecords"
        ],
        "paginated": false,
        "function_name": "get_migration_details"
    },
    {
        "api_method_name": "List blueprint subscriptions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.master_courses/master_templates.subscriptions_index",
        "subtopic": "Associated Course History",
        "defined_in": [
            "MasterCourses::MasterTemplatesController#subscriptions_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/blueprint_subscriptions",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns a list of blueprint subscriptions for the given course. (Currently a course may have no more than one.)"
        ],
        "request_parameters": null,
        "returns": [
            "a list of BlueprintSubscriptions"
        ],
        "paginated": false,
        "function_name": "list_blueprint_subscriptions"
    },
    {
        "api_method_name": "List blueprint imports",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.master_courses/master_templates.imports_index",
        "subtopic": "Associated Course History",
        "defined_in": [
            "MasterCourses::MasterTemplatesController#imports_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations",
                "keys": [
                    "course_id",
                    "subscription_id"
                ]
            }
        ],
        "description": [
            "Shows a paginated list of migrations imported into a course associated with a blueprint, starting with the most recent. See also the blueprint course side.",
            "Use 'default' as the subscription_id to use the currently active blueprint subscription."
        ],
        "request_parameters": null,
        "returns": [
            "a list of BlueprintMigrations"
        ],
        "paginated": true,
        "function_name": "list_blueprint_imports"
    },
    {
        "api_method_name": "Show a blueprint import",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.master_courses/master_templates.imports_show",
        "subtopic": "Associated Course History",
        "defined_in": [
            "MasterCourses::MasterTemplatesController#imports_show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}",
                "keys": [
                    "course_id",
                    "subscription_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Shows the status of an import into a course associated with a blueprint. See also the blueprint course side."
        ],
        "request_parameters": null,
        "returns": [
            "a BlueprintMigration"
        ],
        "paginated": false,
        "function_name": "show_a_blueprint_import"
    },
    {
        "api_method_name": "Get import details",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.master_courses/master_templates.import_details",
        "subtopic": "Associated Course History",
        "defined_in": [
            "MasterCourses::MasterTemplatesController#import_details",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/master_courses/master_templates_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}/details",
                "keys": [
                    "course_id",
                    "subscription_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Show the changes that were propagated to a course associated with a blueprint.  See also the blueprint course side."
        ],
        "request_parameters": null,
        "returns": [
            "a list of ChangeRecords"
        ],
        "paginated": false,
        "function_name": "get_import_details"
    },
    {
        "api_method_name": "List bookmarks",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.bookmarks/bookmarks.index",
        "subtopic": "Bookmarks",
        "defined_in": [
            "Bookmarks::BookmarksController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/bookmarks/bookmarks_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/self/bookmarks",
                "keys": []
            }
        ],
        "description": [
            "Returns the paginated list of bookmarks."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Bookmarks"
        ],
        "paginated": true,
        "function_name": "list_bookmarks"
    },
    {
        "api_method_name": "Create bookmark",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.bookmarks/bookmarks.create",
        "subtopic": "Bookmarks",
        "defined_in": [
            "Bookmarks::BookmarksController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/bookmarks/bookmarks_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/users/self/bookmarks",
                "keys": []
            }
        ],
        "description": [
            "Creates a bookmark."
        ],
        "request_parameters": [
            {
                "parameter": "name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "url",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "position",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "data",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Bookmark"
        ],
        "paginated": false,
        "function_name": "create_bookmark"
    },
    {
        "api_method_name": "Get bookmark",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.bookmarks/bookmarks.show",
        "subtopic": "Bookmarks",
        "defined_in": [
            "Bookmarks::BookmarksController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/bookmarks/bookmarks_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/self/bookmarks/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the details for a bookmark."
        ],
        "request_parameters": null,
        "returns": [
            "a Bookmark"
        ],
        "paginated": false,
        "function_name": "get_bookmark"
    },
    {
        "api_method_name": "Update bookmark",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.bookmarks/bookmarks.update",
        "subtopic": "Bookmarks",
        "defined_in": [
            "Bookmarks::BookmarksController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/bookmarks/bookmarks_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/users/self/bookmarks/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Updates a bookmark"
        ],
        "request_parameters": [
            {
                "parameter": "name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "url",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "position",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "data",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Folder"
        ],
        "paginated": false,
        "function_name": "update_bookmark"
    },
    {
        "api_method_name": "Delete bookmark",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.bookmarks/bookmarks.destroy",
        "subtopic": "Bookmarks",
        "defined_in": [
            "Bookmarks::BookmarksController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/bookmarks/bookmarks_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/self/bookmarks/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Deletes a bookmark"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_bookmark"
    },
    {
        "api_method_name": "Get the brand config variables that should be used for this domain",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.brand_configs_api.show",
        "subtopic": "Brand Configs",
        "defined_in": [
            "BrandConfigsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/brand_configs_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/brand_variables",
                "keys": []
            }
        ],
        "description": [
            "Will redirect to a static json file that has all of the brand variables used by this account. Even though this is a redirect, do not store the redirected url since if the account makes any changes it will redirect to a new url. Needs no authentication."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_the_brand_config_variables_that_should_be_used_for_this_domain"
    },
    {
        "api_method_name": "List calendar events",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.calendar_events_api.index",
        "subtopic": "Calendar Events",
        "defined_in": [
            "CalendarEventsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/calendar_events_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/calendar_events",
                "keys": []
            }
        ],
        "description": [
            "Retrieve the paginated list of calendar events or assignments for the current user"
        ],
        "request_parameters": [
            {
                "parameter": "type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "start_date",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_date",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "undated",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "all_events",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "context_codes[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "excludes[]",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "important_dates",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of CalendarEvents"
        ],
        "paginated": true,
        "function_name": "list_calendar_events"
    },
    {
        "api_method_name": "List calendar events for a user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.calendar_events_api.user_index",
        "subtopic": "Calendar Events",
        "defined_in": [
            "CalendarEventsApiController#user_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/calendar_events_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/calendar_events",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Retrieve the paginated list of calendar events or assignments for the specified user. To view calendar events for a user other than yourself, you must either be an observer of that user or an administrator."
        ],
        "request_parameters": [
            {
                "parameter": "type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "start_date",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_date",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "undated",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "all_events",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "context_codes[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "excludes[]",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "submission_types[]",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "exclude_submission_types[]",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "important_dates",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of CalendarEvents"
        ],
        "paginated": true,
        "function_name": "list_calendar_events_for_a_user"
    },
    {
        "api_method_name": "Create a calendar event",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.calendar_events_api.create",
        "subtopic": "Calendar Events",
        "defined_in": [
            "CalendarEventsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/calendar_events_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/calendar_events",
                "keys": []
            }
        ],
        "description": [
            "Create and return a new calendar event"
        ],
        "request_parameters": [
            {
                "parameter": "calendar_event[context_code]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[description]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[location_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[location_address]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[time_zone_edited]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[all_day]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[child_event_data][X][start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[child_event_data][X][end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[child_event_data][X][context_code]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[duplicate][count]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[duplicate][interval]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[duplicate][frequency]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[duplicate][append_iterator]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_calendar_event"
    },
    {
        "api_method_name": "Get a single calendar event or assignment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.calendar_events_api.show",
        "subtopic": "Calendar Events",
        "defined_in": [
            "CalendarEventsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/calendar_events_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/calendar_events/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_a_single_calendar_event_or_assignment"
    },
    {
        "api_method_name": "Reserve a time slot",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.calendar_events_api.reserve",
        "subtopic": "Calendar Events",
        "defined_in": [
            "CalendarEventsApiController#reserve",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/calendar_events_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/calendar_events/{id}/reservations",
                "keys": [
                    "id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/calendar_events/{id}/reservations/{participant_id}",
                "keys": [
                    "id",
                    "participant_id"
                ]
            }
        ],
        "description": [
            "Reserves a particular time slot and return the new reservation"
        ],
        "request_parameters": [
            {
                "parameter": "participant_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "comments",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "cancel_existing",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "reserve_a_time_slot"
    },
    {
        "api_method_name": "Update a calendar event",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.calendar_events_api.update",
        "subtopic": "Calendar Events",
        "defined_in": [
            "CalendarEventsApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/calendar_events_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/calendar_events/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Update and return a calendar event"
        ],
        "request_parameters": [
            {
                "parameter": "calendar_event[context_code]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[description]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[location_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[location_address]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[time_zone_edited]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[all_day]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[child_event_data][X][start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[child_event_data][X][end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calendar_event[child_event_data][X][context_code]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_a_calendar_event"
    },
    {
        "api_method_name": "Delete a calendar event",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.calendar_events_api.destroy",
        "subtopic": "Calendar Events",
        "defined_in": [
            "CalendarEventsApiController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/calendar_events_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/calendar_events/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Delete an event from the calendar and return the deleted event"
        ],
        "request_parameters": [
            {
                "parameter": "cancel_reason",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_calendar_event"
    },
    {
        "api_method_name": "Set a course timetable",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.calendar_events_api.set_course_timetable",
        "subtopic": "Calendar Events",
        "defined_in": [
            "CalendarEventsApiController#set_course_timetable",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/calendar_events_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/calendar_events/timetable",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Creates and updates \u201ctimetable\u201d events for a course. Can automaticaly generate a series of calendar events based on simple schedules (e.g. \u201cMonday and Wednesday at 2:00pm\u201d )",
            "Existing timetable events for the course and course sections will be updated if they still are part of the timetable. Otherwise, they will be deleted."
        ],
        "request_parameters": [
            {
                "parameter": "timetables[course_section_id][]",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "timetables[course_section_id][][weekdays]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "timetables[course_section_id][][start_time]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "timetables[course_section_id][][end_time]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "timetables[course_section_id][][location_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "set_a_course_timetable"
    },
    {
        "api_method_name": "Get course timetable",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.calendar_events_api.get_course_timetable",
        "subtopic": "Calendar Events",
        "defined_in": [
            "CalendarEventsApiController#get_course_timetable",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/calendar_events_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/calendar_events/timetable",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the last timetable set by the Set a course timetable endpoint"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_course_timetable"
    },
    {
        "api_method_name": "Create or update events directly for a course timetable",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.calendar_events_api.set_course_timetable_events",
        "subtopic": "Calendar Events",
        "defined_in": [
            "CalendarEventsApiController#set_course_timetable_events",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/calendar_events_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/calendar_events/timetable_events",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Creates and updates \u201ctimetable\u201d events for a course or course section. Similar to setting a course timetable, but instead of generating a list of events based on a timetable schedule, this endpoint expects a complete list of events."
        ],
        "request_parameters": [
            {
                "parameter": "course_section_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "events[]",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "events[][start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "events[][end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "events[][location_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "events[][code]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "events[][title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_or_update_events_directly_for_a_course_timetable"
    },
    {
        "api_method_name": "List collaborations",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.collaborations.api_index",
        "subtopic": "Collaborations",
        "defined_in": [
            "CollaborationsController#api_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/collaborations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/collaborations",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/collaborations",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "A paginated list of collaborations the current user has access to in the context of the course provided in the url. NOTE: this only returns ExternalToolCollaboration type collaborations."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Collaborations"
        ],
        "paginated": true,
        "function_name": "list_collaborations"
    },
    {
        "api_method_name": "List members of a collaboration.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.collaborations.members",
        "subtopic": "Collaborations",
        "defined_in": [
            "CollaborationsController#members",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/collaborations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/collaborations/{id}/members",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "A paginated list of the collaborators of a given collaboration"
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Collaborators"
        ],
        "paginated": true,
        "function_name": "list_members_of_a_collaboration_"
    },
    {
        "api_method_name": "List potential members",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.collaborations.potential_collaborators",
        "subtopic": "Collaborations",
        "defined_in": [
            "CollaborationsController#potential_collaborators",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/collaborations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/potential_collaborators",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/potential_collaborators",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "A paginated list of the users who can potentially be added to a collaboration in the given context.",
            "For courses, this consists of all enrolled users.  For groups, it is comprised of the group members plus the admins of the course containing the group."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Users"
        ],
        "paginated": true,
        "function_name": "list_potential_members"
    },
    {
        "api_method_name": "List of CommMessages for a user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.comm_messages_api.index",
        "subtopic": "CommMessages",
        "defined_in": [
            "CommMessagesApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/comm_messages_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/comm_messages",
                "keys": []
            }
        ],
        "description": [
            "Retrieve a paginated list of messages sent to a user."
        ],
        "request_parameters": [
            {
                "parameter": "user_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "start_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of CommMessages"
        ],
        "paginated": true,
        "function_name": "list_of_commmessages_for_a_user"
    },
    {
        "api_method_name": "List user communication channels",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.communication_channels.index",
        "subtopic": "Communication Channels",
        "defined_in": [
            "CommunicationChannelsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/communication_channels_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/communication_channels",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Returns a paginated list of communication channels for the specified user, sorted by position."
        ],
        "request_parameters": null,
        "returns": [
            "a list of CommunicationChannels"
        ],
        "paginated": true,
        "function_name": "list_user_communication_channels"
    },
    {
        "api_method_name": "Create a communication channel",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.communication_channels.create",
        "subtopic": "Communication Channels",
        "defined_in": [
            "CommunicationChannelsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/communication_channels_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/users/{user_id}/communication_channels",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Creates a new communication channel for the specified user."
        ],
        "request_parameters": [
            {
                "parameter": "communication_channel[address]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "communication_channel[type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "communication_channel[token]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "skip_confirmation",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a CommunicationChannel"
        ],
        "paginated": false,
        "function_name": "create_a_communication_channel"
    },
    {
        "api_method_name": "Delete a communication channel",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.communication_channels.destroy",
        "subtopic": "Communication Channels",
        "defined_in": [
            "CommunicationChannelsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/communication_channels_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/{user_id}/communication_channels/{id}",
                "keys": [
                    "user_id",
                    "id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/users/{user_id}/communication_channels/{type}/{address}",
                "keys": [
                    "user_id",
                    "type",
                    "address"
                ]
            }
        ],
        "description": [
            "Delete an existing communication channel."
        ],
        "request_parameters": null,
        "returns": [
            "a CommunicationChannel"
        ],
        "paginated": false,
        "function_name": "delete_a_communication_channel"
    },
    {
        "api_method_name": "Delete a push notification endpoint",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.communication_channels.delete_push_token",
        "subtopic": "Communication Channels",
        "defined_in": [
            "CommunicationChannelsController#delete_push_token",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/communication_channels_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/self/communication_channels/push",
                "keys": []
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_push_notification_endpoint"
    },
    {
        "api_method_name": "List conferences",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conferences.index",
        "subtopic": "Conferences",
        "defined_in": [
            "ConferencesController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conferences_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/conferences",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/conferences",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Retrieve the paginated list of conferences for this context",
            "This API returns a JSON object containing the list of conferences, the key for the list of conferences is \u201cconferences\u201d"
        ],
        "request_parameters": null,
        "returns": [
            "a list of Conferences"
        ],
        "paginated": true,
        "function_name": "list_conferences"
    },
    {
        "api_method_name": "List conferences for the current user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conferences.for_user",
        "subtopic": "Conferences",
        "defined_in": [
            "ConferencesController#for_user",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conferences_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/conferences",
                "keys": []
            }
        ],
        "description": [
            "Retrieve the paginated list of conferences for all courses and groups the current user belongs to",
            "This API returns a JSON object containing the list of conferences. The key for the list of conferences is \u201cconferences\u201d."
        ],
        "request_parameters": [
            {
                "parameter": "state",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Conferences"
        ],
        "paginated": true,
        "function_name": "list_conferences_for_the_current_user"
    },
    {
        "api_method_name": "List content exports",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_exports_api.index",
        "subtopic": "Content Exports",
        "defined_in": [
            "ContentExportsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_exports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/content_exports",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/content_exports",
                "keys": [
                    "group_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/content_exports",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "A paginated list of the past and pending content export jobs for a course, group, or user. Exports are returned newest first."
        ],
        "request_parameters": null,
        "returns": [
            "a list of ContentExports"
        ],
        "paginated": true,
        "function_name": "list_content_exports"
    },
    {
        "api_method_name": "Show content export",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_exports_api.show",
        "subtopic": "Content Exports",
        "defined_in": [
            "ContentExportsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_exports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/content_exports/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/content_exports/{id}",
                "keys": [
                    "group_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/content_exports/{id}",
                "keys": [
                    "user_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Get information about a single content export."
        ],
        "request_parameters": null,
        "returns": [
            "a ContentExport"
        ],
        "paginated": false,
        "function_name": "show_content_export"
    },
    {
        "api_method_name": "Export content",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_exports_api.create",
        "subtopic": "Content Exports",
        "defined_in": [
            "ContentExportsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_exports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/content_exports",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/content_exports",
                "keys": [
                    "group_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/users/{user_id}/content_exports",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Begin a content export job for a course, group, or user.",
            "You can use the Progress API to track the progress of the export. The migration's progress is linked to with the progress_url value.",
            "When the export completes, use the Show content export endpoint to retrieve a download URL for the exported content."
        ],
        "request_parameters": [
            {
                "parameter": "export_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "skip_notifications",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "select",
                "type": "Hash",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a ContentExport"
        ],
        "paginated": false,
        "function_name": "export_content"
    },
    {
        "api_method_name": "List migration issues",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.migration_issues.index",
        "subtopic": "Migration Issues",
        "defined_in": [
            "MigrationIssuesController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/migration_issues_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues",
                "keys": [
                    "account_id",
                    "content_migration_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues",
                "keys": [
                    "course_id",
                    "content_migration_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues",
                "keys": [
                    "group_id",
                    "content_migration_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues",
                "keys": [
                    "user_id",
                    "content_migration_id"
                ]
            }
        ],
        "description": [
            "Returns paginated migration issues"
        ],
        "request_parameters": null,
        "returns": [
            "a list of MigrationIssues"
        ],
        "paginated": true,
        "function_name": "list_migration_issues"
    },
    {
        "api_method_name": "Get a migration issue",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.migration_issues.show",
        "subtopic": "Migration Issues",
        "defined_in": [
            "MigrationIssuesController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/migration_issues_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues/{id}",
                "keys": [
                    "account_id",
                    "content_migration_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues/{id}",
                "keys": [
                    "course_id",
                    "content_migration_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues/{id}",
                "keys": [
                    "group_id",
                    "content_migration_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues/{id}",
                "keys": [
                    "user_id",
                    "content_migration_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns data on an individual migration issue"
        ],
        "request_parameters": null,
        "returns": [
            "a MigrationIssue"
        ],
        "paginated": false,
        "function_name": "get_a_migration_issue"
    },
    {
        "api_method_name": "Update a migration issue",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.migration_issues.update",
        "subtopic": "Migration Issues",
        "defined_in": [
            "MigrationIssuesController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/migration_issues_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues/{id}",
                "keys": [
                    "account_id",
                    "content_migration_id",
                    "id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues/{id}",
                "keys": [
                    "course_id",
                    "content_migration_id",
                    "id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues/{id}",
                "keys": [
                    "group_id",
                    "content_migration_id",
                    "id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues/{id}",
                "keys": [
                    "user_id",
                    "content_migration_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update the workflow_state of a migration issue"
        ],
        "request_parameters": [
            {
                "parameter": "workflow_state",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a MigrationIssue"
        ],
        "paginated": false,
        "function_name": "update_a_migration_issue"
    },
    {
        "api_method_name": "List content migrations",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_migrations.index",
        "subtopic": "Content Migrations",
        "defined_in": [
            "ContentMigrationsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_migrations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/content_migrations",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/content_migrations",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/content_migrations",
                "keys": [
                    "group_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/content_migrations",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Returns paginated content migrations"
        ],
        "request_parameters": null,
        "returns": [
            "a list of ContentMigrations"
        ],
        "paginated": true,
        "function_name": "list_content_migrations"
    },
    {
        "api_method_name": "Get a content migration",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_migrations.show",
        "subtopic": "Content Migrations",
        "defined_in": [
            "ContentMigrationsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_migrations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/content_migrations/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/content_migrations/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/content_migrations/{id}",
                "keys": [
                    "group_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/content_migrations/{id}",
                "keys": [
                    "user_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns data on an individual content migration"
        ],
        "request_parameters": null,
        "returns": [
            "a ContentMigration"
        ],
        "paginated": false,
        "function_name": "get_a_content_migration"
    },
    {
        "api_method_name": "Create a content migration",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_migrations.create",
        "subtopic": "Content Migrations",
        "defined_in": [
            "ContentMigrationsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_migrations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/content_migrations",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/content_migrations",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/content_migrations",
                "keys": [
                    "group_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/users/{user_id}/content_migrations",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Create a content migration. If the migration requires a file to be uploaded the actual processing of the file will start once the file upload process is completed. File uploading works as described in the File Upload Documentation except that the values are set on a pre_attachment sub-hash.",
            "For migrations that don't require a file to be uploaded, like course copy, the processing will begin as soon as the migration is created.",
            "You can use the Progress API to track the progress of the migration. The migration's progress is linked to with the progress_url value.",
            "The two general workflows are:",
            "If no file upload is needed:",
            "For file uploading:"
        ],
        "request_parameters": [
            {
                "parameter": "migration_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "pre_attachment[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "pre_attachment[*]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "settings[file_url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "settings[content_export_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "settings[source_course_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "settings[folder_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "settings[overwrite_quizzes]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "settings[question_bank_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "settings[question_bank_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "settings[insert_into_module_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "settings[insert_into_module_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "settings[insert_into_module_position]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "settings[move_to_assignment_group_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "date_shift_options[shift_dates]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "date_shift_options[old_start_date]",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "date_shift_options[old_end_date]",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "date_shift_options[new_start_date]",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "date_shift_options[new_end_date]",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "date_shift_options[day_substitutions][X]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "date_shift_options[remove_dates]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "selective_import",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "select",
                "type": "Hash",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a ContentMigration"
        ],
        "paginated": false,
        "function_name": "create_a_content_migration"
    },
    {
        "api_method_name": "Update a content migration",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_migrations.update",
        "subtopic": "Content Migrations",
        "defined_in": [
            "ContentMigrationsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_migrations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/content_migrations/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/content_migrations/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/groups/{group_id}/content_migrations/{id}",
                "keys": [
                    "group_id",
                    "id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/users/{user_id}/content_migrations/{id}",
                "keys": [
                    "user_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update a content migration. Takes same arguments as create except that you can't change the migration type. However, changing most settings after the migration process has started will not do anything. Generally updating the content migration will be used when there is a file upload problem, or when importing content selectively. If the first upload has a problem you can supply new pre_attachment values to start the process again."
        ],
        "request_parameters": null,
        "returns": [
            "a ContentMigration"
        ],
        "paginated": false,
        "function_name": "update_a_content_migration"
    },
    {
        "api_method_name": "List Migration Systems",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_migrations.available_migrators",
        "subtopic": "Content Migrations",
        "defined_in": [
            "ContentMigrationsController#available_migrators",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_migrations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/content_migrations/migrators",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/content_migrations/migrators",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/content_migrations/migrators",
                "keys": [
                    "group_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/content_migrations/migrators",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Lists the currently available migration types. These values may change."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Migrators"
        ],
        "paginated": false,
        "function_name": "list_migration_systems"
    },
    {
        "api_method_name": "List items for selective import",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_migrations.content_list",
        "subtopic": "Content Migrations",
        "defined_in": [
            "ContentMigrationsController#content_list",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_migrations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/content_migrations/{id}/selective_data",
                "keys": [
                    "account_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/content_migrations/{id}/selective_data",
                "keys": [
                    "course_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/content_migrations/{id}/selective_data",
                "keys": [
                    "group_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/content_migrations/{id}/selective_data",
                "keys": [
                    "user_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Enumerates the content available for selective import in a tree structure. Each node provides a property copy argument that can be supplied to the Update endpoint to selectively copy the content associated with that tree node and its children. Each node may also provide a sub_items_url or an array of sub_items which you can use to obtain copy parameters for a subset of the resources in a given node.",
            "If no type is sent you will get a list of the top-level sections in the content. It will look something like this:",
            "When a type is provided, nodes may be further divided via sub_items. For example, using type=assignments results in a node for each assignment group and a sub_item for each assignment, like this:",
            "To import the items corresponding to a particular tree node, use the property as a parameter to the Update endpoint and assign a value of 1, for example:",
            "You can include multiple copy parameters to selectively import multiple items or groups of items."
        ],
        "request_parameters": [
            {
                "parameter": "type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "list_items_for_selective_import"
    },
    {
        "api_method_name": "Get current settings for account or course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.csp_settings.get_csp_settings",
        "subtopic": "Content Security Policy Settings",
        "defined_in": [
            "CspSettingsController#get_csp_settings",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/csp_settings_controller.rb"
        ],
        "beta": "BETA: This API endpoint is not finalized, and there could be breaking changes before its final release.",
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/csp_settings",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/csp_settings",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Update multiple modules in an account."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_current_settings_for_account_or_course"
    },
    {
        "api_method_name": "Enable, disable, or clear explicit CSP setting",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.csp_settings.set_csp_setting",
        "subtopic": "Content Security Policy Settings",
        "defined_in": [
            "CspSettingsController#set_csp_setting",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/csp_settings_controller.rb"
        ],
        "beta": "BETA: This API endpoint is not finalized, and there could be breaking changes before its final release.",
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/csp_settings",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/csp_settings",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Either explicitly sets CSP to be on or off for courses and sub-accounts, or clear the explicit settings to default to those set by a parent account",
            "Note: If \u201cinherited\u201d and \u201csettings_locked\u201d are both true for this account or course, then the CSP setting cannot be modified."
        ],
        "request_parameters": [
            {
                "parameter": "status",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "enable__disable__or_clear_explicit_csp_setting"
    },
    {
        "api_method_name": "Lock or unlock current CSP settings for sub-accounts and courses",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.csp_settings.set_csp_lock",
        "subtopic": "Content Security Policy Settings",
        "defined_in": [
            "CspSettingsController#set_csp_lock",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/csp_settings_controller.rb"
        ],
        "beta": "BETA: This API endpoint is not finalized, and there could be breaking changes before its final release.",
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/csp_settings/lock",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Can only be set if CSP is explicitly enabled or disabled on this account (i.e. \u201cinherited\u201d is false)."
        ],
        "request_parameters": [
            {
                "parameter": "settings_locked",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "lock_or_unlock_current_csp_settings_for_sub_accounts_and_courses"
    },
    {
        "api_method_name": "Add an allowed domain to account",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.csp_settings.add_domain",
        "subtopic": "Content Security Policy Settings",
        "defined_in": [
            "CspSettingsController#add_domain",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/csp_settings_controller.rb"
        ],
        "beta": "BETA: This API endpoint is not finalized, and there could be breaking changes before its final release.",
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/csp_settings/domains",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Adds an allowed domain for the current account. Note: this will not take effect unless CSP is explicitly enabled on this account."
        ],
        "request_parameters": [
            {
                "parameter": "domain",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "add_an_allowed_domain_to_account"
    },
    {
        "api_method_name": "Add multiple allowed domains to an account",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.csp_settings.add_multiple_domains",
        "subtopic": "Content Security Policy Settings",
        "defined_in": [
            "CspSettingsController#add_multiple_domains",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/csp_settings_controller.rb"
        ],
        "beta": "BETA: This API endpoint is not finalized, and there could be breaking changes before its final release.",
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/csp_settings/domains/batch_create",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Adds multiple allowed domains for the current account. Note: this will not take effect unless CSP is explicitly enabled on this account."
        ],
        "request_parameters": [
            {
                "parameter": "domains",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "add_multiple_allowed_domains_to_an_account"
    },
    {
        "api_method_name": "Retrieve reported CSP Violations for account",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.csp_settings.csp_log",
        "subtopic": "Content Security Policy Settings",
        "defined_in": [
            "CspSettingsController#csp_log",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/csp_settings_controller.rb"
        ],
        "beta": "BETA: This API endpoint is not finalized, and there could be breaking changes before its final release.",
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/csp_log",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Must be called on a root account."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "retrieve_reported_csp_violations_for_account"
    },
    {
        "api_method_name": "Remove a domain from account",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.csp_settings.remove_domain",
        "subtopic": "Content Security Policy Settings",
        "defined_in": [
            "CspSettingsController#remove_domain",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/csp_settings_controller.rb"
        ],
        "beta": "BETA: This API endpoint is not finalized, and there could be breaking changes before its final release.",
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/csp_settings/domains",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Removes an allowed domain from the current account."
        ],
        "request_parameters": [
            {
                "parameter": "domain",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "remove_a_domain_from_account"
    },
    {
        "api_method_name": "Create a content share",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_shares.create",
        "subtopic": "Content Shares",
        "defined_in": [
            "ContentSharesController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_shares_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/users/{user_id}/content_shares",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Share content directly between two or more users"
        ],
        "request_parameters": [
            {
                "parameter": "receiver_ids",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "content_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "content_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a ContentShare"
        ],
        "paginated": false,
        "function_name": "create_a_content_share"
    },
    {
        "api_method_name": "List content shares",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_shares.index",
        "subtopic": "Content Shares",
        "defined_in": [
            "ContentSharesController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_shares_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/content_shares/sent",
                "keys": [
                    "user_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/content_shares/received",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Return a paginated list of content shares a user has sent or received. Use self as the user_id to retrieve your own content shares. Only linked observers and administrators may view other users' content shares."
        ],
        "request_parameters": null,
        "returns": [
            "a list of ContentShares"
        ],
        "paginated": true,
        "function_name": "list_content_shares"
    },
    {
        "api_method_name": "Get unread shares count",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_shares.unread_count",
        "subtopic": "Content Shares",
        "defined_in": [
            "ContentSharesController#unread_count",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_shares_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/content_shares/unread_count",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Return the number of content shares a user has received that have not yet been read. Use self as the user_id to retrieve your own content shares. Only linked observers and administrators may view other users' content shares."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_unread_shares_count"
    },
    {
        "api_method_name": "Get content share",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_shares.show",
        "subtopic": "Content Shares",
        "defined_in": [
            "ContentSharesController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_shares_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/content_shares/{id}",
                "keys": [
                    "user_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Return information about a single content share. You may use self as the user_id to retrieve your own content share."
        ],
        "request_parameters": null,
        "returns": [
            "a ContentShare"
        ],
        "paginated": false,
        "function_name": "get_content_share"
    },
    {
        "api_method_name": "Remove content share",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_shares.destroy",
        "subtopic": "Content Shares",
        "defined_in": [
            "ContentSharesController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_shares_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/{user_id}/content_shares/{id}",
                "keys": [
                    "user_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Remove a content share from your list. Use self as the user_id. Note that this endpoint does not delete other users' copies of the content share."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "remove_content_share"
    },
    {
        "api_method_name": "Add users to content share",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_shares.add_users",
        "subtopic": "Content Shares",
        "defined_in": [
            "ContentSharesController#add_users",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_shares_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/users/{user_id}/content_shares/{id}/add_users",
                "keys": [
                    "user_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Send a previously created content share to additional users"
        ],
        "request_parameters": [
            {
                "parameter": "receiver_ids",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a ContentShare"
        ],
        "paginated": false,
        "function_name": "add_users_to_content_share"
    },
    {
        "api_method_name": "Update a content share",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_shares.update",
        "subtopic": "Content Shares",
        "defined_in": [
            "ContentSharesController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_shares_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/users/{user_id}/content_shares/{id}",
                "keys": [
                    "user_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Mark a content share read or unread"
        ],
        "request_parameters": [
            {
                "parameter": "read_state",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a ContentShare"
        ],
        "paginated": false,
        "function_name": "update_a_content_share"
    },
    {
        "api_method_name": "List conversations",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conversations.index",
        "subtopic": "Conversations",
        "defined_in": [
            "ConversationsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/conversations",
                "keys": []
            }
        ],
        "description": [
            "Returns the paginated list of conversations for the current user, most recent ones first."
        ],
        "request_parameters": [
            {
                "parameter": "scope",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "filter[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "filter_mode",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "interleave_submissions",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include_all_conversation_ids",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Conversations"
        ],
        "paginated": true,
        "function_name": "list_conversations"
    },
    {
        "api_method_name": "Create a conversation",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conversations.create",
        "subtopic": "Conversations",
        "defined_in": [
            "ConversationsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/conversations",
                "keys": []
            }
        ],
        "description": [
            "Create a new conversation with one or more recipients. If there is already an existing private conversation with the given recipients, it will be reused."
        ],
        "request_parameters": [
            {
                "parameter": "recipients[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "subject",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "body",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "force_new",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "group_conversation",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "attachment_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "media_comment_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "media_comment_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user_note",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "mode",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "scope",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "filter[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "filter_mode",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "context_code",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_conversation"
    },
    {
        "api_method_name": "Get running batches",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conversations.batches",
        "subtopic": "Conversations",
        "defined_in": [
            "ConversationsController#batches",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/conversations/batches",
                "keys": []
            }
        ],
        "description": [
            "Returns any currently running conversation batches for the current user. Conversation batches are created when a bulk private message is sent asynchronously (see the mode argument to the create API action)."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_running_batches"
    },
    {
        "api_method_name": "Get a single conversation",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conversations.show",
        "subtopic": "Conversations",
        "defined_in": [
            "ConversationsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/conversations/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Returns information for a single conversation for the current user. Response includes all fields that are present in the list/index action as well as messages and extended participant information."
        ],
        "request_parameters": [
            {
                "parameter": "interleave_submissions",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "scope",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "filter[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "filter_mode",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "auto_mark_as_read",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_a_single_conversation"
    },
    {
        "api_method_name": "Edit a conversation",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conversations.update",
        "subtopic": "Conversations",
        "defined_in": [
            "ConversationsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/conversations/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Updates attributes for a single conversation."
        ],
        "request_parameters": [
            {
                "parameter": "conversation[workflow_state]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "conversation[subscribed]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "conversation[starred]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "scope",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "filter[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "filter_mode",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "edit_a_conversation"
    },
    {
        "api_method_name": "Mark all as read",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conversations.mark_all_as_read",
        "subtopic": "Conversations",
        "defined_in": [
            "ConversationsController#mark_all_as_read",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/conversations/mark_all_as_read",
                "keys": []
            }
        ],
        "description": [
            "Mark all conversations as read."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "mark_all_as_read"
    },
    {
        "api_method_name": "Delete a conversation",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conversations.destroy",
        "subtopic": "Conversations",
        "defined_in": [
            "ConversationsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/conversations/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Delete this conversation and its messages. Note that this only deletes this user's view of the conversation.",
            "Response includes same fields as UPDATE action"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_conversation"
    },
    {
        "api_method_name": "Add recipients",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conversations.add_recipients",
        "subtopic": "Conversations",
        "defined_in": [
            "ConversationsController#add_recipients",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/conversations/{id}/add_recipients",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Add recipients to an existing group conversation. Response is similar to the GET/show action, except that only includes the latest message (e.g. \u201cjoe was added to the conversation by bob\u201d)"
        ],
        "request_parameters": [
            {
                "parameter": "recipients[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "add_recipients"
    },
    {
        "api_method_name": "Add a message",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conversations.add_message",
        "subtopic": "Conversations",
        "defined_in": [
            "ConversationsController#add_message",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/conversations/{id}/add_message",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Add a message to an existing conversation. Response is similar to the GET/show action, except that only includes the latest message (i.e. what we just sent)",
            "An array of user ids. Defaults to all of the current conversation recipients. To explicitly send a message to no other recipients, this array should consist of the logged-in user id.",
            "An array of message ids from this conversation to send to recipients of the new message. Recipients who already had a copy of included messages will not be affected."
        ],
        "request_parameters": [
            {
                "parameter": "body",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "attachment_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "media_comment_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "media_comment_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "recipients[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "included_messages[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user_note",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "add_a_message"
    },
    {
        "api_method_name": "Delete a message",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conversations.remove_messages",
        "subtopic": "Conversations",
        "defined_in": [
            "ConversationsController#remove_messages",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/conversations/{id}/remove_messages",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Delete messages from this conversation. Note that this only affects this user's view of the conversation. If all messages are deleted, the conversation will be as well (equivalent to DELETE)"
        ],
        "request_parameters": [
            {
                "parameter": "remove[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_message"
    },
    {
        "api_method_name": "Batch update conversations",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conversations.batch_update",
        "subtopic": "Conversations",
        "defined_in": [
            "ConversationsController#batch_update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/conversations",
                "keys": []
            }
        ],
        "description": [
            "Perform a change on a set of conversations. Operates asynchronously; use the progress endpoint to query the status of an operation."
        ],
        "request_parameters": [
            {
                "parameter": "conversation_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "event",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a Progress"
        ],
        "paginated": false,
        "function_name": "batch_update_conversations"
    },
    {
        "api_method_name": "Find recipients",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conversations.find_recipients",
        "subtopic": "Conversations",
        "defined_in": [
            "ConversationsController#find_recipients",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/conversations/find_recipients",
                "keys": []
            }
        ],
        "description": [
            "Deprecated, see the Find recipients endpoint in the Search API"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "find_recipients"
    },
    {
        "api_method_name": "Unread count",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.conversations.unread_count",
        "subtopic": "Conversations",
        "defined_in": [
            "ConversationsController#unread_count",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/conversations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/conversations/unread_count",
                "keys": []
            }
        ],
        "description": [
            "Get the number of unread conversations for the current user"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "unread_count"
    },
    {
        "api_method_name": "Query by course.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.course_audit_api.for_course",
        "subtopic": "Course Audit log",
        "defined_in": [
            "CourseAuditApiController#for_course",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/course_audit_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/audit/course/courses/{course_id}",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "List course change events for a given course."
        ],
        "request_parameters": [
            {
                "parameter": "start_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of CourseEvents"
        ],
        "paginated": false,
        "function_name": "query_by_course_"
    },
    {
        "api_method_name": "Query by account.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.course_audit_api.for_account",
        "subtopic": "Course Audit log",
        "defined_in": [
            "CourseAuditApiController#for_account",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/course_audit_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/audit/course/accounts/{account_id}",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "List course change events for a given account."
        ],
        "request_parameters": [
            {
                "parameter": "start_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of CourseEvents"
        ],
        "paginated": false,
        "function_name": "query_by_account_"
    },
    {
        "api_method_name": "Set extensions for student quiz submissions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/course_quiz_extensions.create",
        "subtopic": "Course Quiz Extensions",
        "defined_in": [
            "Quizzes::CourseQuizExtensionsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/course_quiz_extensions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/quiz_extensions",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Responses"
        ],
        "request_parameters": [
            {
                "parameter": "user_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "extra_attempts",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "extra_time",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "manually_unlocked",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "extend_from_now",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "extend_from_end_at",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "set_extensions_for_student_quiz_submissions"
    },
    {
        "api_method_name": "List your courses",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.index",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses",
                "keys": []
            }
        ],
        "description": [
            "Returns the paginated list of active courses for the current user."
        ],
        "request_parameters": [
            {
                "parameter": "enrollment_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_role",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_role_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_state",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "exclude_blueprint_courses",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "state[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Courses"
        ],
        "paginated": true,
        "function_name": "list_your_courses"
    },
    {
        "api_method_name": "List courses for a user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.user_index",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#user_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/courses",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Returns a paginated list of active courses for this user. To view the course list for a user other than yourself, you must be either an observer of that user or an administrator."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "state[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_state",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "homeroom",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Courses"
        ],
        "paginated": true,
        "function_name": "list_courses_for_a_user"
    },
    {
        "api_method_name": "Get user progress",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.user_progress",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#user_progress",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/users/{user_id}/progress",
                "keys": [
                    "course_id",
                    "user_id"
                ]
            }
        ],
        "description": [
            "Return progress information for the user and course",
            "You can supply self as the user_id to query your own progress in a course. To query another user's progress, you must be a teacher in the course, an administrator, or a linked observer of the user."
        ],
        "request_parameters": null,
        "returns": [
            "a CourseProgress"
        ],
        "paginated": false,
        "function_name": "get_user_progress"
    },
    {
        "api_method_name": "Create a new course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.create",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/courses",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Create a new course"
        ],
        "request_parameters": [
            {
                "parameter": "course[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[course_code]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[license]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[is_public]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[is_public_to_auth_users]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[public_syllabus]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[public_syllabus_to_auth]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[public_description]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[allow_student_wiki_edits]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[allow_wiki_comments]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[allow_student_forum_attachments]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[open_enrollment]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[self_enrollment]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[restrict_enrollments_to_course_dates]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[term_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[sis_course_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[integration_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[hide_final_grades]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[apply_assignment_group_weights]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[time_zone]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "offer",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enroll_me",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[default_view]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[syllabus_body]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[grading_standard_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[grade_passback_setting]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[course_format]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enable_sis_reactivation",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Course"
        ],
        "paginated": false,
        "function_name": "create_a_new_course"
    },
    {
        "api_method_name": "Upload a file",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.create_file",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#create_file",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/files",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Upload a file to the course.",
            "This API endpoint is the first step in uploading a file to a course. See the File Upload Documentation for details on the file upload workflow.",
            "Only those with the \u201cManage Files\u201d permission on a course can upload files to the course. By default, this is Teachers, TAs and Designers."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "upload_a_file"
    },
    {
        "api_method_name": "List students",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.students",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#students",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/students",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of students enrolled in this course.",
            "DEPRECATED: Please use the course users endpoint and pass \u201cstudent\u201d as the enrollment_type."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Users"
        ],
        "paginated": true,
        "function_name": "list_students"
    },
    {
        "api_method_name": "List users in course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.users",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#users",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/users",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/search_users",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of users in this course. And optionally the user's enrollments in the course."
        ],
        "request_parameters": [
            {
                "parameter": "search_term",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sort",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_type[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_role",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_role_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user_ids[]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_state[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Users"
        ],
        "paginated": true,
        "function_name": "list_users_in_course"
    },
    {
        "api_method_name": "List recently logged in students",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.recent_students",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#recent_students",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/recent_students",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of users in this course, ordered by how recently they have logged in. The records include the 'last_login' field which contains a timestamp of the last time that user logged into canvas.  The querying user must have the 'View usage reports' permission."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Users"
        ],
        "paginated": true,
        "function_name": "list_recently_logged_in_students"
    },
    {
        "api_method_name": "Get single user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.user",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#user",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/users/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Return information on a single user.",
            "Accepts the same include[] parameters as the :users: action, and returns a single user with the same fields as that action."
        ],
        "request_parameters": null,
        "returns": [
            "a User"
        ],
        "paginated": false,
        "function_name": "get_single_user"
    },
    {
        "api_method_name": "Search for content share users",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.content_share_users",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#content_share_users",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/content_share_users",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns a paginated list of users you can share content with.  Requires the content share feature and the user must have the manage content permission for the course."
        ],
        "request_parameters": [
            {
                "parameter": "search_term",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Users"
        ],
        "paginated": true,
        "function_name": "search_for_content_share_users"
    },
    {
        "api_method_name": "Preview processed html",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.preview_html",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#preview_html",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/preview_html",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Preview html content processed for this course"
        ],
        "request_parameters": [
            {
                "parameter": "html",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "preview_processed_html"
    },
    {
        "api_method_name": "Course activity stream",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.activity_stream",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#activity_stream",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/activity_stream",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the current user's course-specific activity stream, paginated.",
            "For full documentation, see the API documentation for the user activity stream, in the user api."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "course_activity_stream"
    },
    {
        "api_method_name": "Course activity stream summary",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.activity_stream_summary",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#activity_stream_summary",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/activity_stream/summary",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns a summary of the current user's course-specific activity stream.",
            "For full documentation, see the API documentation for the user activity stream summary, in the user api."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "course_activity_stream_summary"
    },
    {
        "api_method_name": "Course TODO items",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.todo_items",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#todo_items",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/todo",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the current user's course-specific todo items.",
            "For full documentation, see the API documentation for the user todo items, in the user api."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "course_todo_items"
    },
    {
        "api_method_name": "Delete/Conclude a course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.destroy",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Delete or conclude an existing course"
        ],
        "request_parameters": [
            {
                "parameter": "event",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "delete_conclude_a_course"
    },
    {
        "api_method_name": "Get course settings",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.api_settings",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#api_settings",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/settings",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns some of a course's settings."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_course_settings"
    },
    {
        "api_method_name": "Update course settings",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.update_settings",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#update_settings",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/settings",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Can update the following course settings:"
        ],
        "request_parameters": [
            {
                "parameter": "allow_student_discussion_topics",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "allow_student_forum_attachments",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "allow_student_discussion_editing",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "allow_student_organized_groups",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "filter_speed_grader_by_student_group",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "hide_final_grades",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "hide_distribution_graphs",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "hide_sections_on_course_users_page",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "lock_all_announcements",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "usage_rights_required",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "restrict_student_past_view",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "restrict_student_future_view",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "show_announcements_on_home_page",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "home_page_announcement_limit",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "syllabus_course_summary",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_course_settings"
    },
    {
        "api_method_name": "Return test student for course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.student_view_student",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#student_view_student",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/student_view_student",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns information for a test student in this course. Creates a test student if one does not already exist for the course. The caller must have permission to access the course's student view."
        ],
        "request_parameters": null,
        "returns": [
            "a User"
        ],
        "paginated": false,
        "function_name": "return_test_student_for_course"
    },
    {
        "api_method_name": "Get a single course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.show",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{id}",
                "keys": [
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/courses/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Return information on a single course.",
            "Accepts the same include[] parameters as the list action plus:"
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "teacher_limit",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Course"
        ],
        "paginated": false,
        "function_name": "get_a_single_course"
    },
    {
        "api_method_name": "Update a course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.update",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Update an existing course.",
            "Arguments are the same as Courses#create, with a few exceptions (enroll_me).",
            "If a user has content management rights, but not full course editing rights, the only attribute editable through this endpoint will be \u201csyllabus_body\u201d"
        ],
        "request_parameters": [
            {
                "parameter": "course[account_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[course_code]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[license]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[is_public]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[is_public_to_auth_users]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[public_syllabus]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[public_syllabus_to_auth]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[public_description]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[allow_student_wiki_edits]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[allow_wiki_comments]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[allow_student_forum_attachments]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[open_enrollment]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[self_enrollment]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[restrict_enrollments_to_course_dates]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[term_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[sis_course_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[integration_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[hide_final_grades]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[time_zone]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[apply_assignment_group_weights]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[storage_quota_mb]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "offer",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[event]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[default_view]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[syllabus_body]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[syllabus_course_summary]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[grading_standard_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[grade_passback_setting]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[course_format]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[image_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[image_url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[remove_image]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[blueprint]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[blueprint_restrictions]",
                "type": "BlueprintRestriction",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[use_blueprint_restrictions_by_object_type]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[blueprint_restrictions_by_object_type]",
                "type": "multiple BlueprintRestrictions",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[homeroom_course]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[sync_enrollments_from_homeroom]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[homeroom_course_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[template]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course[course_color]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_a_course"
    },
    {
        "api_method_name": "Update courses",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.batch_update",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#batch_update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/courses",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Update multiple courses in an account.  Operates asynchronously; use the progress endpoint to query the status of an operation.",
            "The action to take on each course.  Must be one of 'offer', 'conclude', 'delete', or 'undelete'."
        ],
        "request_parameters": [
            {
                "parameter": "course_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "event",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a Progress"
        ],
        "paginated": false,
        "function_name": "update_courses"
    },
    {
        "api_method_name": "Reset a course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.reset_content",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#reset_content",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/reset_content",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Deletes the current course, and creates a new equivalent course with no content, but all sections and users moved over."
        ],
        "request_parameters": null,
        "returns": [
            "a Course"
        ],
        "paginated": false,
        "function_name": "reset_a_course"
    },
    {
        "api_method_name": "Get effective due dates",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.effective_due_dates",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#effective_due_dates",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/effective_due_dates",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "For each assignment in the course, returns each assigned student's ID and their corresponding due date along with some grading period data. Returns a collection with keys representing assignment IDs and values as a collection containing keys representing student IDs and values representing the student's effective due_at, the grading_period_id of which the due_at falls in, and whether or not the grading period is closed (in_closed_grading_period)",
            "The list of assignment IDs for which effective student due dates are requested. If not provided, all assignments in the course will be used."
        ],
        "request_parameters": [
            {
                "parameter": "assignment_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_effective_due_dates"
    },
    {
        "api_method_name": "Permissions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.courses.permissions",
        "subtopic": "Courses",
        "defined_in": [
            "CoursesController#permissions",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/courses_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/permissions",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns permission information for the calling user in the given course. See also the Account and Group counterparts."
        ],
        "request_parameters": [
            {
                "parameter": "permissions[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "permissions"
    },
    {
        "api_method_name": "Get course copy status",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_imports.copy_course_status",
        "subtopic": "Courses",
        "defined_in": [
            "ContentImportsController#copy_course_status",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_imports_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/course_copy/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "DEPRECATED: Please use the Content Migrations API",
            "Retrieve the status of a course copy"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_course_copy_status"
    },
    {
        "api_method_name": "Copy course content",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.content_imports.copy_course_content",
        "subtopic": "Courses",
        "defined_in": [
            "ContentImportsController#copy_course_content",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/content_imports_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/course_copy",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "DEPRECATED: Please use the Content Migrations API",
            "Copies content from one course into another. The default is to copy all course content. You can control specific types to copy by using either the 'except' option or the 'only' option.",
            "The response is the same as the course copy status endpoint"
        ],
        "request_parameters": [
            {
                "parameter": "source_course",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "except[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "only[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "copy_course_content"
    },
    {
        "api_method_name": "List custom gradebook columns",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.custom_gradebook_columns_api.index",
        "subtopic": "Custom Gradebook Columns",
        "defined_in": [
            "CustomGradebookColumnsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_gradebook_columns_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/custom_gradebook_columns",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "A paginated list of all custom gradebook columns for a course"
        ],
        "request_parameters": [
            {
                "parameter": "include_hidden",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of CustomColumns"
        ],
        "paginated": true,
        "function_name": "list_custom_gradebook_columns"
    },
    {
        "api_method_name": "Create a custom gradebook column",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.custom_gradebook_columns_api.create",
        "subtopic": "Custom Gradebook Columns",
        "defined_in": [
            "CustomGradebookColumnsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_gradebook_columns_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/custom_gradebook_columns",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Create a custom gradebook column"
        ],
        "request_parameters": [
            {
                "parameter": "column[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "column[position]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "column[hidden]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "column[teacher_notes]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "column[read_only]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a CustomColumn"
        ],
        "paginated": false,
        "function_name": "create_a_custom_gradebook_column"
    },
    {
        "api_method_name": "Update a custom gradebook column",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.custom_gradebook_columns_api.update",
        "subtopic": "Custom Gradebook Columns",
        "defined_in": [
            "CustomGradebookColumnsApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_gradebook_columns_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/custom_gradebook_columns/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Accepts the same parameters as custom gradebook column creation"
        ],
        "request_parameters": null,
        "returns": [
            "a CustomColumn"
        ],
        "paginated": false,
        "function_name": "update_a_custom_gradebook_column"
    },
    {
        "api_method_name": "Delete a custom gradebook column",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.custom_gradebook_columns_api.destroy",
        "subtopic": "Custom Gradebook Columns",
        "defined_in": [
            "CustomGradebookColumnsApiController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_gradebook_columns_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/custom_gradebook_columns/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Permanently deletes a custom column and its associated data"
        ],
        "request_parameters": null,
        "returns": [
            "a CustomColumn"
        ],
        "paginated": false,
        "function_name": "delete_a_custom_gradebook_column"
    },
    {
        "api_method_name": "Reorder custom columns",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.custom_gradebook_columns_api.reorder",
        "subtopic": "Custom Gradebook Columns",
        "defined_in": [
            "CustomGradebookColumnsApiController#reorder",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_gradebook_columns_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/custom_gradebook_columns/reorder",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Puts the given columns in the specified order",
            "200 OK is returned if successful"
        ],
        "request_parameters": [
            {
                "parameter": "order[]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "reorder_custom_columns"
    },
    {
        "api_method_name": "List entries for a column",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.custom_gradebook_column_data_api.index",
        "subtopic": "Custom Gradebook Column Data",
        "defined_in": [
            "CustomGradebookColumnDataApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_gradebook_column_data_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/custom_gradebook_columns/{id}/data",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "This does not list entries for students without associated data."
        ],
        "request_parameters": [
            {
                "parameter": "include_hidden",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of ColumnData"
        ],
        "paginated": false,
        "function_name": "list_entries_for_a_column"
    },
    {
        "api_method_name": "Update column data",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.custom_gradebook_column_data_api.update",
        "subtopic": "Custom Gradebook Column Data",
        "defined_in": [
            "CustomGradebookColumnDataApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_gradebook_column_data_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/custom_gradebook_columns/{id}/data/{user_id}",
                "keys": [
                    "course_id",
                    "id",
                    "user_id"
                ]
            }
        ],
        "description": [
            "Set the content of a custom column"
        ],
        "request_parameters": [
            {
                "parameter": "column_data[content]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a ColumnDatum"
        ],
        "paginated": false,
        "function_name": "update_column_data"
    },
    {
        "api_method_name": "Bulk update column data",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.custom_gradebook_column_data_api.bulk_update",
        "subtopic": "Custom Gradebook Column Data",
        "defined_in": [
            "CustomGradebookColumnDataApiController#bulk_update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_gradebook_column_data_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/custom_gradebook_column_data",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Set the content of custom columns",
            "{",
            "}"
        ],
        "request_parameters": [
            {
                "parameter": "column_data[]",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a Progress"
        ],
        "paginated": false,
        "function_name": "bulk_update_column_data"
    },
    {
        "api_method_name": "List discussion topics",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics.index",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/discussion_topics",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/discussion_topics",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of discussion topics for this course or group."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "order_by",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "scope",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "only_announcements",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "filter_by",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "search_term",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "exclude_context_module_locked_topics",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of DiscussionTopics"
        ],
        "paginated": true,
        "function_name": "list_discussion_topics"
    },
    {
        "api_method_name": "Create a new discussion topic",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics.create",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/discussion_topics",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/discussion_topics",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Create an new discussion topic for the course or group."
        ],
        "request_parameters": [
            {
                "parameter": "title",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "message",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "discussion_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "published",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "delayed_post_at",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "allow_rating",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "lock_at",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "podcast_enabled",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "podcast_has_student_posts",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "require_initial_post",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment",
                "type": "Assignment",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "is_announcement",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "pinned",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "position_after",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "group_category_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "only_graders_can_rate",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sort_by_rating",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "attachment",
                "type": "File",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "specific_sections",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_new_discussion_topic"
    },
    {
        "api_method_name": "Update a topic",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics.update",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}",
                "keys": [
                    "course_id",
                    "topic_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}",
                "keys": [
                    "group_id",
                    "topic_id"
                ]
            }
        ],
        "description": [
            "Update an existing discussion topic for the course or group."
        ],
        "request_parameters": [
            {
                "parameter": "title",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "message",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "discussion_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "published",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "delayed_post_at",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "lock_at",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "podcast_enabled",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "podcast_has_student_posts",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "require_initial_post",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment",
                "type": "Assignment",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "is_announcement",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "pinned",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "position_after",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "group_category_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "allow_rating",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "only_graders_can_rate",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sort_by_rating",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "specific_sections",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_a_topic"
    },
    {
        "api_method_name": "Delete a topic",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics.destroy",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}",
                "keys": [
                    "course_id",
                    "topic_id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}",
                "keys": [
                    "group_id",
                    "topic_id"
                ]
            }
        ],
        "description": [
            "Deletes the discussion topic. This will also delete the assignment, if it's an assignment discussion."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_topic"
    },
    {
        "api_method_name": "Reorder pinned topics",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics.reorder",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsController#reorder",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/discussion_topics/reorder",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/discussion_topics/reorder",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Puts the pinned discussion topics in the specified order. All pinned topics should be included."
        ],
        "request_parameters": [
            {
                "parameter": "order[]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "reorder_pinned_topics"
    },
    {
        "api_method_name": "Update an entry",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_entries.update",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionEntriesController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_entries_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{id}",
                "keys": [
                    "course_id",
                    "topic_id",
                    "id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{id}",
                "keys": [
                    "group_id",
                    "topic_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update an existing discussion entry.",
            "The entry must have been created by the current user, or the current user must have admin rights to the discussion. If the edit is not allowed, a 401 will be returned."
        ],
        "request_parameters": [
            {
                "parameter": "message",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_an_entry"
    },
    {
        "api_method_name": "Delete an entry",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_entries.destroy",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionEntriesController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_entries_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{id}",
                "keys": [
                    "course_id",
                    "topic_id",
                    "id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{id}",
                "keys": [
                    "group_id",
                    "topic_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Delete a discussion entry.",
            "The entry must have been created by the current user, or the current user must have admin rights to the discussion. If the delete is not allowed, a 401 will be returned.",
            "The discussion will be marked deleted, and the user_id and message will be cleared out."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_an_entry"
    },
    {
        "api_method_name": "Get a single topic",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.show",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}",
                "keys": [
                    "course_id",
                    "topic_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}",
                "keys": [
                    "group_id",
                    "topic_id"
                ]
            }
        ],
        "description": [
            "Returns data on an individual discussion topic. See the List action for the response formatting."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_a_single_topic"
    },
    {
        "api_method_name": "Get the full topic",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.view",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#view",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/view",
                "keys": [
                    "course_id",
                    "topic_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/view",
                "keys": [
                    "group_id",
                    "topic_id"
                ]
            }
        ],
        "description": [
            "Return a cached structure of the discussion topic, containing all entries, their authors, and their message bodies.",
            "May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body 'require_initial_post'.",
            "In some rare situations, this cached structure may not be available yet. In that case, the server will respond with a 503 error, and the caller should try again soon.",
            "The response is an object containing the following keys:"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_the_full_topic"
    },
    {
        "api_method_name": "Post an entry",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.add_entry",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#add_entry",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/entries",
                "keys": [
                    "course_id",
                    "topic_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/entries",
                "keys": [
                    "group_id",
                    "topic_id"
                ]
            }
        ],
        "description": [
            "Create a new entry in a discussion topic. Returns a json representation of the created entry (see documentation for 'entries' method) on success."
        ],
        "request_parameters": [
            {
                "parameter": "message",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "attachment",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "post_an_entry"
    },
    {
        "api_method_name": "Duplicate discussion topic",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.duplicate",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#duplicate",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/duplicate",
                "keys": [
                    "course_id",
                    "topic_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/duplicate",
                "keys": [
                    "group_id",
                    "topic_id"
                ]
            }
        ],
        "description": [
            "Duplicate a discussion topic according to context (Course/Group)"
        ],
        "request_parameters": null,
        "returns": [
            "a DiscussionTopic"
        ],
        "paginated": false,
        "function_name": "duplicate_discussion_topic"
    },
    {
        "api_method_name": "List topic entries",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.entries",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#entries",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/entries",
                "keys": [
                    "course_id",
                    "topic_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/entries",
                "keys": [
                    "group_id",
                    "topic_id"
                ]
            }
        ],
        "description": [
            "Retrieve the (paginated) top-level entries in a discussion topic.",
            "May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body 'require_initial_post'.",
            "Will include the 10 most recent replies, if any, for each entry returned.",
            "If the topic is a root topic with children corresponding to groups of a group assignment, entries from those subtopics for which the user belongs to the corresponding group will be returned.",
            "Ordering of returned entries is newest-first by posting timestamp (reply activity is ignored)."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_topic_entries"
    },
    {
        "api_method_name": "Post a reply",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.add_reply",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#add_reply",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies",
                "keys": [
                    "course_id",
                    "topic_id",
                    "entry_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies",
                "keys": [
                    "group_id",
                    "topic_id",
                    "entry_id"
                ]
            }
        ],
        "description": [
            "Add a reply to an entry in a discussion topic. Returns a json representation of the created reply (see documentation for 'replies' method) on success.",
            "May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body 'require_initial_post'."
        ],
        "request_parameters": [
            {
                "parameter": "message",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "attachment",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "post_a_reply"
    },
    {
        "api_method_name": "List entry replies",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.replies",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#replies",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies",
                "keys": [
                    "course_id",
                    "topic_id",
                    "entry_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies",
                "keys": [
                    "group_id",
                    "topic_id",
                    "entry_id"
                ]
            }
        ],
        "description": [
            "Retrieve the (paginated) replies to a top-level entry in a discussion topic.",
            "May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body 'require_initial_post'.",
            "Ordering of returned entries is newest-first by creation timestamp."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_entry_replies"
    },
    {
        "api_method_name": "List entries",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.entry_list",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#entry_list",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/entry_list",
                "keys": [
                    "course_id",
                    "topic_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/entry_list",
                "keys": [
                    "group_id",
                    "topic_id"
                ]
            }
        ],
        "description": [
            "Retrieve a paginated list of discussion entries, given a list of ids.",
            "May require (depending on the topic) that the user has posted in the topic. If it is required, and the user has not posted, will respond with a 403 Forbidden status and the body 'require_initial_post'."
        ],
        "request_parameters": [
            {
                "parameter": "ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "list_entries"
    },
    {
        "api_method_name": "Mark topic as read",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.mark_topic_read",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#mark_topic_read",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/read",
                "keys": [
                    "course_id",
                    "topic_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/read",
                "keys": [
                    "group_id",
                    "topic_id"
                ]
            }
        ],
        "description": [
            "Mark the initial text of the discussion topic as read.",
            "No request fields are necessary.",
            "On success, the response will be 204 No Content with an empty body."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "mark_topic_as_read"
    },
    {
        "api_method_name": "Mark topic as unread",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.mark_topic_unread",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#mark_topic_unread",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/read",
                "keys": [
                    "course_id",
                    "topic_id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/read",
                "keys": [
                    "group_id",
                    "topic_id"
                ]
            }
        ],
        "description": [
            "Mark the initial text of the discussion topic as unread.",
            "No request fields are necessary.",
            "On success, the response will be 204 No Content with an empty body."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "mark_topic_as_unread"
    },
    {
        "api_method_name": "Mark all entries as read",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.mark_all_read",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#mark_all_read",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/read_all",
                "keys": [
                    "course_id",
                    "topic_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/read_all",
                "keys": [
                    "group_id",
                    "topic_id"
                ]
            }
        ],
        "description": [
            "Mark the discussion topic and all its entries as read.",
            "No request fields are necessary.",
            "On success, the response will be 204 No Content with an empty body."
        ],
        "request_parameters": [
            {
                "parameter": "forced_read_state",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "mark_all_entries_as_read"
    },
    {
        "api_method_name": "Mark all entries as unread",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.mark_all_unread",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#mark_all_unread",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/read_all",
                "keys": [
                    "course_id",
                    "topic_id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/read_all",
                "keys": [
                    "group_id",
                    "topic_id"
                ]
            }
        ],
        "description": [
            "Mark the discussion topic and all its entries as unread.",
            "No request fields are necessary.",
            "On success, the response will be 204 No Content with an empty body."
        ],
        "request_parameters": [
            {
                "parameter": "forced_read_state",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "mark_all_entries_as_unread"
    },
    {
        "api_method_name": "Mark entry as read",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.mark_entry_read",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#mark_entry_read",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/read",
                "keys": [
                    "course_id",
                    "topic_id",
                    "entry_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/read",
                "keys": [
                    "group_id",
                    "topic_id",
                    "entry_id"
                ]
            }
        ],
        "description": [
            "Mark a discussion entry as read.",
            "No request fields are necessary.",
            "On success, the response will be 204 No Content with an empty body."
        ],
        "request_parameters": [
            {
                "parameter": "forced_read_state",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "mark_entry_as_read"
    },
    {
        "api_method_name": "Mark entry as unread",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.mark_entry_unread",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#mark_entry_unread",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/read",
                "keys": [
                    "course_id",
                    "topic_id",
                    "entry_id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/read",
                "keys": [
                    "group_id",
                    "topic_id",
                    "entry_id"
                ]
            }
        ],
        "description": [
            "Mark a discussion entry as unread.",
            "No request fields are necessary.",
            "On success, the response will be 204 No Content with an empty body."
        ],
        "request_parameters": [
            {
                "parameter": "forced_read_state",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "mark_entry_as_unread"
    },
    {
        "api_method_name": "Rate entry",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.rate_entry",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#rate_entry",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating",
                "keys": [
                    "course_id",
                    "topic_id",
                    "entry_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating",
                "keys": [
                    "group_id",
                    "topic_id",
                    "entry_id"
                ]
            }
        ],
        "description": [
            "Rate a discussion entry.",
            "On success, the response will be 204 No Content with an empty body."
        ],
        "request_parameters": [
            {
                "parameter": "rating",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "rate_entry"
    },
    {
        "api_method_name": "Subscribe to a topic",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.subscribe_topic",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#subscribe_topic",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/subscribed",
                "keys": [
                    "course_id",
                    "topic_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/subscribed",
                "keys": [
                    "group_id",
                    "topic_id"
                ]
            }
        ],
        "description": [
            "Subscribe to a topic to receive notifications about new entries",
            "On success, the response will be 204 No Content with an empty body"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "subscribe_to_a_topic"
    },
    {
        "api_method_name": "Unsubscribe from a topic",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.discussion_topics_api.unsubscribe_topic",
        "subtopic": "Discussion Topics",
        "defined_in": [
            "DiscussionTopicsApiController#unsubscribe_topic",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/discussion_topics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/discussion_topics/{topic_id}/subscribed",
                "keys": [
                    "course_id",
                    "topic_id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/groups/{group_id}/discussion_topics/{topic_id}/subscribed",
                "keys": [
                    "group_id",
                    "topic_id"
                ]
            }
        ],
        "description": [
            "Unsubscribe from a topic to stop receiving notifications about new entries",
            "On success, the response will be 204 No Content with an empty body"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "unsubscribe_from_a_topic"
    },
    {
        "api_method_name": "Create enrollment term",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.terms.create",
        "subtopic": "Enrollment Terms",
        "defined_in": [
            "TermsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/terms_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/terms",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Create a new enrollment term for the specified account."
        ],
        "request_parameters": [
            {
                "parameter": "enrollment_term[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_term[start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_term[end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_term[sis_term_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_term[overrides][enrollment_type][start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_term[overrides][enrollment_type][end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a EnrollmentTerm"
        ],
        "paginated": false,
        "function_name": "create_enrollment_term"
    },
    {
        "api_method_name": "Update enrollment term",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.terms.update",
        "subtopic": "Enrollment Terms",
        "defined_in": [
            "TermsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/terms_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/terms/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update an existing enrollment term for the specified account."
        ],
        "request_parameters": [
            {
                "parameter": "enrollment_term[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_term[start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_term[end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_term[sis_term_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_term[overrides][enrollment_type][start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_term[overrides][enrollment_type][end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a EnrollmentTerm"
        ],
        "paginated": false,
        "function_name": "update_enrollment_term"
    },
    {
        "api_method_name": "Delete enrollment term",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.terms.destroy",
        "subtopic": "Enrollment Terms",
        "defined_in": [
            "TermsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/terms_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/terms/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Delete the specified enrollment term."
        ],
        "request_parameters": null,
        "returns": [
            "a EnrollmentTerm"
        ],
        "paginated": false,
        "function_name": "delete_enrollment_term"
    },
    {
        "api_method_name": "List enrollment terms",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.terms_api.index",
        "subtopic": "Enrollment Terms",
        "defined_in": [
            "TermsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/terms_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/terms",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "An object with a paginated list of all of the terms in the account."
        ],
        "request_parameters": [
            {
                "parameter": "workflow_state[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a EnrollmentTermsList"
        ],
        "paginated": true,
        "function_name": "list_enrollment_terms"
    },
    {
        "api_method_name": "Retrieve enrollment term",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.terms_api.show",
        "subtopic": "Enrollment Terms",
        "defined_in": [
            "TermsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/terms_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/terms/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Retrieves the details for an enrollment term in the account. Includes overrides by default."
        ],
        "request_parameters": null,
        "returns": [
            "a EnrollmentTerm"
        ],
        "paginated": false,
        "function_name": "retrieve_enrollment_term"
    },
    {
        "api_method_name": "List enrollments",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.enrollments_api.index",
        "subtopic": "Enrollments",
        "defined_in": [
            "EnrollmentsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/enrollments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/enrollments",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/sections/{section_id}/enrollments",
                "keys": [
                    "section_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/enrollments",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Depending on the URL given, return a paginated list of either (1) all of the enrollments in a course, (2) all of the enrollments in a section or (3) all of a user's enrollments. This includes student, teacher, TA, and observer enrollments.",
            "If a user has multiple enrollments in a context (e.g. as a teacher and a student or in multiple course sections), each enrollment will be listed separately.",
            "note: Currently, only a root level admin user can return other users' enrollments. A user can, however, return his/her own enrollments."
        ],
        "request_parameters": [
            {
                "parameter": "type[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "role[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "state[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grading_period_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_term_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sis_account_id[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sis_course_id[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sis_section_id[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sis_user_id[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "created_for_sis_id[]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Enrollments"
        ],
        "paginated": true,
        "function_name": "list_enrollments"
    },
    {
        "api_method_name": "Enrollment by ID",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.enrollments_api.show",
        "subtopic": "Enrollments",
        "defined_in": [
            "EnrollmentsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/enrollments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/enrollments/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Get an Enrollment object by Enrollment ID"
        ],
        "request_parameters": [
            {
                "parameter": "id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a Enrollment"
        ],
        "paginated": false,
        "function_name": "enrollment_by_id"
    },
    {
        "api_method_name": "Enroll a user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.enrollments_api.create",
        "subtopic": "Enrollments",
        "defined_in": [
            "EnrollmentsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/enrollments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/enrollments",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/sections/{section_id}/enrollments",
                "keys": [
                    "section_id"
                ]
            }
        ],
        "description": [
            "Create a new user enrollment for a course or section."
        ],
        "request_parameters": [
            {
                "parameter": "enrollment[start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment[end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment[user_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "enrollment[type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "enrollment[role]",
                "type": "Deprecated",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment[role_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment[enrollment_state]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment[course_section_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment[limit_privileges_to_course_section]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment[notify]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment[self_enrollment_code]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment[self_enrolled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment[associated_user_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Enrollment"
        ],
        "paginated": false,
        "function_name": "enroll_a_user"
    },
    {
        "api_method_name": "Conclude, deactivate, or delete an enrollment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.enrollments_api.destroy",
        "subtopic": "Enrollments",
        "defined_in": [
            "EnrollmentsApiController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/enrollments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/enrollments/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Conclude, deactivate, or delete an enrollment. If the task argument isn't given, the enrollment will be concluded."
        ],
        "request_parameters": [
            {
                "parameter": "task",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Enrollment"
        ],
        "paginated": false,
        "function_name": "conclude__deactivate__or_delete_an_enrollment"
    },
    {
        "api_method_name": "Accept Course Invitation",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.enrollments_api.accept",
        "subtopic": "Enrollments",
        "defined_in": [
            "EnrollmentsApiController#accept",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/enrollments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/enrollments/{id}/accept",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "accepts a pending course invitation for the current user"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "accept_course_invitation"
    },
    {
        "api_method_name": "Reject Course Invitation",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.enrollments_api.reject",
        "subtopic": "Enrollments",
        "defined_in": [
            "EnrollmentsApiController#reject",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/enrollments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/enrollments/{id}/reject",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "rejects a pending course invitation for the current user"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "reject_course_invitation"
    },
    {
        "api_method_name": "Re-activate an enrollment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.enrollments_api.reactivate",
        "subtopic": "Enrollments",
        "defined_in": [
            "EnrollmentsApiController#reactivate",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/enrollments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/enrollments/{id}/reactivate",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Activates an inactive enrollment"
        ],
        "request_parameters": null,
        "returns": [
            "a Enrollment"
        ],
        "paginated": false,
        "function_name": "re_activate_an_enrollment"
    },
    {
        "api_method_name": "Adds last attended date to student enrollment in course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.enrollments_api.last_attended",
        "subtopic": "Enrollments",
        "defined_in": [
            "EnrollmentsApiController#last_attended",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/enrollments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/users/{user_id}/last_attended",
                "keys": [
                    "course_id",
                    "user_id"
                ]
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "adds_last_attended_date_to_student_enrollment_in_course"
    },
    {
        "api_method_name": "Create Error Report",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.errors.create",
        "subtopic": "Error Reports",
        "defined_in": [
            "ErrorsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/errors_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/error_reports",
                "keys": []
            }
        ],
        "description": [
            "Create a new error report documenting an experienced problem",
            "Performs the same action as when a user uses the \u201chelp -> report a problem\u201d dialog."
        ],
        "request_parameters": [
            {
                "parameter": "error[subject]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "error[url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "error[email]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "error[comments]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "error[http_env]",
                "type": "SerializedHash",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_error_report"
    },
    {
        "api_method_name": "List external tools",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.external_tools.index",
        "subtopic": "External Tools",
        "defined_in": [
            "ExternalToolsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_tools_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/external_tools",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/external_tools",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/external_tools",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of external tools for the current context. See the get request docs for a single tool for a list of properties on an external tool."
        ],
        "request_parameters": [
            {
                "parameter": "search_term",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "selectable",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include_parents",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "list_external_tools"
    },
    {
        "api_method_name": "Get a sessionless launch url for an external tool.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.external_tools.generate_sessionless_launch",
        "subtopic": "External Tools",
        "defined_in": [
            "ExternalToolsController#generate_sessionless_launch",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_tools_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/external_tools/sessionless_launch",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/external_tools/sessionless_launch",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns a sessionless launch url for an external tool.",
            "NOTE: Either the id or url must be provided unless launch_type is assessment or module_item."
        ],
        "request_parameters": [
            {
                "parameter": "id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "url",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "launch_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_a_sessionless_launch_url_for_an_external_tool_"
    },
    {
        "api_method_name": "Get a single external tool",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.external_tools.show",
        "subtopic": "External Tools",
        "defined_in": [
            "ExternalToolsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_tools_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/external_tools/{external_tool_id}",
                "keys": [
                    "course_id",
                    "external_tool_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/external_tools/{external_tool_id}",
                "keys": [
                    "account_id",
                    "external_tool_id"
                ]
            }
        ],
        "description": [
            "Returns the specified external tool."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_a_single_external_tool"
    },
    {
        "api_method_name": "Create an external tool",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.external_tools.create",
        "subtopic": "External Tools",
        "defined_in": [
            "ExternalToolsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_tools_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/external_tools",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/external_tools",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Create an external tool in the specified course/account. The created tool will be returned, see the \u201cshow\u201d endpoint for an example. If a client ID is supplied canvas will attempt to create a context external tool using the LTI 1.3 standard."
        ],
        "request_parameters": [
            {
                "parameter": "client_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "privacy_level",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "consumer_key",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "shared_secret",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "description",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "url",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "domain",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "icon_url",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "text",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "custom_fields[field_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "is_rce_favorite",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account_navigation[url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account_navigation[enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account_navigation[text]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account_navigation[selection_width]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account_navigation[selection_height]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "account_navigation[display_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user_navigation[url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user_navigation[enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user_navigation[text]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user_navigation[visibility]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_home_sub_navigation[url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_home_sub_navigation[enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_home_sub_navigation[text]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_home_sub_navigation[icon_url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_navigation[enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_navigation[text]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_navigation[visibility]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_navigation[windowTarget]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_navigation[default]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_navigation[display_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "editor_button[url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "editor_button[enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "editor_button[icon_url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "editor_button[selection_width]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "editor_button[selection_height]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "editor_button[message_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "homework_submission[url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "homework_submission[enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "homework_submission[text]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "homework_submission[message_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "link_selection[url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "link_selection[enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "link_selection[text]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "link_selection[message_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "migration_selection[url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "migration_selection[enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "migration_selection[message_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "tool_configuration[url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "tool_configuration[enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "tool_configuration[message_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "tool_configuration[prefer_sis_email]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "resource_selection[url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "resource_selection[enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "resource_selection[icon_url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "resource_selection[selection_width]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "resource_selection[selection_height]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "config_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "config_xml",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "config_url",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "not_selectable",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "oauth_compliant",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_an_external_tool"
    },
    {
        "api_method_name": "Edit an external tool",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.external_tools.update",
        "subtopic": "External Tools",
        "defined_in": [
            "ExternalToolsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_tools_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/external_tools/{external_tool_id}",
                "keys": [
                    "course_id",
                    "external_tool_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/external_tools/{external_tool_id}",
                "keys": [
                    "account_id",
                    "external_tool_id"
                ]
            }
        ],
        "description": [
            "Update the specified external tool. Uses same parameters as create"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "edit_an_external_tool"
    },
    {
        "api_method_name": "Delete an external tool",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.external_tools.destroy",
        "subtopic": "External Tools",
        "defined_in": [
            "ExternalToolsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_tools_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/external_tools/{external_tool_id}",
                "keys": [
                    "course_id",
                    "external_tool_id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/external_tools/{external_tool_id}",
                "keys": [
                    "account_id",
                    "external_tool_id"
                ]
            }
        ],
        "description": [
            "Remove the specified external tool"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_an_external_tool"
    },
    {
        "api_method_name": "Add tool to RCE Favorites",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.external_tools.add_rce_favorite",
        "subtopic": "External Tools",
        "defined_in": [
            "ExternalToolsController#add_rce_favorite",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_tools_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/external_tools/rce_favorites/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Add the specified editor_button external tool to a preferred location in the RCE for courses in the given account and its subaccounts (if the subaccounts haven't set their own RCE Favorites). Cannot set more than 2 RCE Favorites."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "add_tool_to_rce_favorites"
    },
    {
        "api_method_name": "Remove tool from RCE Favorites",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.external_tools.remove_rce_favorite",
        "subtopic": "External Tools",
        "defined_in": [
            "ExternalToolsController#remove_rce_favorite",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_tools_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/external_tools/rce_favorites/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Remove the specified external tool from a preferred location in the RCE for the given account"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "remove_tool_from_rce_favorites"
    },
    {
        "api_method_name": "Get visible course navigation tools",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.external_tools.all_visible_nav_tools",
        "subtopic": "External Tools",
        "defined_in": [
            "ExternalToolsController#all_visible_nav_tools",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_tools_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/external_tools/visible_course_nav_tools",
                "keys": []
            }
        ],
        "description": [
            "Get a list of external tools with the course_navigation placement that have not been hidden in course settings and whose visibility settings apply to the requesting user. These tools are the same that appear in the course navigation.",
            "The response format is the same as for List external tools, but with additional context_id and context_name fields on each element in the array."
        ],
        "request_parameters": [
            {
                "parameter": "context_codes[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_visible_course_navigation_tools"
    },
    {
        "api_method_name": "Get visible course navigation tools for a single course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.external_tools.visible_course_nav_tools",
        "subtopic": "External Tools",
        "defined_in": [
            "ExternalToolsController#visible_course_nav_tools",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/external_tools_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/external_tools/visible_course_nav_tools",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Get a list of external tools with the course_navigation placement that have not been hidden in course settings and whose visibility settings apply to the requesting user. These tools are the same that appear in the course navigation.",
            "The response format is the same as Get visible course navigation tools."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_visible_course_navigation_tools_for_a_single_course"
    },
    {
        "api_method_name": "List favorite courses",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.favorites.list_favorite_courses",
        "subtopic": "Favorites",
        "defined_in": [
            "FavoritesController#list_favorite_courses",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/favorites_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/self/favorites/courses",
                "keys": []
            }
        ],
        "description": [
            "Retrieve the paginated list of favorite courses for the current user. If the user has not chosen any favorites, then a selection of currently enrolled courses will be returned.",
            "See the List courses API for details on accepted include[] parameters."
        ],
        "request_parameters": [
            {
                "parameter": "exclude_blueprint_courses",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Courses"
        ],
        "paginated": true,
        "function_name": "list_favorite_courses"
    },
    {
        "api_method_name": "List favorite groups",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.favorites.list_favorite_groups",
        "subtopic": "Favorites",
        "defined_in": [
            "FavoritesController#list_favorite_groups",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/favorites_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/self/favorites/groups",
                "keys": []
            }
        ],
        "description": [
            "Retrieve the paginated list of favorite groups for the current user. If the user has not chosen any favorites, then a selection of groups that the user is a member of will be returned."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Groups"
        ],
        "paginated": true,
        "function_name": "list_favorite_groups"
    },
    {
        "api_method_name": "Add course to favorites",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.favorites.add_favorite_course",
        "subtopic": "Favorites",
        "defined_in": [
            "FavoritesController#add_favorite_course",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/favorites_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/users/self/favorites/courses/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Add a course to the current user's favorites.  If the course is already in the user's favorites, nothing happens."
        ],
        "request_parameters": [
            {
                "parameter": "id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a Favorite"
        ],
        "paginated": false,
        "function_name": "add_course_to_favorites"
    },
    {
        "api_method_name": "Add group to favorites",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.favorites.add_favorite_groups",
        "subtopic": "Favorites",
        "defined_in": [
            "FavoritesController#add_favorite_groups",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/favorites_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/users/self/favorites/groups/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Add a group to the current user's favorites.  If the group is already in the user's favorites, nothing happens."
        ],
        "request_parameters": [
            {
                "parameter": "id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a Favorite"
        ],
        "paginated": false,
        "function_name": "add_group_to_favorites"
    },
    {
        "api_method_name": "Remove course from favorites",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.favorites.remove_favorite_course",
        "subtopic": "Favorites",
        "defined_in": [
            "FavoritesController#remove_favorite_course",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/favorites_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/self/favorites/courses/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Remove a course from the current user's favorites."
        ],
        "request_parameters": [
            {
                "parameter": "id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a Favorite"
        ],
        "paginated": false,
        "function_name": "remove_course_from_favorites"
    },
    {
        "api_method_name": "Remove group from favorites",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.favorites.remove_favorite_groups",
        "subtopic": "Favorites",
        "defined_in": [
            "FavoritesController#remove_favorite_groups",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/favorites_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/self/favorites/groups/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Remove a group from the current user's favorites."
        ],
        "request_parameters": [
            {
                "parameter": "id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a Favorite"
        ],
        "paginated": false,
        "function_name": "remove_group_from_favorites"
    },
    {
        "api_method_name": "Reset course favorites",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.favorites.reset_course_favorites",
        "subtopic": "Favorites",
        "defined_in": [
            "FavoritesController#reset_course_favorites",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/favorites_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/self/favorites/courses",
                "keys": []
            }
        ],
        "description": [
            "Reset the current user's course favorites to the default automatically generated list of enrolled courses"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "reset_course_favorites"
    },
    {
        "api_method_name": "Reset group favorites",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.favorites.reset_groups_favorites",
        "subtopic": "Favorites",
        "defined_in": [
            "FavoritesController#reset_groups_favorites",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/favorites_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/self/favorites/groups",
                "keys": []
            }
        ],
        "description": [
            "Reset the current user's group favorites to the default automatically generated list of enrolled group"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "reset_group_favorites"
    },
    {
        "api_method_name": "List features",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.feature_flags.index",
        "subtopic": "Feature Flags",
        "defined_in": [
            "FeatureFlagsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/feature_flags_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/features",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/features",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/features",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "A paginated list of all features that apply to a given Account, Course, or User."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Features"
        ],
        "paginated": true,
        "function_name": "list_features"
    },
    {
        "api_method_name": "List enabled features",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.feature_flags.enabled_features",
        "subtopic": "Feature Flags",
        "defined_in": [
            "FeatureFlagsController#enabled_features",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/feature_flags_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/features/enabled",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/features/enabled",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/features/enabled",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "A paginated list of all features that are enabled on a given Account, Course, or User. Only the feature names are returned."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_enabled_features"
    },
    {
        "api_method_name": "List environment features",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.feature_flags.environment",
        "subtopic": "Feature Flags",
        "defined_in": [
            "FeatureFlagsController#environment",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/feature_flags_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/features/environment",
                "keys": []
            }
        ],
        "description": [
            "Return a hash of global feature settings that pertain to the Canvas user interface. This is the same information supplied to the web interface as ENV.FEATURES."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "list_environment_features"
    },
    {
        "api_method_name": "Get feature flag",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.feature_flags.show",
        "subtopic": "Feature Flags",
        "defined_in": [
            "FeatureFlagsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/feature_flags_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/features/flags/{feature}",
                "keys": [
                    "course_id",
                    "feature"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/features/flags/{feature}",
                "keys": [
                    "account_id",
                    "feature"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/features/flags/{feature}",
                "keys": [
                    "user_id",
                    "feature"
                ]
            }
        ],
        "description": [
            "Get the feature flag that applies to a given Account, Course, or User. The flag may be defined on the object, or it may be inherited from a parent account. You can look at the context_id and context_type of the returned object to determine which is the case. If these fields are missing, then the object is the global Canvas default."
        ],
        "request_parameters": null,
        "returns": [
            "a FeatureFlag"
        ],
        "paginated": false,
        "function_name": "get_feature_flag"
    },
    {
        "api_method_name": "Set feature flag",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.feature_flags.update",
        "subtopic": "Feature Flags",
        "defined_in": [
            "FeatureFlagsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/feature_flags_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/features/flags/{feature}",
                "keys": [
                    "course_id",
                    "feature"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/features/flags/{feature}",
                "keys": [
                    "account_id",
                    "feature"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/users/{user_id}/features/flags/{feature}",
                "keys": [
                    "user_id",
                    "feature"
                ]
            }
        ],
        "description": [
            "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets a feature flag for the same feature in any state other than \u201callowed\u201d."
        ],
        "request_parameters": [
            {
                "parameter": "state",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a FeatureFlag"
        ],
        "paginated": false,
        "function_name": "set_feature_flag"
    },
    {
        "api_method_name": "Remove feature flag",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.feature_flags.delete",
        "subtopic": "Feature Flags",
        "defined_in": [
            "FeatureFlagsController#delete",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/feature_flags_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/features/flags/{feature}",
                "keys": [
                    "course_id",
                    "feature"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/features/flags/{feature}",
                "keys": [
                    "account_id",
                    "feature"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/users/{user_id}/features/flags/{feature}",
                "keys": [
                    "user_id",
                    "feature"
                ]
            }
        ],
        "description": [
            "Remove feature flag for a given Account, Course, or User.  (Note that the flag must be defined on the Account, Course, or User directly.)  The object will then inherit the feature flags from a higher account, if any exist.  If this flag was 'on' or 'off', then lower-level account flags that were masked by this one will apply again."
        ],
        "request_parameters": null,
        "returns": [
            "a FeatureFlag"
        ],
        "paginated": false,
        "function_name": "remove_feature_flag"
    },
    {
        "api_method_name": "Get quota information",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.files.api_quota",
        "subtopic": "Files",
        "defined_in": [
            "FilesController#api_quota",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/files_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/files/quota",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/files/quota",
                "keys": [
                    "group_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/files/quota",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Returns the total and used storage quota for the course, group, or user."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_quota_information"
    },
    {
        "api_method_name": "List files",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.files.api_index",
        "subtopic": "Files",
        "defined_in": [
            "FilesController#api_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/files_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/files",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/files",
                "keys": [
                    "user_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/files",
                "keys": [
                    "group_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/folders/{id}/files",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of files for the folder or course."
        ],
        "request_parameters": [
            {
                "parameter": "content_types[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "exclude_content_types[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "search_term",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "only[]",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sort",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "order",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Files"
        ],
        "paginated": true,
        "function_name": "list_files"
    },
    {
        "api_method_name": "Get public inline preview url",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.files.public_url",
        "subtopic": "Files",
        "defined_in": [
            "FilesController#public_url",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/files_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/files/{id}/public_url",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Determine the URL that should be used for inline preview of the file."
        ],
        "request_parameters": [
            {
                "parameter": "submission_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_public_inline_preview_url"
    },
    {
        "api_method_name": "Get file",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.files.api_show",
        "subtopic": "Files",
        "defined_in": [
            "FilesController#api_show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/files_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/files/{id}",
                "keys": [
                    "id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/files/{id}",
                "keys": [
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/files/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/files/{id}",
                "keys": [
                    "group_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/files/{id}",
                "keys": [
                    "user_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the standard attachment json object"
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a File"
        ],
        "paginated": false,
        "function_name": "get_file"
    },
    {
        "api_method_name": "Update file",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.files.api_update",
        "subtopic": "Files",
        "defined_in": [
            "FilesController#api_update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/files_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/files/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Update some settings on the specified file"
        ],
        "request_parameters": [
            {
                "parameter": "name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "parent_folder_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "on_duplicate",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "lock_at",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "unlock_at",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "locked",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "hidden",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a File"
        ],
        "paginated": false,
        "function_name": "update_file"
    },
    {
        "api_method_name": "Delete file",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.files.destroy",
        "subtopic": "Files",
        "defined_in": [
            "FilesController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/files_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/files/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Remove the specified file. Unlike most other DELETE endpoints, using this endpoint will result in comprehensive, irretrievable destruction of the file. It should be used with the `replace` parameter set to true in cases where the file preview also needs to be destroyed (such as to remove files that violate privacy laws)."
        ],
        "request_parameters": [
            {
                "parameter": "replace",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a File"
        ],
        "paginated": false,
        "function_name": "delete_file"
    },
    {
        "api_method_name": "Reset link verifier",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.files.reset_verifier",
        "subtopic": "Files",
        "defined_in": [
            "FilesController#reset_verifier",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/files_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/files/{id}/reset_verifier",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Resets the link verifier. Any existing links to the file using the previous hard-coded \u201cverifier\u201d parameter will no longer automatically grant access.",
            "Must have manage files and become other users permissions"
        ],
        "request_parameters": null,
        "returns": [
            "a File"
        ],
        "paginated": false,
        "function_name": "reset_link_verifier"
    },
    {
        "api_method_name": "List folders",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.folders.api_index",
        "subtopic": "Folders",
        "defined_in": [
            "FoldersController#api_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/folders_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/folders/{id}/folders",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of folders in the folder."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Folders"
        ],
        "paginated": true,
        "function_name": "list_folders"
    },
    {
        "api_method_name": "List all folders",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.folders.list_all_folders",
        "subtopic": "Folders",
        "defined_in": [
            "FoldersController#list_all_folders",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/folders_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/folders",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/folders",
                "keys": [
                    "user_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/folders",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of all folders for the given context. This will be returned as a flat list containing all subfolders as well."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Folders"
        ],
        "paginated": true,
        "function_name": "list_all_folders"
    },
    {
        "api_method_name": "Resolve path",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.folders.resolve_path",
        "subtopic": "Folders",
        "defined_in": [
            "FoldersController#resolve_path",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/folders_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/folders/by_path/*full_path",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/folders/by_path",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/folders/by_path/*full_path",
                "keys": [
                    "user_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/folders/by_path",
                "keys": [
                    "user_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/folders/by_path/*full_path",
                "keys": [
                    "group_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/folders/by_path",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Given the full path to a folder, returns a list of all Folders in the path hierarchy, starting at the root folder, and ending at the requested folder. The given path is relative to the context's root folder and does not include the root folder's name (e.g., \u201ccourse files\u201d). If an empty path is given, the context's root folder alone is returned. Otherwise, if no folder exists with the given full path, a Not Found error is returned."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Folders"
        ],
        "paginated": false,
        "function_name": "resolve_path"
    },
    {
        "api_method_name": "Get folder",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.folders.show",
        "subtopic": "Folders",
        "defined_in": [
            "FoldersController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/folders_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/folders/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/folders/{id}",
                "keys": [
                    "user_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/folders/{id}",
                "keys": [
                    "group_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/folders/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the details for a folder",
            "You can get the root folder from a context by using 'root' as the :id. For example, you could get the root folder for a course like:"
        ],
        "request_parameters": null,
        "returns": [
            "a Folder"
        ],
        "paginated": false,
        "function_name": "get_folder"
    },
    {
        "api_method_name": "Update folder",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.folders.update",
        "subtopic": "Folders",
        "defined_in": [
            "FoldersController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/folders_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/folders/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Updates a folder"
        ],
        "request_parameters": [
            {
                "parameter": "name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "parent_folder_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "lock_at",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "unlock_at",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "locked",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "hidden",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "position",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Folder"
        ],
        "paginated": false,
        "function_name": "update_folder"
    },
    {
        "api_method_name": "Create folder",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.folders.create",
        "subtopic": "Folders",
        "defined_in": [
            "FoldersController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/folders_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/folders",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/users/{user_id}/folders",
                "keys": [
                    "user_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/folders",
                "keys": [
                    "group_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/folders/{folder_id}/folders",
                "keys": [
                    "folder_id"
                ]
            }
        ],
        "description": [
            "Creates a folder in the specified context"
        ],
        "request_parameters": [
            {
                "parameter": "name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "parent_folder_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "parent_folder_path",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "lock_at",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "unlock_at",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "locked",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "hidden",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "position",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Folder"
        ],
        "paginated": false,
        "function_name": "create_folder"
    },
    {
        "api_method_name": "Delete folder",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.folders.api_destroy",
        "subtopic": "Folders",
        "defined_in": [
            "FoldersController#api_destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/folders_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/folders/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Remove the specified folder. You can only delete empty folders unless you set the 'force' flag"
        ],
        "request_parameters": [
            {
                "parameter": "force",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "delete_folder"
    },
    {
        "api_method_name": "Upload a file",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.folders.create_file",
        "subtopic": "Folders",
        "defined_in": [
            "FoldersController#create_file",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/folders_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/folders/{folder_id}/files",
                "keys": [
                    "folder_id"
                ]
            }
        ],
        "description": [
            "Upload a file to a folder.",
            "This API endpoint is the first step in uploading a file. See the File Upload Documentation for details on the file upload workflow.",
            "Only those with the \u201cManage Files\u201d permission on a course or group can upload files to a folder in that course or group."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "upload_a_file"
    },
    {
        "api_method_name": "Copy a file",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.folders.copy_file",
        "subtopic": "Folders",
        "defined_in": [
            "FoldersController#copy_file",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/folders_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/folders/{dest_folder_id}/copy_file",
                "keys": [
                    "dest_folder_id"
                ]
            }
        ],
        "description": [
            "Copy a file from elsewhere in Canvas into a folder.",
            "Copying a file across contexts (between courses and users) is permitted, but the source and destination must belong to the same institution."
        ],
        "request_parameters": [
            {
                "parameter": "source_file_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "on_duplicate",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a File"
        ],
        "paginated": false,
        "function_name": "copy_a_file"
    },
    {
        "api_method_name": "Copy a folder",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.folders.copy_folder",
        "subtopic": "Folders",
        "defined_in": [
            "FoldersController#copy_folder",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/folders_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/folders/{dest_folder_id}/copy_folder",
                "keys": [
                    "dest_folder_id"
                ]
            }
        ],
        "description": [
            "Copy a folder (and its contents) from elsewhere in Canvas into a folder.",
            "Copying a folder across contexts (between courses and users) is permitted, but the source and destination must belong to the same institution. If the source and destination folders are in the same context, the source folder may not contain the destination folder. A folder will be renamed at its destination if another folder with the same name already exists."
        ],
        "request_parameters": [
            {
                "parameter": "source_folder_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a Folder"
        ],
        "paginated": false,
        "function_name": "copy_a_folder"
    },
    {
        "api_method_name": "Get uploaded media folder for user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.folders.media_folder",
        "subtopic": "Folders",
        "defined_in": [
            "FoldersController#media_folder",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/folders_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/folders/media",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/folders/media",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Returns the details for a designated upload folder that the user has rights to upload to, and creates it if it doesn't exist.",
            "If the current user does not have the permissions to manage files in the course or group, the folder will belong to the current user directly."
        ],
        "request_parameters": null,
        "returns": [
            "a Folder"
        ],
        "paginated": false,
        "function_name": "get_uploaded_media_folder_for_user"
    },
    {
        "api_method_name": "Set usage rights",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.usage_rights.set_usage_rights",
        "subtopic": "Usage Rights",
        "defined_in": [
            "UsageRightsController#set_usage_rights",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/usage_rights_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/usage_rights",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/groups/{group_id}/usage_rights",
                "keys": [
                    "group_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/users/{user_id}/usage_rights",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Sets copyright and license information for one or more files"
        ],
        "request_parameters": [
            {
                "parameter": "file_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "folder_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "publish",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "usage_rights[use_justification]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "usage_rights[legal_copyright]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "usage_rights[license]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a UsageRights"
        ],
        "paginated": false,
        "function_name": "set_usage_rights"
    },
    {
        "api_method_name": "Remove usage rights",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.usage_rights.remove_usage_rights",
        "subtopic": "Usage Rights",
        "defined_in": [
            "UsageRightsController#remove_usage_rights",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/usage_rights_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/usage_rights",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/groups/{group_id}/usage_rights",
                "keys": [
                    "group_id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/users/{user_id}/usage_rights",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Removes copyright and license information associated with one or more files"
        ],
        "request_parameters": [
            {
                "parameter": "file_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "folder_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "remove_usage_rights"
    },
    {
        "api_method_name": "List licenses",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.usage_rights.licenses",
        "subtopic": "Usage Rights",
        "defined_in": [
            "UsageRightsController#licenses",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/usage_rights_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/content_licenses",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/content_licenses",
                "keys": [
                    "group_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/content_licenses",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "A paginated list of licenses that can be applied"
        ],
        "request_parameters": null,
        "returns": [
            "a list of Licenses"
        ],
        "paginated": true,
        "function_name": "list_licenses"
    },
    {
        "api_method_name": "Query by assignment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.grade_change_audit_api.for_assignment",
        "subtopic": "Grade Change Log",
        "defined_in": [
            "GradeChangeAuditApiController#for_assignment",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/grade_change_audit_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/audit/grade_change/assignments/{assignment_id}",
                "keys": [
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "List grade change events for a given assignment."
        ],
        "request_parameters": [
            {
                "parameter": "start_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of GradeChangeEvents"
        ],
        "paginated": false,
        "function_name": "query_by_assignment"
    },
    {
        "api_method_name": "Query by course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.grade_change_audit_api.for_course",
        "subtopic": "Grade Change Log",
        "defined_in": [
            "GradeChangeAuditApiController#for_course",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/grade_change_audit_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/audit/grade_change/courses/{course_id}",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "List grade change events for a given course."
        ],
        "request_parameters": [
            {
                "parameter": "start_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of GradeChangeEvents"
        ],
        "paginated": false,
        "function_name": "query_by_course"
    },
    {
        "api_method_name": "Query by student",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.grade_change_audit_api.for_student",
        "subtopic": "Grade Change Log",
        "defined_in": [
            "GradeChangeAuditApiController#for_student",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/grade_change_audit_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/audit/grade_change/students/{student_id}",
                "keys": [
                    "student_id"
                ]
            }
        ],
        "description": [
            "List grade change events for a given student."
        ],
        "request_parameters": [
            {
                "parameter": "start_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of GradeChangeEvents"
        ],
        "paginated": false,
        "function_name": "query_by_student"
    },
    {
        "api_method_name": "Query by grader",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.grade_change_audit_api.for_grader",
        "subtopic": "Grade Change Log",
        "defined_in": [
            "GradeChangeAuditApiController#for_grader",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/grade_change_audit_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/audit/grade_change/graders/{grader_id}",
                "keys": [
                    "grader_id"
                ]
            }
        ],
        "description": [
            "List grade change events for a given grader."
        ],
        "request_parameters": [
            {
                "parameter": "start_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of GradeChangeEvents"
        ],
        "paginated": false,
        "function_name": "query_by_grader"
    },
    {
        "api_method_name": "Advanced query",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.grade_change_audit_api.query",
        "subtopic": "Grade Change Log",
        "defined_in": [
            "GradeChangeAuditApiController#query",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/grade_change_audit_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/audit/grade_change",
                "keys": []
            }
        ],
        "description": [
            "List grade change events satisfying all given parameters. Teachers may query for events in courses they teach. Queries without course_id require account administrator rights.",
            "At least one of course_id, assignment_id, student_id, or grader_id must be specified."
        ],
        "request_parameters": [
            {
                "parameter": "course_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "student_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grader_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "start_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of GradeChangeEvents"
        ],
        "paginated": false,
        "function_name": "advanced_query"
    },
    {
        "api_method_name": "Days in gradebook history for this course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.gradebook_history_api.days",
        "subtopic": "Gradebook History",
        "defined_in": [
            "GradebookHistoryApiController#days",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/gradebook_history_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/gradebook_history/days",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns a map of dates to grader/assignment groups"
        ],
        "request_parameters": [
            {
                "parameter": "course_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Days"
        ],
        "paginated": false,
        "function_name": "days_in_gradebook_history_for_this_course"
    },
    {
        "api_method_name": "Details for a given date in gradebook history for this course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.gradebook_history_api.day_details",
        "subtopic": "Gradebook History",
        "defined_in": [
            "GradebookHistoryApiController#day_details",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/gradebook_history_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/gradebook_history/{date}",
                "keys": [
                    "course_id",
                    "date"
                ]
            }
        ],
        "description": [
            "Returns the graders who worked on this day, along with the assignments they worked on. More details can be obtained by selecting a grader and assignment and calling the 'submissions' api endpoint for a given date."
        ],
        "request_parameters": [
            {
                "parameter": "course_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "date",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Graders"
        ],
        "paginated": false,
        "function_name": "details_for_a_given_date_in_gradebook_history_for_this_course"
    },
    {
        "api_method_name": "Lists submissions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.gradebook_history_api.submissions",
        "subtopic": "Gradebook History",
        "defined_in": [
            "GradebookHistoryApiController#submissions",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/gradebook_history_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/gradebook_history/{date}/graders/{grader_id}/assignments/{assignment_id}/submissions",
                "keys": [
                    "course_id",
                    "date",
                    "grader_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Gives a nested list of submission versions"
        ],
        "request_parameters": [
            {
                "parameter": "course_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "date",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "grader_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "assignment_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of SubmissionHistories"
        ],
        "paginated": false,
        "function_name": "lists_submissions"
    },
    {
        "api_method_name": "List uncollated submission versions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.gradebook_history_api.feed",
        "subtopic": "Gradebook History",
        "defined_in": [
            "GradebookHistoryApiController#feed",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/gradebook_history_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/gradebook_history/feed",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Gives a paginated, uncollated list of submission versions for all matching submissions in the context. This SubmissionVersion objects will not include the new_grade or previous_grade keys, only the grade; same for graded_at and grader."
        ],
        "request_parameters": [
            {
                "parameter": "course_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "assignment_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "ascending",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of SubmissionVersions"
        ],
        "paginated": true,
        "function_name": "list_uncollated_submission_versions"
    },
    {
        "api_method_name": "List grading periods",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.grading_periods.index",
        "subtopic": "Grading Periods",
        "defined_in": [
            "GradingPeriodsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/grading_periods_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/grading_periods",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/grading_periods",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of grading periods for the current course."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_grading_periods"
    },
    {
        "api_method_name": "Get a single grading period",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.grading_periods.show",
        "subtopic": "Grading Periods",
        "defined_in": [
            "GradingPeriodsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/grading_periods_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/grading_periods/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the grading period with the given id"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_a_single_grading_period"
    },
    {
        "api_method_name": "Update a single grading period",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.grading_periods.update",
        "subtopic": "Grading Periods",
        "defined_in": [
            "GradingPeriodsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/grading_periods_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/grading_periods/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update an existing grading period."
        ],
        "request_parameters": [
            {
                "parameter": "grading_periods[][start_date]",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "grading_periods[][end_date]",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "grading_periods[][weight]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_a_single_grading_period"
    },
    {
        "api_method_name": "Delete a grading period",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.grading_periods.destroy",
        "subtopic": "Grading Periods",
        "defined_in": [
            "GradingPeriodsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/grading_periods_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/grading_periods/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/grading_periods/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "204 No Content response code is returned if the deletion was successful."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_grading_period"
    },
    {
        "api_method_name": "Create a new grading standard",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.grading_standards_api.create",
        "subtopic": "Grading Standards",
        "defined_in": [
            "GradingStandardsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/grading_standards_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/grading_standards",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/grading_standards",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Create a new grading standard",
            "If grading_scheme_entry arguments are omitted, then a default grading scheme will be set. The default scheme is as follows:"
        ],
        "request_parameters": [
            {
                "parameter": "title",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "grading_scheme_entry[][name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "grading_scheme_entry[][value]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a GradingStandard"
        ],
        "paginated": false,
        "function_name": "create_a_new_grading_standard"
    },
    {
        "api_method_name": "List the grading standards available in a context.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.grading_standards_api.context_index",
        "subtopic": "Grading Standards",
        "defined_in": [
            "GradingStandardsApiController#context_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/grading_standards_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/grading_standards",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/grading_standards",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of grading standards for the given context that are visible to the user."
        ],
        "request_parameters": null,
        "returns": [
            "a list of GradingStandards"
        ],
        "paginated": true,
        "function_name": "list_the_grading_standards_available_in_a_context_"
    },
    {
        "api_method_name": "Get a single grading standard in a context.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.grading_standards_api.context_show",
        "subtopic": "Grading Standards",
        "defined_in": [
            "GradingStandardsApiController#context_show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/grading_standards_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/grading_standards/{grading_standard_id}",
                "keys": [
                    "course_id",
                    "grading_standard_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/grading_standards/{grading_standard_id}",
                "keys": [
                    "account_id",
                    "grading_standard_id"
                ]
            }
        ],
        "description": [
            "Returns a grading standard for the given context that is visible to the user."
        ],
        "request_parameters": null,
        "returns": [
            "a GradingStandard"
        ],
        "paginated": false,
        "function_name": "get_a_single_grading_standard_in_a_context_"
    },
    {
        "api_method_name": "List group categories for a context",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_categories.index",
        "subtopic": "Group Categories",
        "defined_in": [
            "GroupCategoriesController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_categories_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/group_categories",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/group_categories",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns a paginated list of group categories in a context"
        ],
        "request_parameters": null,
        "returns": [
            "a list of GroupCategories"
        ],
        "paginated": true,
        "function_name": "list_group_categories_for_a_context"
    },
    {
        "api_method_name": "Get a single group category",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_categories.show",
        "subtopic": "Group Categories",
        "defined_in": [
            "GroupCategoriesController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_categories_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/group_categories/{group_category_id}",
                "keys": [
                    "group_category_id"
                ]
            }
        ],
        "description": [
            "Returns the data for a single group category, or a 401 if the caller doesn't have the rights to see it."
        ],
        "request_parameters": null,
        "returns": [
            "a GroupCategory"
        ],
        "paginated": false,
        "function_name": "get_a_single_group_category"
    },
    {
        "api_method_name": "Create a Group Category",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_categories.create",
        "subtopic": "Group Categories",
        "defined_in": [
            "GroupCategoriesController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_categories_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/group_categories",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/group_categories",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Create a new group category"
        ],
        "request_parameters": [
            {
                "parameter": "name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "self_signup",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "auto_leader",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "group_limit",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sis_group_category_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "create_group_count",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "split_group_count",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a GroupCategory"
        ],
        "paginated": false,
        "function_name": "create_a_group_category"
    },
    {
        "api_method_name": "Import category groups",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_categories.import",
        "subtopic": "Group Categories",
        "defined_in": [
            "GroupCategoriesController#import",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_categories_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/group_categories/{group_category_id}/import",
                "keys": [
                    "group_category_id"
                ]
            }
        ],
        "description": [
            "Create Groups in a Group Category through a CSV import",
            "For more information on the format that's expected here, please see the \u201cGroup Category CSV\u201d section in the API docs."
        ],
        "request_parameters": [
            {
                "parameter": "attachment",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Progress"
        ],
        "paginated": false,
        "function_name": "import_category_groups"
    },
    {
        "api_method_name": "Update a Group Category",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_categories.update",
        "subtopic": "Group Categories",
        "defined_in": [
            "GroupCategoriesController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_categories_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/group_categories/{group_category_id}",
                "keys": [
                    "group_category_id"
                ]
            }
        ],
        "description": [
            "Modifies an existing group category."
        ],
        "request_parameters": [
            {
                "parameter": "name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "self_signup",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "auto_leader",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "group_limit",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sis_group_category_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "create_group_count",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "split_group_count",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a GroupCategory"
        ],
        "paginated": false,
        "function_name": "update_a_group_category"
    },
    {
        "api_method_name": "Delete a Group Category",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_categories.destroy",
        "subtopic": "Group Categories",
        "defined_in": [
            "GroupCategoriesController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_categories_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/group_categories/{group_category_id}",
                "keys": [
                    "group_category_id"
                ]
            }
        ],
        "description": [
            "Deletes a group category and all groups under it. Protected group categories can not be deleted, i.e. \u201ccommunities\u201d and \u201cstudent_organized\u201d."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_group_category"
    },
    {
        "api_method_name": "List groups in group category",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_categories.groups",
        "subtopic": "Group Categories",
        "defined_in": [
            "GroupCategoriesController#groups",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_categories_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/group_categories/{group_category_id}/groups",
                "keys": [
                    "group_category_id"
                ]
            }
        ],
        "description": [
            "Returns a paginated list of groups in a group category"
        ],
        "request_parameters": null,
        "returns": [
            "a list of Groups"
        ],
        "paginated": true,
        "function_name": "list_groups_in_group_category"
    },
    {
        "api_method_name": "export groups in and users in category",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_categories.export",
        "subtopic": "Group Categories",
        "defined_in": [
            "GroupCategoriesController#export",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_categories_controller.rb"
        ],
        "beta": "BETA: This API endpoint is not finalized, and there could be breaking changes before its final release.",
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/group_categories/{group_category_id}/export",
                "keys": [
                    "group_category_id"
                ]
            }
        ],
        "description": [
            "Returns a csv file of users in format ready to import."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "export_groups_in_and_users_in_category"
    },
    {
        "api_method_name": "List users in group category",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_categories.users",
        "subtopic": "Group Categories",
        "defined_in": [
            "GroupCategoriesController#users",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_categories_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/group_categories/{group_category_id}/users",
                "keys": [
                    "group_category_id"
                ]
            }
        ],
        "description": [
            "Returns a paginated list of users in the group category."
        ],
        "request_parameters": [
            {
                "parameter": "search_term",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "unassigned",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Users"
        ],
        "paginated": true,
        "function_name": "list_users_in_group_category"
    },
    {
        "api_method_name": "Assign unassigned members",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_categories.assign_unassigned_members",
        "subtopic": "Group Categories",
        "defined_in": [
            "GroupCategoriesController#assign_unassigned_members",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_categories_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/group_categories/{group_category_id}/assign_unassigned_members",
                "keys": [
                    "group_category_id"
                ]
            }
        ],
        "description": [
            "Assign all unassigned members as evenly as possible among the existing student groups."
        ],
        "request_parameters": [
            {
                "parameter": "sync",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "assign_unassigned_members"
    },
    {
        "api_method_name": "List your groups",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.groups.index",
        "subtopic": "Groups",
        "defined_in": [
            "GroupsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/self/groups",
                "keys": []
            }
        ],
        "description": [
            "Returns a paginated list of active groups for the current user."
        ],
        "request_parameters": [
            {
                "parameter": "context_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Groups"
        ],
        "paginated": true,
        "function_name": "list_your_groups"
    },
    {
        "api_method_name": "List the groups available in a context.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.groups.context_index",
        "subtopic": "Groups",
        "defined_in": [
            "GroupsController#context_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/groups",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/groups",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of active groups in the given context that are visible to user."
        ],
        "request_parameters": [
            {
                "parameter": "only_own_groups",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Groups"
        ],
        "paginated": true,
        "function_name": "list_the_groups_available_in_a_context_"
    },
    {
        "api_method_name": "Get a single group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.groups.show",
        "subtopic": "Groups",
        "defined_in": [
            "GroupsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Returns the data for a single group, or a 401 if the caller doesn't have the rights to see it."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Group"
        ],
        "paginated": false,
        "function_name": "get_a_single_group"
    },
    {
        "api_method_name": "Create a group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.groups.create",
        "subtopic": "Groups",
        "defined_in": [
            "GroupsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/groups",
                "keys": []
            },
            {
                "method": "POST",
                "url": "/api/v1/group_categories/{group_category_id}/groups",
                "keys": [
                    "group_category_id"
                ]
            }
        ],
        "description": [
            "Creates a new group. Groups created using the \u201c/api/v1/groups/\u201d endpoint will be community groups."
        ],
        "request_parameters": [
            {
                "parameter": "name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "description",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "is_public",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "join_level",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "storage_quota_mb",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sis_group_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Group"
        ],
        "paginated": false,
        "function_name": "create_a_group"
    },
    {
        "api_method_name": "Edit a group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.groups.update",
        "subtopic": "Groups",
        "defined_in": [
            "GroupsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/groups/{group_id}",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Modifies an existing group.  Note that to set an avatar image for the group, you must first upload the image file to the group, and the use the id in the response as the argument to this function.  See the File Upload Documentation for details on the file upload workflow."
        ],
        "request_parameters": [
            {
                "parameter": "name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "description",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "is_public",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "join_level",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "avatar_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "storage_quota_mb",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "members[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sis_group_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Group"
        ],
        "paginated": false,
        "function_name": "edit_a_group"
    },
    {
        "api_method_name": "Delete a group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.groups.destroy",
        "subtopic": "Groups",
        "defined_in": [
            "GroupsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/groups/{group_id}",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Deletes a group and removes all members."
        ],
        "request_parameters": null,
        "returns": [
            "a Group"
        ],
        "paginated": false,
        "function_name": "delete_a_group"
    },
    {
        "api_method_name": "Invite others to a group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.groups.invite",
        "subtopic": "Group Memberships",
        "defined_in": [
            "GroupsController#invite",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/invite",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Sends an invitation to all supplied email addresses which will allow the receivers to join the group."
        ],
        "request_parameters": [
            {
                "parameter": "invitees[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "invite_others_to_a_group"
    },
    {
        "api_method_name": "List group's users",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.groups.users",
        "subtopic": "Groups",
        "defined_in": [
            "GroupsController#users",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/users",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Returns a paginated list of users in the group."
        ],
        "request_parameters": [
            {
                "parameter": "search_term",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "exclude_inactive",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Users"
        ],
        "paginated": true,
        "function_name": "list_group_s_users"
    },
    {
        "api_method_name": "Upload a file",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.groups.create_file",
        "subtopic": "Groups",
        "defined_in": [
            "GroupsController#create_file",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/files",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Upload a file to the group.",
            "This API endpoint is the first step in uploading a file to a group. See the File Upload Documentation for details on the file upload workflow.",
            "Only those with the \u201cManage Files\u201d permission on a group can upload files to the group. By default, this is anybody participating in the group, or any admin over the group."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "upload_a_file"
    },
    {
        "api_method_name": "Preview processed html",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.groups.preview_html",
        "subtopic": "Groups",
        "defined_in": [
            "GroupsController#preview_html",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/preview_html",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Preview html content processed for this group"
        ],
        "request_parameters": [
            {
                "parameter": "html",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "preview_processed_html"
    },
    {
        "api_method_name": "Group activity stream",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.groups.activity_stream",
        "subtopic": "Groups",
        "defined_in": [
            "GroupsController#activity_stream",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/activity_stream",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Returns the current user's group-specific activity stream, paginated.",
            "For full documentation, see the API documentation for the user activity stream, in the user api."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "group_activity_stream"
    },
    {
        "api_method_name": "Group activity stream summary",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.groups.activity_stream_summary",
        "subtopic": "Groups",
        "defined_in": [
            "GroupsController#activity_stream_summary",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/activity_stream/summary",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Returns a summary of the current user's group-specific activity stream.",
            "For full documentation, see the API documentation for the user activity stream summary, in the user api."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "group_activity_stream_summary"
    },
    {
        "api_method_name": "Permissions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.groups.permissions",
        "subtopic": "Groups",
        "defined_in": [
            "GroupsController#permissions",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/permissions",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Returns permission information for the calling user in the given group. See also the Account and Course counterparts."
        ],
        "request_parameters": [
            {
                "parameter": "permissions[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "permissions"
    },
    {
        "api_method_name": "List group memberships",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_memberships.index",
        "subtopic": "Group Memberships",
        "defined_in": [
            "GroupMembershipsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_memberships_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/memberships",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "A paginated list of the members of a group."
        ],
        "request_parameters": [
            {
                "parameter": "filter_states[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of GroupMemberships"
        ],
        "paginated": true,
        "function_name": "list_group_memberships"
    },
    {
        "api_method_name": "Get a single group membership",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_memberships.show",
        "subtopic": "Group Memberships",
        "defined_in": [
            "GroupMembershipsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_memberships_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/memberships/{membership_id}",
                "keys": [
                    "group_id",
                    "membership_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/users/{user_id}",
                "keys": [
                    "group_id",
                    "user_id"
                ]
            }
        ],
        "description": [
            "Returns the group membership with the given membership id or user id."
        ],
        "request_parameters": null,
        "returns": [
            "a GroupMembership"
        ],
        "paginated": false,
        "function_name": "get_a_single_group_membership"
    },
    {
        "api_method_name": "Create a membership",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_memberships.create",
        "subtopic": "Group Memberships",
        "defined_in": [
            "GroupMembershipsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_memberships_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/memberships",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Join, or request to join, a group, depending on the join_level of the group.  If the membership or join request already exists, then it is simply returned"
        ],
        "request_parameters": [
            {
                "parameter": "user_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a GroupMembership"
        ],
        "paginated": false,
        "function_name": "create_a_membership"
    },
    {
        "api_method_name": "Update a membership",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_memberships.update",
        "subtopic": "Group Memberships",
        "defined_in": [
            "GroupMembershipsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_memberships_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/groups/{group_id}/memberships/{membership_id}",
                "keys": [
                    "group_id",
                    "membership_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/groups/{group_id}/users/{user_id}",
                "keys": [
                    "group_id",
                    "user_id"
                ]
            }
        ],
        "description": [
            "Accept a membership request, or add/remove moderator rights."
        ],
        "request_parameters": [
            {
                "parameter": "workflow_state",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "moderator",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a GroupMembership"
        ],
        "paginated": false,
        "function_name": "update_a_membership"
    },
    {
        "api_method_name": "Leave a group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.group_memberships.destroy",
        "subtopic": "Group Memberships",
        "defined_in": [
            "GroupMembershipsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/group_memberships_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/groups/{group_id}/memberships/{membership_id}",
                "keys": [
                    "group_id",
                    "membership_id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/groups/{group_id}/users/{user_id}",
                "keys": [
                    "group_id",
                    "user_id"
                ]
            }
        ],
        "description": [
            "Leave a group if you are allowed to leave (some groups, such as sets of course groups created by teachers, cannot be left). You may also use 'self' in place of a membership_id."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "leave_a_group"
    },
    {
        "api_method_name": "List recent history for a user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.history.index",
        "subtopic": "History",
        "defined_in": [
            "HistoryController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/history_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/history",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Return a paginated list of the user's recent history. History entries are returned in descending order, newest to oldest. You may list history entries for yourself (use self as the user_id), for a student you observe, or for a user you manage as an administrator. Note that the per_page pagination argument is not supported and the number of history entries returned per page will vary."
        ],
        "request_parameters": null,
        "returns": [
            "a list of HistoryEntries"
        ],
        "paginated": true,
        "function_name": "list_recent_history_for_a_user"
    },
    {
        "api_method_name": "Find images",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.internet_image.image_search",
        "subtopic": "Image Search",
        "defined_in": [
            "InternetImageController#image_search",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/internet_image_controller.rb"
        ],
        "beta": "BETA: This API endpoint is not finalized, and there could be breaking changes before its final release.",
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/image_search",
                "keys": []
            }
        ],
        "description": [
            "Find public domain images for use in courses and user content.  If you select an image using this API, please use the Confirm image selection API to indicate photo usage to the server."
        ],
        "request_parameters": [
            {
                "parameter": "query",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "find_images"
    },
    {
        "api_method_name": "Confirm image selection",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.internet_image.image_selection",
        "subtopic": "Image Search",
        "defined_in": [
            "InternetImageController#image_selection",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/internet_image_controller.rb"
        ],
        "beta": "BETA: This API endpoint is not finalized, and there could be breaking changes before its final release.",
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/image_selection/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "After you have used the search API, you should hit this API to indicate photo usage to the server."
        ],
        "request_parameters": [
            {
                "parameter": "id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "confirm_image_selection"
    },
    {
        "api_method_name": "Create JWT",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.jwts.create",
        "subtopic": "JWTs",
        "defined_in": [
            "JwtsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/jwts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/jwts",
                "keys": []
            }
        ],
        "description": [
            "Create a unique jwt for using with other canvas services",
            "Generates a different JWT each time it's called, each one expires after a short window (1 hour)"
        ],
        "request_parameters": null,
        "returns": [
            "a JWT"
        ],
        "paginated": false,
        "function_name": "create_jwt"
    },
    {
        "api_method_name": "Refresh JWT",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.jwts.refresh",
        "subtopic": "JWTs",
        "defined_in": [
            "JwtsController#refresh",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/jwts_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/jwts/refresh",
                "keys": []
            }
        ],
        "description": [
            "Refresh a JWT for use with other canvas services",
            "Generates a different JWT each time it's called, each one expires after a short window (1 hour)."
        ],
        "request_parameters": [
            {
                "parameter": "jwt",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a JWT"
        ],
        "paginated": false,
        "function_name": "refresh_jwt"
    },
    {
        "api_method_name": "Get a late policy",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.late_policy.show",
        "subtopic": "Late Policy",
        "defined_in": [
            "LatePolicyController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/late_policy_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{id}/late_policy",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the late policy for a course."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_a_late_policy"
    },
    {
        "api_method_name": "Create a late policy",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.late_policy.create",
        "subtopic": "Late Policy",
        "defined_in": [
            "LatePolicyController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/late_policy_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{id}/late_policy",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Create a late policy. If the course already has a late policy, a bad_request is returned since there can only be one late policy per course."
        ],
        "request_parameters": [
            {
                "parameter": "late_policy[missing_submission_deduction_enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "late_policy[missing_submission_deduction]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "late_policy[late_submission_deduction_enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "late_policy[late_submission_deduction]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "late_policy[late_submission_interval]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "late_policy[late_submission_minimum_percent_enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "late_policy[late_submission_minimum_percent]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_late_policy"
    },
    {
        "api_method_name": "Patch a late policy",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.late_policy.update",
        "subtopic": "Late Policy",
        "defined_in": [
            "LatePolicyController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/late_policy_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PATCH",
                "url": "/api/v1/courses/{id}/late_policy",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Patch a late policy. No body is returned upon success."
        ],
        "request_parameters": [
            {
                "parameter": "late_policy[missing_submission_deduction_enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "late_policy[missing_submission_deduction]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "late_policy[late_submission_deduction_enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "late_policy[late_submission_deduction]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "late_policy[late_submission_interval]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "late_policy[late_submission_minimum_percent_enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "late_policy[late_submission_minimum_percent]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "patch_a_late_policy"
    },
    {
        "api_method_name": "Create a Line Item",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/ims/line_items.create",
        "subtopic": "Line Items",
        "defined_in": [
            "Lti::Ims::LineItemsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/line_items_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/lti/courses/{course_id}/line_items",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Create a new Line Item"
        ],
        "request_parameters": [
            {
                "parameter": "scoreMaximum",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "label",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "resourceId",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "tag",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "resourceLinkId",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "https://canvas.instructure.com/lti/submission_type",
                "type": "object",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a LineItem"
        ],
        "paginated": false,
        "function_name": "create_a_line_item"
    },
    {
        "api_method_name": "Update a Line Item",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/ims/line_items.update",
        "subtopic": "Line Items",
        "defined_in": [
            "Lti::Ims::LineItemsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/line_items_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/lti/courses/{course_id}/line_items/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update new Line Item"
        ],
        "request_parameters": [
            {
                "parameter": "scoreMaximum",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "label",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "resourceId",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "tag",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a LineItem"
        ],
        "paginated": false,
        "function_name": "update_a_line_item"
    },
    {
        "api_method_name": "Show a Line Item",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/ims/line_items.show",
        "subtopic": "Line Items",
        "defined_in": [
            "Lti::Ims::LineItemsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/line_items_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/courses/{course_id}/line_items/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Show existing Line Item"
        ],
        "request_parameters": null,
        "returns": [
            "a LineItem"
        ],
        "paginated": false,
        "function_name": "show_a_line_item"
    },
    {
        "api_method_name": "List line Items",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/ims/line_items.index",
        "subtopic": "Line Items",
        "defined_in": [
            "Lti::Ims::LineItemsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/line_items_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/courses/{course_id}/line_items",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "list_line_items"
    },
    {
        "api_method_name": "Delete a Line Item",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/ims/line_items.destroy",
        "subtopic": "Line Items",
        "defined_in": [
            "Lti::Ims::LineItemsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/line_items_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/lti/courses/{course_id}/line_items/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Delete an existing Line Item"
        ],
        "request_parameters": null,
        "returns": [
            "a LineItem"
        ],
        "paginated": false,
        "function_name": "delete_a_line_item"
    },
    {
        "api_method_name": "Create live assessment results",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.live_assessments/results.create",
        "subtopic": "LiveAssessments",
        "defined_in": [
            "LiveAssessments::ResultsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/live_assessments/results_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/live_assessments/{assessment_id}/results",
                "keys": [
                    "course_id",
                    "assessment_id"
                ]
            }
        ],
        "description": [
            "Creates live assessment results and adds them to a live assessment"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "create_live_assessment_results"
    },
    {
        "api_method_name": "List live assessment results",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.live_assessments/results.index",
        "subtopic": "LiveAssessments",
        "defined_in": [
            "LiveAssessments::ResultsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/live_assessments/results_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/live_assessments/{assessment_id}/results",
                "keys": [
                    "course_id",
                    "assessment_id"
                ]
            }
        ],
        "description": [
            "Returns a paginated list of live assessment results"
        ],
        "request_parameters": [
            {
                "parameter": "user_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "list_live_assessment_results"
    },
    {
        "api_method_name": "Create or find a live assessment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.live_assessments/assessments.create",
        "subtopic": "LiveAssessments",
        "defined_in": [
            "LiveAssessments::AssessmentsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/live_assessments/assessments_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/live_assessments",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Creates or finds an existing live assessment with the given key and aligns it with the linked outcome"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "create_or_find_a_live_assessment"
    },
    {
        "api_method_name": "List live assessments",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.live_assessments/assessments.index",
        "subtopic": "LiveAssessments",
        "defined_in": [
            "LiveAssessments::AssessmentsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/live_assessments/assessments_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/live_assessments",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns a paginated list of live assessments."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_live_assessments"
    },
    {
        "api_method_name": "List user logins",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.pseudonyms.index",
        "subtopic": "Logins",
        "defined_in": [
            "PseudonymsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/pseudonyms_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/logins",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/logins",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Given a user ID, return a paginated list of that user's logins for the given account."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_user_logins"
    },
    {
        "api_method_name": "Create a user login",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.pseudonyms.create",
        "subtopic": "Logins",
        "defined_in": [
            "PseudonymsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/pseudonyms_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/logins",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Create a new login for an existing user in the given account."
        ],
        "request_parameters": [
            {
                "parameter": "user[id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "login[unique_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "login[password]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "login[sis_user_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "login[integration_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "login[authentication_provider_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_user_login"
    },
    {
        "api_method_name": "Edit a user login",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.pseudonyms.update",
        "subtopic": "Logins",
        "defined_in": [
            "PseudonymsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/pseudonyms_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/logins/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update an existing login for a user in the given account."
        ],
        "request_parameters": [
            {
                "parameter": "login[unique_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "login[password]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "login[sis_user_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "login[integration_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "login[authentication_provider_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "edit_a_user_login"
    },
    {
        "api_method_name": "Delete a user login",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.pseudonyms.destroy",
        "subtopic": "Logins",
        "defined_in": [
            "PseudonymsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/pseudonyms_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/{user_id}/logins/{id}",
                "keys": [
                    "user_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Delete an existing login."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_user_login"
    },
    {
        "api_method_name": "List media tracks for a Media Object",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.media_tracks.index",
        "subtopic": "Media Tracks",
        "defined_in": [
            "MediaTracksController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/media_tracks_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/media_objects/{media_object_id}/media_tracks",
                "keys": [
                    "media_object_id"
                ]
            }
        ],
        "description": [
            "List the media tracks associated with a media object"
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of MediaTracks"
        ],
        "paginated": false,
        "function_name": "list_media_tracks_for_a_media_object"
    },
    {
        "api_method_name": "Update Media Tracks",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.media_tracks.update",
        "subtopic": "Media Tracks",
        "defined_in": [
            "MediaTracksController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/media_tracks_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/media_objects/{media_object_id}/media_tracks",
                "keys": [
                    "media_object_id"
                ]
            }
        ],
        "description": [
            "Replace the media tracks associated with a media object with the array of tracks provided in the body. Update will delete any existing tracks not listed, leave untouched any tracks with no content field, and update or create tracks with a content field."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_media_tracks"
    },
    {
        "api_method_name": "List Media Objects",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.media_objects.index",
        "subtopic": "Media Objects",
        "defined_in": [
            "MediaObjectsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/media_objects_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/media_objects",
                "keys": []
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/media_objects",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/media_objects",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course."
        ],
        "request_parameters": [
            {
                "parameter": "sort",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "order",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "exclude[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of MediaObjects"
        ],
        "paginated": false,
        "function_name": "list_media_objects"
    },
    {
        "api_method_name": "Update Media Object",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.media_objects.update_media_object",
        "subtopic": "Media Objects",
        "defined_in": [
            "MediaObjectsController#update_media_object",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/media_objects_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/media_objects/{media_object_id}",
                "keys": [
                    "media_object_id"
                ]
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "update_media_object"
    },
    {
        "api_method_name": "List students selected for moderation",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.moderation_set.index",
        "subtopic": "Moderation Set",
        "defined_in": [
            "ModerationSetController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/moderation_set_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/moderated_students",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Returns a paginated list of students selected for moderation"
        ],
        "request_parameters": null,
        "returns": [
            "a list of Users"
        ],
        "paginated": true,
        "function_name": "list_students_selected_for_moderation"
    },
    {
        "api_method_name": "Select students for moderation",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.moderation_set.create",
        "subtopic": "Moderation Set",
        "defined_in": [
            "ModerationSetController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/moderation_set_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/moderated_students",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Returns an array of users that were selected for moderation"
        ],
        "request_parameters": [
            {
                "parameter": "student_ids[]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Users"
        ],
        "paginated": false,
        "function_name": "select_students_for_moderation"
    },
    {
        "api_method_name": "Bulk select provisional grades",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.provisional_grades.bulk_select",
        "subtopic": "Provisional Grades",
        "defined_in": [
            "ProvisionalGradesController#bulk_select",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/provisional_grades_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/bulk_select",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Choose which provisional grades will be received by associated students for an assignment. The caller must be the final grader for the assignment or an admin with :select_final_grade rights."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "bulk_select_provisional_grades"
    },
    {
        "api_method_name": "Show provisional grade status for a student",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.provisional_grades.status",
        "subtopic": "Provisional Grades",
        "defined_in": [
            "ProvisionalGradesController#status",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/provisional_grades_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/status",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Tell whether the student's submission needs one or more provisional grades."
        ],
        "request_parameters": [
            {
                "parameter": "student_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "show_provisional_grade_status_for_a_student"
    },
    {
        "api_method_name": "Select provisional grade",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.provisional_grades.select",
        "subtopic": "Provisional Grades",
        "defined_in": [
            "ProvisionalGradesController#select",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/provisional_grades_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/{provisional_grade_id}/select",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "provisional_grade_id"
                ]
            }
        ],
        "description": [
            "Choose which provisional grade the student should receive for a submission. The caller must be the final grader for the assignment or an admin with :select_final_grade rights."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "select_provisional_grade"
    },
    {
        "api_method_name": "Publish provisional grades for an assignment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.provisional_grades.publish",
        "subtopic": "Provisional Grades",
        "defined_in": [
            "ProvisionalGradesController#publish",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/provisional_grades_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/publish",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Publish the selected provisional grade for all submissions to an assignment. Use the \u201cSelect provisional grade\u201d endpoint to choose which provisional grade to publish for a particular submission.",
            "Students not in the moderation set will have their one and only provisional grade published.",
            "WARNING: This is irreversible. This will overwrite existing grades in the gradebook."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "publish_provisional_grades_for_an_assignment"
    },
    {
        "api_method_name": "Show provisional grade status for a student",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.anonymous_provisional_grades.status",
        "subtopic": "Anonymous Provisional Grades",
        "defined_in": [
            "AnonymousProvisionalGradesController#status",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/anonymous_provisional_grades_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/anonymous_provisional_grades/status",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Determine whether or not the student's submission needs one or more provisional grades."
        ],
        "request_parameters": [
            {
                "parameter": "anonymous_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "show_provisional_grade_status_for_a_student"
    },
    {
        "api_method_name": "List modules",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_modules_api.index",
        "subtopic": "Modules",
        "defined_in": [
            "ContextModulesApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_modules_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/modules",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "A paginated list of the modules in a course"
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "search_term",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "student_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Modules"
        ],
        "paginated": true,
        "function_name": "list_modules"
    },
    {
        "api_method_name": "Show module",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_modules_api.show",
        "subtopic": "Modules",
        "defined_in": [
            "ContextModulesApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_modules_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/modules/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Get information about a single module"
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "student_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Module"
        ],
        "paginated": false,
        "function_name": "show_module"
    },
    {
        "api_method_name": "Create a module",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_modules_api.create",
        "subtopic": "Modules",
        "defined_in": [
            "ContextModulesApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_modules_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/modules",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Create and return a new module"
        ],
        "request_parameters": [
            {
                "parameter": "module[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "module[unlock_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module[position]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module[require_sequential_progress]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module[prerequisite_module_ids][]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module[publish_final_grade]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Module"
        ],
        "paginated": false,
        "function_name": "create_a_module"
    },
    {
        "api_method_name": "Update a module",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_modules_api.update",
        "subtopic": "Modules",
        "defined_in": [
            "ContextModulesApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_modules_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/modules/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update and return an existing module"
        ],
        "request_parameters": [
            {
                "parameter": "module[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module[unlock_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module[position]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module[require_sequential_progress]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module[prerequisite_module_ids][]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module[publish_final_grade]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module[published]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Module"
        ],
        "paginated": false,
        "function_name": "update_a_module"
    },
    {
        "api_method_name": "Delete module",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_modules_api.destroy",
        "subtopic": "Modules",
        "defined_in": [
            "ContextModulesApiController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_modules_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/modules/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Delete a module"
        ],
        "request_parameters": null,
        "returns": [
            "a Module"
        ],
        "paginated": false,
        "function_name": "delete_module"
    },
    {
        "api_method_name": "Re-lock module progressions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_modules_api.relock",
        "subtopic": "Modules",
        "defined_in": [
            "ContextModulesApiController#relock",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_modules_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/modules/{id}/relock",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Resets module progressions to their default locked state and recalculates them based on the current requirements.",
            "Adding progression requirements to an active course will not lock students out of modules they have already unlocked unless this action is called."
        ],
        "request_parameters": null,
        "returns": [
            "a Module"
        ],
        "paginated": false,
        "function_name": "re_lock_module_progressions"
    },
    {
        "api_method_name": "List module items",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_module_items_api.index",
        "subtopic": "Module Items",
        "defined_in": [
            "ContextModuleItemsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_module_items_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/modules/{module_id}/items",
                "keys": [
                    "course_id",
                    "module_id"
                ]
            }
        ],
        "description": [
            "A paginated list of the items in a module"
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "search_term",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "student_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of ModuleItems"
        ],
        "paginated": true,
        "function_name": "list_module_items"
    },
    {
        "api_method_name": "Show module item",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_module_items_api.show",
        "subtopic": "Module Items",
        "defined_in": [
            "ContextModuleItemsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_module_items_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/modules/{module_id}/items/{id}",
                "keys": [
                    "course_id",
                    "module_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Get information about a single module item"
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "student_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a ModuleItem"
        ],
        "paginated": false,
        "function_name": "show_module_item"
    },
    {
        "api_method_name": "Create a module item",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_module_items_api.create",
        "subtopic": "Module Items",
        "defined_in": [
            "ContextModuleItemsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_module_items_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/modules/{module_id}/items",
                "keys": [
                    "course_id",
                    "module_id"
                ]
            }
        ],
        "description": [
            "Create and return a new module item"
        ],
        "request_parameters": [
            {
                "parameter": "module_item[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "module_item[content_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "module_item[position]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[indent]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[page_url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[external_url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[new_tab]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[completion_requirement][type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[completion_requirement][min_score]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a ModuleItem"
        ],
        "paginated": false,
        "function_name": "create_a_module_item"
    },
    {
        "api_method_name": "Update a module item",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_module_items_api.update",
        "subtopic": "Module Items",
        "defined_in": [
            "ContextModuleItemsApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_module_items_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/modules/{module_id}/items/{id}",
                "keys": [
                    "course_id",
                    "module_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update and return an existing module item"
        ],
        "request_parameters": [
            {
                "parameter": "module_item[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[position]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[indent]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[external_url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[new_tab]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[completion_requirement][type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[completion_requirement][min_score]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[published]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "module_item[module_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a ModuleItem"
        ],
        "paginated": false,
        "function_name": "update_a_module_item"
    },
    {
        "api_method_name": "Select a mastery path",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_module_items_api.select_mastery_path",
        "subtopic": "Module Items",
        "defined_in": [
            "ContextModuleItemsApiController#select_mastery_path",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_module_items_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/modules/{module_id}/items/{id}/select_mastery_path",
                "keys": [
                    "course_id",
                    "module_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Select a mastery path when module item includes several possible paths. Requires Mastery Paths feature to be enabled.  Returns a compound document with the assignments included in the given path and any module items related to those assignments"
        ],
        "request_parameters": [
            {
                "parameter": "assignment_set_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "student_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "select_a_mastery_path"
    },
    {
        "api_method_name": "Delete module item",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_module_items_api.destroy",
        "subtopic": "Module Items",
        "defined_in": [
            "ContextModuleItemsApiController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_module_items_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/modules/{module_id}/items/{id}",
                "keys": [
                    "course_id",
                    "module_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Delete a module item"
        ],
        "request_parameters": null,
        "returns": [
            "a ModuleItem"
        ],
        "paginated": false,
        "function_name": "delete_module_item"
    },
    {
        "api_method_name": "Mark module item as done/not done",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_module_items_api.mark_as_done",
        "subtopic": "Module Items",
        "defined_in": [
            "ContextModuleItemsApiController#mark_as_done",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_module_items_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/modules/{module_id}/items/{id}/done",
                "keys": [
                    "course_id",
                    "module_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Mark a module item as done/not done. Use HTTP method PUT to mark as done, and DELETE to mark as not done."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "mark_module_item_as_done_not_done"
    },
    {
        "api_method_name": "Get module item sequence",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_module_items_api.item_sequence",
        "subtopic": "Module Items",
        "defined_in": [
            "ContextModuleItemsApiController#item_sequence",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_module_items_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/module_item_sequence",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Given an asset in a course, find the ModuleItem it belongs to, the previous and next Module Items in the course sequence, and also any applicable mastery path rules"
        ],
        "request_parameters": [
            {
                "parameter": "asset_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "asset_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a ModuleItemSequence"
        ],
        "paginated": false,
        "function_name": "get_module_item_sequence"
    },
    {
        "api_method_name": "Mark module item read",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.context_module_items_api.mark_item_read",
        "subtopic": "Module Items",
        "defined_in": [
            "ContextModuleItemsApiController#mark_item_read",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/context_module_items_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/modules/{module_id}/items/{id}/mark_read",
                "keys": [
                    "course_id",
                    "module_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Fulfills \u201cmust view\u201d requirement for a module item. It is generally not necessary to do this explicitly, but it is provided for applications that need to access external content directly (bypassing the html_url redirect that normally allows Canvas to fulfill \u201cmust view\u201d requirements).",
            "This endpoint cannot be used to complete requirements on locked or unpublished module items."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "mark_module_item_read"
    },
    {
        "api_method_name": "List Course Memberships",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/ims/names_and_roles.course_index",
        "subtopic": "Names and Role",
        "defined_in": [
            "Lti::Ims::NamesAndRolesController#course_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/names_and_roles_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/courses/{course_id}/names_and_roles",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Return active NamesAndRoleMemberships in the given course."
        ],
        "request_parameters": [
            {
                "parameter": "rlid",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "role",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "limit",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a NamesAndRoleMemberships"
        ],
        "paginated": false,
        "function_name": "list_course_memberships"
    },
    {
        "api_method_name": "List Group Memberships",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/ims/names_and_roles.group_index",
        "subtopic": "Names and Role",
        "defined_in": [
            "Lti::Ims::NamesAndRolesController#group_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/names_and_roles_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/groups/{group_id}/names_and_roles",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Return active NamesAndRoleMemberships in the given group."
        ],
        "request_parameters": [
            {
                "parameter": "`rlid`",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "role",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "limit",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a NamesAndRoleMemberships"
        ],
        "paginated": false,
        "function_name": "list_group_memberships"
    },
    {
        "api_method_name": "List preferences",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.notification_preferences.index",
        "subtopic": "Notification Preferences",
        "defined_in": [
            "NotificationPreferencesController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/notification_preferences_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences",
                "keys": [
                    "user_id",
                    "communication_channel_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences",
                "keys": [
                    "user_id",
                    "type",
                    "address"
                ]
            }
        ],
        "description": [
            "Fetch all preferences for the given communication channel"
        ],
        "request_parameters": null,
        "returns": [
            "a list of NotificationPreferences"
        ],
        "paginated": false,
        "function_name": "list_preferences"
    },
    {
        "api_method_name": "List of preference categories",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.notification_preferences.category_index",
        "subtopic": "Notification Preferences",
        "defined_in": [
            "NotificationPreferencesController#category_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/notification_preferences_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preference_categories",
                "keys": [
                    "user_id",
                    "communication_channel_id"
                ]
            }
        ],
        "description": [
            "Fetch all notification preference categories for the given communication channel"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "list_of_preference_categories"
    },
    {
        "api_method_name": "Get a preference",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.notification_preferences.show",
        "subtopic": "Notification Preferences",
        "defined_in": [
            "NotificationPreferencesController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/notification_preferences_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences/{notification}",
                "keys": [
                    "user_id",
                    "communication_channel_id",
                    "notification"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences/{notification}",
                "keys": [
                    "user_id",
                    "type",
                    "address",
                    "notification"
                ]
            }
        ],
        "description": [
            "Fetch the preference for the given notification for the given communication channel"
        ],
        "request_parameters": null,
        "returns": [
            "a NotificationPreference"
        ],
        "paginated": false,
        "function_name": "get_a_preference"
    },
    {
        "api_method_name": "Update a preference",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.notification_preferences.update",
        "subtopic": "Notification Preferences",
        "defined_in": [
            "NotificationPreferencesController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/notification_preferences_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences/{notification}",
                "keys": [
                    "communication_channel_id",
                    "notification"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/users/self/communication_channels/{type}/{address}/notification_preferences/{notification}",
                "keys": [
                    "type",
                    "address",
                    "notification"
                ]
            }
        ],
        "description": [
            "Change the preference for a single notification for a single communication channel"
        ],
        "request_parameters": [
            {
                "parameter": "notification_preferences[frequency]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_a_preference"
    },
    {
        "api_method_name": "Update preferences by category",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.notification_preferences.update_preferences_by_category",
        "subtopic": "Notification Preferences",
        "defined_in": [
            "NotificationPreferencesController#update_preferences_by_category",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/notification_preferences_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/users/self/communication_channels/{communication_channel_id}/notification_preference_categories/{category}",
                "keys": [
                    "communication_channel_id",
                    "category"
                ]
            }
        ],
        "description": [
            "Change the preferences for multiple notifications based on the category for a single communication channel"
        ],
        "request_parameters": [
            {
                "parameter": "category",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "notification_preferences[frequency]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_preferences_by_category"
    },
    {
        "api_method_name": "Update multiple preferences",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.notification_preferences.update_all",
        "subtopic": "Notification Preferences",
        "defined_in": [
            "NotificationPreferencesController#update_all",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/notification_preferences_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences",
                "keys": [
                    "communication_channel_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/users/self/communication_channels/{type}/{address}/notification_preferences",
                "keys": [
                    "type",
                    "address"
                ]
            }
        ],
        "description": [
            "Change the preferences for multiple notifications for a single communication channel at once"
        ],
        "request_parameters": [
            {
                "parameter": "notification_preferences[<X>][frequency]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_multiple_preferences"
    },
    {
        "api_method_name": "Create an Originality Report",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/originality_reports_api.create",
        "subtopic": "Originality Reports",
        "defined_in": [
            "Lti::OriginalityReportsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/originality_reports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report",
                "keys": [
                    "assignment_id",
                    "submission_id"
                ]
            }
        ],
        "description": [
            "Create a new OriginalityReport for the specified file"
        ],
        "request_parameters": [
            {
                "parameter": "originality_report[file_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "originality_report[originality_score]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "originality_report[originality_report_url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "originality_report[originality_report_file_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "originality_report[tool_setting][resource_type_code]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "originality_report[tool_setting][resource_url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "originality_report[workflow_state]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "originality_report[error_message]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "originality_report[attempt]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a OriginalityReport"
        ],
        "paginated": false,
        "function_name": "create_an_originality_report"
    },
    {
        "api_method_name": "Edit an Originality Report",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/originality_reports_api.update",
        "subtopic": "Originality Reports",
        "defined_in": [
            "Lti::OriginalityReportsApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/originality_reports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}",
                "keys": [
                    "assignment_id",
                    "submission_id",
                    "id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/lti/assignments/{assignment_id}/files/{file_id}/originality_report",
                "keys": [
                    "assignment_id",
                    "file_id"
                ]
            }
        ],
        "description": [
            "Modify an existing originality report. An alternative to this endpoint is to POST the same parameters listed below to the CREATE endpoint."
        ],
        "request_parameters": [
            {
                "parameter": "originality_report[originality_score]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "originality_report[originality_report_url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "originality_report[originality_report_file_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "originality_report[tool_setting][resource_type_code]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "originality_report[tool_setting][resource_url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "originality_report[workflow_state]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "originality_report[error_message]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a OriginalityReport"
        ],
        "paginated": false,
        "function_name": "edit_an_originality_report"
    },
    {
        "api_method_name": "Show an Originality Report",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/originality_reports_api.show",
        "subtopic": "Originality Reports",
        "defined_in": [
            "Lti::OriginalityReportsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/originality_reports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}",
                "keys": [
                    "assignment_id",
                    "submission_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/lti/assignments/{assignment_id}/files/{file_id}/originality_report",
                "keys": [
                    "assignment_id",
                    "file_id"
                ]
            }
        ],
        "description": [
            "Get a single originality report"
        ],
        "request_parameters": null,
        "returns": [
            "a OriginalityReport"
        ],
        "paginated": false,
        "function_name": "show_an_originality_report"
    },
    {
        "api_method_name": "Redirect to root outcome group for context",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_groups_api.redirect",
        "subtopic": "Outcome Groups",
        "defined_in": [
            "OutcomeGroupsApiController#redirect",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/global/root_outcome_group",
                "keys": []
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/root_outcome_group",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/root_outcome_group",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Convenience redirect to find the root outcome group for a particular context. Will redirect to the appropriate outcome group's URL."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "redirect_to_root_outcome_group_for_context"
    },
    {
        "api_method_name": "Get all outcome groups for context",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_groups_api.index",
        "subtopic": "Outcome Groups",
        "defined_in": [
            "OutcomeGroupsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/outcome_groups",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/outcome_groups",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_all_outcome_groups_for_context"
    },
    {
        "api_method_name": "Get all outcome links for context",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_groups_api.link_index",
        "subtopic": "Outcome Groups",
        "defined_in": [
            "OutcomeGroupsApiController#link_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/outcome_group_links",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/outcome_group_links",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_all_outcome_links_for_context"
    },
    {
        "api_method_name": "Show an outcome group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_groups_api.show",
        "subtopic": "Outcome Groups",
        "defined_in": [
            "OutcomeGroupsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/global/outcome_groups/{id}",
                "keys": [
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/outcome_groups/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/outcome_groups/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "show_an_outcome_group"
    },
    {
        "api_method_name": "Update an outcome group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_groups_api.update",
        "subtopic": "Outcome Groups",
        "defined_in": [
            "OutcomeGroupsApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/global/outcome_groups/{id}",
                "keys": [
                    "id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/outcome_groups/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/outcome_groups/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Modify an existing outcome group. Fields not provided are left as is; unrecognized fields are ignored.",
            "When changing the parent outcome group, the new parent group must belong to the same context as this outcome group, and must not be a descendant of this outcome group (i.e. no cycles allowed)."
        ],
        "request_parameters": [
            {
                "parameter": "title",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "description",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "vendor_guid",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "parent_outcome_group_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a OutcomeGroup"
        ],
        "paginated": false,
        "function_name": "update_an_outcome_group"
    },
    {
        "api_method_name": "Delete an outcome group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_groups_api.destroy",
        "subtopic": "Outcome Groups",
        "defined_in": [
            "OutcomeGroupsApiController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/global/outcome_groups/{id}",
                "keys": [
                    "id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/outcome_groups/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/outcome_groups/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Deleting an outcome group deletes descendant outcome groups and outcome links. The linked outcomes themselves are only deleted if all links to the outcome were deleted.",
            "Aligned outcomes cannot be deleted; as such, if all remaining links to an aligned outcome are included in this group's descendants, the group deletion will fail."
        ],
        "request_parameters": null,
        "returns": [
            "a OutcomeGroup"
        ],
        "paginated": false,
        "function_name": "delete_an_outcome_group"
    },
    {
        "api_method_name": "List linked outcomes",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_groups_api.outcomes",
        "subtopic": "Outcome Groups",
        "defined_in": [
            "OutcomeGroupsApiController#outcomes",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/global/outcome_groups/{id}/outcomes",
                "keys": [
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/outcome_groups/{id}/outcomes",
                "keys": [
                    "account_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/outcome_groups/{id}/outcomes",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "A paginated list of the immediate OutcomeLink children of the outcome group."
        ],
        "request_parameters": [
            {
                "parameter": "outcome_style",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of OutcomeLinks"
        ],
        "paginated": true,
        "function_name": "list_linked_outcomes"
    },
    {
        "api_method_name": "Create/link an outcome",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_groups_api.link",
        "subtopic": "Outcome Groups",
        "defined_in": [
            "OutcomeGroupsApiController#link",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/global/outcome_groups/{id}/outcomes",
                "keys": [
                    "id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/global/outcome_groups/{id}/outcomes/{outcome_id}",
                "keys": [
                    "id",
                    "outcome_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/outcome_groups/{id}/outcomes",
                "keys": [
                    "account_id",
                    "id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}",
                "keys": [
                    "account_id",
                    "id",
                    "outcome_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/outcome_groups/{id}/outcomes",
                "keys": [
                    "course_id",
                    "id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}",
                "keys": [
                    "course_id",
                    "id",
                    "outcome_id"
                ]
            }
        ],
        "description": [
            "Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery_points) in a POST to the collection.",
            "If linking an existing outcome, the outcome_id must identify an outcome available to this context; i.e. an outcome owned by this group's context, an outcome owned by an associated account, or a global outcome. With outcome_id present, any other parameters (except move_from) are ignored.",
            "If defining a new outcome, the outcome is created in the outcome group's context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group.",
            "If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any ratings lacking a description are given a default of \u201cNo description\u201d. Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery_points parameter is ignored."
        ],
        "request_parameters": [
            {
                "parameter": "outcome_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "move_from",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "title",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "display_name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "description",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "vendor_guid",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "mastery_points",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "ratings[][description]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "ratings[][points]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calculation_method",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calculation_int",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a OutcomeLink"
        ],
        "paginated": false,
        "function_name": "create_link_an_outcome"
    },
    {
        "api_method_name": "Unlink an outcome",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_groups_api.unlink",
        "subtopic": "Outcome Groups",
        "defined_in": [
            "OutcomeGroupsApiController#unlink",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/global/outcome_groups/{id}/outcomes/{outcome_id}",
                "keys": [
                    "id",
                    "outcome_id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}",
                "keys": [
                    "account_id",
                    "id",
                    "outcome_id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}",
                "keys": [
                    "course_id",
                    "id",
                    "outcome_id"
                ]
            }
        ],
        "description": [
            "Unlinking an outcome only deletes the outcome itself if this was the last link to the outcome in any group in any context. Aligned outcomes cannot be deleted; as such, if this is the last link to an aligned outcome, the unlinking will fail."
        ],
        "request_parameters": null,
        "returns": [
            "a OutcomeLink"
        ],
        "paginated": false,
        "function_name": "unlink_an_outcome"
    },
    {
        "api_method_name": "List subgroups",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_groups_api.subgroups",
        "subtopic": "Outcome Groups",
        "defined_in": [
            "OutcomeGroupsApiController#subgroups",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/global/outcome_groups/{id}/subgroups",
                "keys": [
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/outcome_groups/{id}/subgroups",
                "keys": [
                    "account_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/outcome_groups/{id}/subgroups",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "A paginated list of the immediate OutcomeGroup children of the outcome group."
        ],
        "request_parameters": null,
        "returns": [
            "a list of OutcomeGroups"
        ],
        "paginated": true,
        "function_name": "list_subgroups"
    },
    {
        "api_method_name": "Create a subgroup",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_groups_api.create",
        "subtopic": "Outcome Groups",
        "defined_in": [
            "OutcomeGroupsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/global/outcome_groups/{id}/subgroups",
                "keys": [
                    "id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/outcome_groups/{id}/subgroups",
                "keys": [
                    "account_id",
                    "id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/outcome_groups/{id}/subgroups",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Creates a new empty subgroup under the outcome group with the given title and description."
        ],
        "request_parameters": [
            {
                "parameter": "title",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "description",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "vendor_guid",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a OutcomeGroup"
        ],
        "paginated": false,
        "function_name": "create_a_subgroup"
    },
    {
        "api_method_name": "Import an outcome group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_groups_api.import",
        "subtopic": "Outcome Groups",
        "defined_in": [
            "OutcomeGroupsApiController#import",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_groups_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/global/outcome_groups/{id}/import",
                "keys": [
                    "id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/outcome_groups/{id}/import",
                "keys": [
                    "account_id",
                    "id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/outcome_groups/{id}/import",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Creates a new subgroup of the outcome group with the same title and description as the source group, then creates links in that new subgroup to the same outcomes that are linked in the source group. Recurses on the subgroups of the source group, importing them each in turn into the new subgroup.",
            "Allows you to copy organizational structure, but does not create copies of the outcomes themselves, only new links.",
            "The source group must be either global, from the same context as this outcome group, or from an associated account. The source group cannot be the root outcome group of its context."
        ],
        "request_parameters": [
            {
                "parameter": "source_outcome_group_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "async",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a OutcomeGroup"
        ],
        "paginated": false,
        "function_name": "import_an_outcome_group"
    },
    {
        "api_method_name": "Import Outcomes",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_imports_api.create",
        "subtopic": "Outcome Imports",
        "defined_in": [
            "OutcomeImportsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_imports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/outcome_imports",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/outcome_imports",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Import outcomes into Canvas.",
            "For more information on the format that's expected here, please see the \u201cOutcomes CSV\u201d section in the API docs."
        ],
        "request_parameters": [
            {
                "parameter": "import_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "attachment",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "extension",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a OutcomeImport"
        ],
        "paginated": false,
        "function_name": "import_outcomes"
    },
    {
        "api_method_name": "Get Outcome import status",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_imports_api.show",
        "subtopic": "Outcome Imports",
        "defined_in": [
            "OutcomeImportsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_imports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/outcome_imports/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/outcome_imports/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Get the status of an already created Outcome import. Pass 'latest' for the outcome import id for the latest import."
        ],
        "request_parameters": null,
        "returns": [
            "a OutcomeImport"
        ],
        "paginated": false,
        "function_name": "get_outcome_import_status"
    },
    {
        "api_method_name": "Get outcome results",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_results.index",
        "subtopic": "Outcome Results",
        "defined_in": [
            "OutcomeResultsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_results_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/outcome_results",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Gets the outcome results for users and outcomes in the specified context."
        ],
        "request_parameters": [
            {
                "parameter": "user_ids[]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "outcome_ids[]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include_hidden",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_outcome_results"
    },
    {
        "api_method_name": "Get outcome result rollups",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_results.rollups",
        "subtopic": "Outcome Results",
        "defined_in": [
            "OutcomeResultsController#rollups",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_results_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/outcome_rollups",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Gets the outcome rollups for the users and outcomes in the specified context."
        ],
        "request_parameters": [
            {
                "parameter": "aggregate",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "aggregate_stat",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user_ids[]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "outcome_ids[]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "exclude[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sort_by",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sort_outcome_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sort_order",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_outcome_result_rollups"
    },
    {
        "api_method_name": "Show an outcome",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcomes_api.show",
        "subtopic": "Outcomes",
        "defined_in": [
            "OutcomesApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcomes_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/outcomes/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the details of the outcome with the given id."
        ],
        "request_parameters": null,
        "returns": [
            "a Outcome"
        ],
        "paginated": false,
        "function_name": "show_an_outcome"
    },
    {
        "api_method_name": "Update an outcome",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcomes_api.update",
        "subtopic": "Outcomes",
        "defined_in": [
            "OutcomesApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcomes_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/outcomes/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Modify an existing outcome. Fields not provided are left as is; unrecognized fields are ignored.",
            "If any new ratings are provided, the combination of all new ratings provided completely replace any existing embedded rubric criterion; it is not possible to tweak the ratings of the embedded rubric criterion.",
            "A new embedded rubric criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any new ratings lacking a description are given a default of \u201cNo description\u201d. Any new ratings lacking a point value are given a default of 0."
        ],
        "request_parameters": [
            {
                "parameter": "title",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "display_name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "description",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "vendor_guid",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "mastery_points",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "ratings[][description]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "ratings[][points]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calculation_method",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "calculation_int",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Outcome"
        ],
        "paginated": false,
        "function_name": "update_an_outcome"
    },
    {
        "api_method_name": "Get aligned assignments for an outcome in a course for a particular student",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcomes_api.outcome_alignments",
        "subtopic": "Outcomes",
        "defined_in": [
            "OutcomesApiController#outcome_alignments",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcomes_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/outcome_alignments",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_aligned_assignments_for_an_outcome_in_a_course_for_a_particular_student"
    },
    {
        "api_method_name": "Show front page",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.wiki_pages_api.show_front_page",
        "subtopic": "Pages",
        "defined_in": [
            "WikiPagesApiController#show_front_page",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/wiki_pages_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/front_page",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/front_page",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Retrieve the content of the front page"
        ],
        "request_parameters": null,
        "returns": [
            "a Page"
        ],
        "paginated": false,
        "function_name": "show_front_page"
    },
    {
        "api_method_name": "Duplicate page",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.wiki_pages_api.duplicate",
        "subtopic": "Pages",
        "defined_in": [
            "WikiPagesApiController#duplicate",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/wiki_pages_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/pages/{url}/duplicate",
                "keys": [
                    "course_id",
                    "url"
                ]
            }
        ],
        "description": [
            "Duplicate a wiki page"
        ],
        "request_parameters": null,
        "returns": [
            "a Page"
        ],
        "paginated": false,
        "function_name": "duplicate_page"
    },
    {
        "api_method_name": "Update/create front page",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.wiki_pages_api.update_front_page",
        "subtopic": "Pages",
        "defined_in": [
            "WikiPagesApiController#update_front_page",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/wiki_pages_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/front_page",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/groups/{group_id}/front_page",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Update the title or contents of the front page"
        ],
        "request_parameters": [
            {
                "parameter": "wiki_page[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "wiki_page[body]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "wiki_page[editing_roles]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "wiki_page[notify_of_update]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "wiki_page[published]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Page"
        ],
        "paginated": false,
        "function_name": "update_create_front_page"
    },
    {
        "api_method_name": "List pages",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.wiki_pages_api.index",
        "subtopic": "Pages",
        "defined_in": [
            "WikiPagesApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/wiki_pages_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/pages",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/pages",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "A paginated list of the wiki pages associated with a course or group"
        ],
        "request_parameters": [
            {
                "parameter": "sort",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "order",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "search_term",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "published",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Pages"
        ],
        "paginated": true,
        "function_name": "list_pages"
    },
    {
        "api_method_name": "Create page",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.wiki_pages_api.create",
        "subtopic": "Pages",
        "defined_in": [
            "WikiPagesApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/wiki_pages_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/pages",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/pages",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Create a new wiki page"
        ],
        "request_parameters": [
            {
                "parameter": "wiki_page[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "wiki_page[body]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "wiki_page[editing_roles]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "wiki_page[notify_of_update]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "wiki_page[published]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "wiki_page[front_page]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Page"
        ],
        "paginated": false,
        "function_name": "create_page"
    },
    {
        "api_method_name": "Show page",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.wiki_pages_api.show",
        "subtopic": "Pages",
        "defined_in": [
            "WikiPagesApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/wiki_pages_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/pages/{url}",
                "keys": [
                    "course_id",
                    "url"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/pages/{url}",
                "keys": [
                    "group_id",
                    "url"
                ]
            }
        ],
        "description": [
            "Retrieve the content of a wiki page"
        ],
        "request_parameters": null,
        "returns": [
            "a Page"
        ],
        "paginated": false,
        "function_name": "show_page"
    },
    {
        "api_method_name": "Update/create page",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.wiki_pages_api.update",
        "subtopic": "Pages",
        "defined_in": [
            "WikiPagesApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/wiki_pages_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/pages/{url}",
                "keys": [
                    "course_id",
                    "url"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/groups/{group_id}/pages/{url}",
                "keys": [
                    "group_id",
                    "url"
                ]
            }
        ],
        "description": [
            "Update the title or contents of a wiki page"
        ],
        "request_parameters": [
            {
                "parameter": "wiki_page[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "wiki_page[body]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "wiki_page[editing_roles]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "wiki_page[notify_of_update]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "wiki_page[published]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "wiki_page[front_page]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Page"
        ],
        "paginated": false,
        "function_name": "update_create_page"
    },
    {
        "api_method_name": "Delete page",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.wiki_pages_api.destroy",
        "subtopic": "Pages",
        "defined_in": [
            "WikiPagesApiController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/wiki_pages_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/pages/{url}",
                "keys": [
                    "course_id",
                    "url"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/groups/{group_id}/pages/{url}",
                "keys": [
                    "group_id",
                    "url"
                ]
            }
        ],
        "description": [
            "Delete a wiki page"
        ],
        "request_parameters": null,
        "returns": [
            "a Page"
        ],
        "paginated": false,
        "function_name": "delete_page"
    },
    {
        "api_method_name": "List revisions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.wiki_pages_api.revisions",
        "subtopic": "Pages",
        "defined_in": [
            "WikiPagesApiController#revisions",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/wiki_pages_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/pages/{url}/revisions",
                "keys": [
                    "course_id",
                    "url"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/pages/{url}/revisions",
                "keys": [
                    "group_id",
                    "url"
                ]
            }
        ],
        "description": [
            "A paginated list of the revisions of a page. Callers must have update rights on the page in order to see page history."
        ],
        "request_parameters": null,
        "returns": [
            "a list of PageRevisions"
        ],
        "paginated": true,
        "function_name": "list_revisions"
    },
    {
        "api_method_name": "Show revision",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.wiki_pages_api.show_revision",
        "subtopic": "Pages",
        "defined_in": [
            "WikiPagesApiController#show_revision",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/wiki_pages_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/pages/{url}/revisions/latest",
                "keys": [
                    "course_id",
                    "url"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/pages/{url}/revisions/latest",
                "keys": [
                    "group_id",
                    "url"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/pages/{url}/revisions/{revision_id}",
                "keys": [
                    "course_id",
                    "url",
                    "revision_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/pages/{url}/revisions/{revision_id}",
                "keys": [
                    "group_id",
                    "url",
                    "revision_id"
                ]
            }
        ],
        "description": [
            "Retrieve the metadata and optionally content of a revision of the page. Note that retrieving historic versions of pages requires edit rights."
        ],
        "request_parameters": [
            {
                "parameter": "summary",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a PageRevision"
        ],
        "paginated": false,
        "function_name": "show_revision"
    },
    {
        "api_method_name": "Revert to revision",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.wiki_pages_api.revert",
        "subtopic": "Pages",
        "defined_in": [
            "WikiPagesApiController#revert",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/wiki_pages_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/pages/{url}/revisions/{revision_id}",
                "keys": [
                    "course_id",
                    "url",
                    "revision_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/groups/{group_id}/pages/{url}/revisions/{revision_id}",
                "keys": [
                    "group_id",
                    "url",
                    "revision_id"
                ]
            }
        ],
        "description": [
            "Revert a page to a prior revision."
        ],
        "request_parameters": [
            {
                "parameter": "revision_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a PageRevision"
        ],
        "paginated": false,
        "function_name": "revert_to_revision"
    },
    {
        "api_method_name": "Get all Peer Reviews",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.peer_reviews_api.index",
        "subtopic": "Peer Reviews",
        "defined_in": [
            "PeerReviewsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/peer_reviews_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/peer_reviews",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/sections/{section_id}/assignments/{assignment_id}/peer_reviews",
                "keys": [
                    "section_id",
                    "assignment_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "submission_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews",
                "keys": [
                    "section_id",
                    "assignment_id",
                    "submission_id"
                ]
            }
        ],
        "description": [
            "Get a list of all Peer Reviews for this assignment"
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of PeerReviews"
        ],
        "paginated": false,
        "function_name": "get_all_peer_reviews"
    },
    {
        "api_method_name": "Create Peer Review",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.peer_reviews_api.create",
        "subtopic": "Peer Reviews",
        "defined_in": [
            "PeerReviewsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/peer_reviews_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "submission_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews",
                "keys": [
                    "section_id",
                    "assignment_id",
                    "submission_id"
                ]
            }
        ],
        "description": [
            "Create a peer review for the assignment"
        ],
        "request_parameters": [
            {
                "parameter": "user_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a PeerReview"
        ],
        "paginated": false,
        "function_name": "create_peer_review"
    },
    {
        "api_method_name": "Delete Peer Review",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.peer_reviews_api.destroy",
        "subtopic": "Peer Reviews",
        "defined_in": [
            "PeerReviewsApiController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/peer_reviews_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "submission_id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews",
                "keys": [
                    "section_id",
                    "assignment_id",
                    "submission_id"
                ]
            }
        ],
        "description": [
            "Delete a peer review for the assignment"
        ],
        "request_parameters": [
            {
                "parameter": "user_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a PeerReview"
        ],
        "paginated": false,
        "function_name": "delete_peer_review"
    },
    {
        "api_method_name": "Get a single assignment (lti)",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/plagiarism_assignments_api.show",
        "subtopic": "Plagiarism Detection Platform Assignments",
        "defined_in": [
            "Lti::PlagiarismAssignmentsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/plagiarism_assignments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/assignments/{assignment_id}",
                "keys": [
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Get a single Canvas assignment by Canvas id or LTI id. Tool providers may only access assignments that are associated with their tool."
        ],
        "request_parameters": [
            {
                "parameter": "user_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a LtiAssignment"
        ],
        "paginated": false,
        "function_name": "get_a_single_assignment__lti_"
    },
    {
        "api_method_name": "Get a single user (lti)",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/users_api.show",
        "subtopic": "Plagiarism Detection Platform Users",
        "defined_in": [
            "Lti::UsersApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/users_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/users/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Get a single Canvas user by Canvas id or LTI id. Tool providers may only access users that have been assigned an assignment associated with their tool."
        ],
        "request_parameters": null,
        "returns": [
            "a User"
        ],
        "paginated": false,
        "function_name": "get_a_single_user__lti_"
    },
    {
        "api_method_name": "Get all users in a group (lti)",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/users_api.group_index",
        "subtopic": "Plagiarism Detection Platform Users",
        "defined_in": [
            "Lti::UsersApiController#group_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/users_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/groups/{group_id}/users",
                "keys": [
                    "group_id"
                ]
            }
        ],
        "description": [
            "Get all Canvas users in a group. Tool providers may only access groups that belong to the context the tool is installed in."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Users"
        ],
        "paginated": false,
        "function_name": "get_all_users_in_a_group__lti_"
    },
    {
        "api_method_name": "Get a single submission",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/submissions_api.show",
        "subtopic": "Plagiarism Detection Submissions",
        "defined_in": [
            "Lti::SubmissionsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/assignments/{assignment_id}/submissions/{submission_id}",
                "keys": [
                    "assignment_id",
                    "submission_id"
                ]
            }
        ],
        "description": [
            "Get a single submission, based on submission id."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_a_single_submission"
    },
    {
        "api_method_name": "Get the history of a single submission",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/submissions_api.history",
        "subtopic": "Plagiarism Detection Submissions",
        "defined_in": [
            "Lti::SubmissionsApiController#history",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/assignments/{assignment_id}/submissions/{submission_id}/history",
                "keys": [
                    "assignment_id",
                    "submission_id"
                ]
            }
        ],
        "description": [
            "Get a list of all attempts made for a submission, based on submission id."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_the_history_of_a_single_submission"
    },
    {
        "api_method_name": "List planner items",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.planner.index",
        "subtopic": "Planner",
        "defined_in": [
            "PlannerController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/planner/items",
                "keys": []
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/planner/items",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Retrieve the paginated list of objects to be shown on the planner for the current user with the associated planner override to override an item's visibility if set.",
            "Planner items for a student may also be retrieved by a linked observer. Use the path that accepts a user_id and supply the student's id."
        ],
        "request_parameters": [
            {
                "parameter": "start_date",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_date",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "context_codes[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "filter",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "list_planner_items"
    },
    {
        "api_method_name": "List planner notes",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.planner_notes.index",
        "subtopic": "Planner Notes",
        "defined_in": [
            "PlannerNotesController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_notes_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/planner_notes",
                "keys": []
            }
        ],
        "description": [
            "Retrieve the paginated list of planner notes",
            "Retrieve planner note for a user"
        ],
        "request_parameters": [
            {
                "parameter": "start_date",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_date",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "context_codes[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of PlannerNotes"
        ],
        "paginated": true,
        "function_name": "list_planner_notes"
    },
    {
        "api_method_name": "Show a planner note",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.planner_notes.show",
        "subtopic": "Planner Notes",
        "defined_in": [
            "PlannerNotesController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_notes_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/planner_notes/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Retrieve a planner note for the current user"
        ],
        "request_parameters": null,
        "returns": [
            "a PlannerNote"
        ],
        "paginated": false,
        "function_name": "show_a_planner_note"
    },
    {
        "api_method_name": "Update a planner note",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.planner_notes.update",
        "subtopic": "Planner Notes",
        "defined_in": [
            "PlannerNotesController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_notes_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/planner_notes/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Update a planner note for the current user"
        ],
        "request_parameters": [
            {
                "parameter": "title",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "details",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "todo_date",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a PlannerNote"
        ],
        "paginated": false,
        "function_name": "update_a_planner_note"
    },
    {
        "api_method_name": "Create a planner note",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.planner_notes.create",
        "subtopic": "Planner Notes",
        "defined_in": [
            "PlannerNotesController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_notes_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/planner_notes",
                "keys": []
            }
        ],
        "description": [
            "Create a planner note for the current user"
        ],
        "request_parameters": [
            {
                "parameter": "title",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "details",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "todo_date",
                "type": "Date",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "linked_object_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "linked_object_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a PlannerNote"
        ],
        "paginated": false,
        "function_name": "create_a_planner_note"
    },
    {
        "api_method_name": "Delete a planner note",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.planner_notes.destroy",
        "subtopic": "Planner Notes",
        "defined_in": [
            "PlannerNotesController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_notes_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/planner_notes/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Delete a planner note for the current user"
        ],
        "request_parameters": null,
        "returns": [
            "a PlannerNote"
        ],
        "paginated": false,
        "function_name": "delete_a_planner_note"
    },
    {
        "api_method_name": "List planner overrides",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.planner_overrides.index",
        "subtopic": "Planner Overrides",
        "defined_in": [
            "PlannerOverridesController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/planner/overrides",
                "keys": []
            }
        ],
        "description": [
            "Retrieve a planner override for the current user"
        ],
        "request_parameters": null,
        "returns": [
            "a list of PlannerOverrides"
        ],
        "paginated": false,
        "function_name": "list_planner_overrides"
    },
    {
        "api_method_name": "Show a planner override",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.planner_overrides.show",
        "subtopic": "Planner Overrides",
        "defined_in": [
            "PlannerOverridesController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/planner/overrides/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Retrieve a planner override for the current user"
        ],
        "request_parameters": null,
        "returns": [
            "a PlannerOverride"
        ],
        "paginated": false,
        "function_name": "show_a_planner_override"
    },
    {
        "api_method_name": "Update a planner override",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.planner_overrides.update",
        "subtopic": "Planner Overrides",
        "defined_in": [
            "PlannerOverridesController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/planner/overrides/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Update a planner override's visibilty for the current user"
        ],
        "request_parameters": [
            {
                "parameter": "marked_complete",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "dismissed",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a PlannerOverride"
        ],
        "paginated": false,
        "function_name": "update_a_planner_override"
    },
    {
        "api_method_name": "Create a planner override",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.planner_overrides.create",
        "subtopic": "Planner Overrides",
        "defined_in": [
            "PlannerOverridesController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/planner/overrides",
                "keys": []
            }
        ],
        "description": [
            "Create a planner override for the current user"
        ],
        "request_parameters": [
            {
                "parameter": "plannable_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "plannable_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "marked_complete",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "dismissed",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a PlannerOverride"
        ],
        "paginated": false,
        "function_name": "create_a_planner_override"
    },
    {
        "api_method_name": "Delete a planner override",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.planner_overrides.destroy",
        "subtopic": "Planner Overrides",
        "defined_in": [
            "PlannerOverridesController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/planner_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/planner/overrides/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Delete a planner override for the current user"
        ],
        "request_parameters": null,
        "returns": [
            "a PlannerOverride"
        ],
        "paginated": false,
        "function_name": "delete_a_planner_override"
    },
    {
        "api_method_name": "List poll sessions for a poll",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_sessions.index",
        "subtopic": "Poll Sessions",
        "defined_in": [
            "Polling::PollSessionsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_sessions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/polls/{poll_id}/poll_sessions",
                "keys": [
                    "poll_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of PollSessions in this poll."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_poll_sessions_for_a_poll"
    },
    {
        "api_method_name": "Get the results for a single poll session",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_sessions.show",
        "subtopic": "Poll Sessions",
        "defined_in": [
            "Polling::PollSessionsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_sessions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/polls/{poll_id}/poll_sessions/{id}",
                "keys": [
                    "poll_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the poll session with the given id"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_the_results_for_a_single_poll_session"
    },
    {
        "api_method_name": "Create a single poll session",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_sessions.create",
        "subtopic": "Poll Sessions",
        "defined_in": [
            "Polling::PollSessionsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_sessions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/polls/{poll_id}/poll_sessions",
                "keys": [
                    "poll_id"
                ]
            }
        ],
        "description": [
            "Create a new poll session for this poll"
        ],
        "request_parameters": [
            {
                "parameter": "poll_sessions[][course_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "poll_sessions[][course_section_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "poll_sessions[][has_public_results]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_single_poll_session"
    },
    {
        "api_method_name": "Update a single poll session",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_sessions.update",
        "subtopic": "Poll Sessions",
        "defined_in": [
            "Polling::PollSessionsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_sessions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/polls/{poll_id}/poll_sessions/{id}",
                "keys": [
                    "poll_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update an existing poll session for this poll"
        ],
        "request_parameters": [
            {
                "parameter": "poll_sessions[][course_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "poll_sessions[][course_section_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "poll_sessions[][has_public_results]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_a_single_poll_session"
    },
    {
        "api_method_name": "Delete a poll session",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_sessions.destroy",
        "subtopic": "Poll Sessions",
        "defined_in": [
            "Polling::PollSessionsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_sessions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/polls/{poll_id}/poll_sessions/{id}",
                "keys": [
                    "poll_id",
                    "id"
                ]
            }
        ],
        "description": [
            "204 No Content response code is returned if the deletion was successful."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_poll_session"
    },
    {
        "api_method_name": "Open a poll session",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_sessions.open",
        "subtopic": "Poll Sessions",
        "defined_in": [
            "Polling::PollSessionsController#open",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_sessions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/polls/{poll_id}/poll_sessions/{id}/open",
                "keys": [
                    "poll_id",
                    "id"
                ]
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "open_a_poll_session"
    },
    {
        "api_method_name": "Close an opened poll session",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_sessions.close",
        "subtopic": "Poll Sessions",
        "defined_in": [
            "Polling::PollSessionsController#close",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_sessions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/polls/{poll_id}/poll_sessions/{id}/close",
                "keys": [
                    "poll_id",
                    "id"
                ]
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "close_an_opened_poll_session"
    },
    {
        "api_method_name": "List opened poll sessions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_sessions.opened",
        "subtopic": "Poll Sessions",
        "defined_in": [
            "Polling::PollSessionsController#opened",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_sessions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/poll_sessions/opened",
                "keys": []
            }
        ],
        "description": [
            "A paginated list of all opened poll sessions available to the current user."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_opened_poll_sessions"
    },
    {
        "api_method_name": "List closed poll sessions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_sessions.closed",
        "subtopic": "Poll Sessions",
        "defined_in": [
            "Polling::PollSessionsController#closed",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_sessions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/poll_sessions/closed",
                "keys": []
            }
        ],
        "description": [
            "A paginated list of all closed poll sessions available to the current user."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_closed_poll_sessions"
    },
    {
        "api_method_name": "List poll choices in a poll",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_choices.index",
        "subtopic": "PollChoices",
        "defined_in": [
            "Polling::PollChoicesController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_choices_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/polls/{poll_id}/poll_choices",
                "keys": [
                    "poll_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of PollChoices in this poll."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_poll_choices_in_a_poll"
    },
    {
        "api_method_name": "Get a single poll choice",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_choices.show",
        "subtopic": "PollChoices",
        "defined_in": [
            "Polling::PollChoicesController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_choices_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/polls/{poll_id}/poll_choices/{id}",
                "keys": [
                    "poll_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the poll choice with the given id"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_a_single_poll_choice"
    },
    {
        "api_method_name": "Create a single poll choice",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_choices.create",
        "subtopic": "PollChoices",
        "defined_in": [
            "Polling::PollChoicesController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_choices_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/polls/{poll_id}/poll_choices",
                "keys": [
                    "poll_id"
                ]
            }
        ],
        "description": [
            "Create a new poll choice for this poll"
        ],
        "request_parameters": [
            {
                "parameter": "poll_choices[][text]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "poll_choices[][is_correct]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "poll_choices[][position]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_single_poll_choice"
    },
    {
        "api_method_name": "Update a single poll choice",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_choices.update",
        "subtopic": "PollChoices",
        "defined_in": [
            "Polling::PollChoicesController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_choices_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/polls/{poll_id}/poll_choices/{id}",
                "keys": [
                    "poll_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update an existing poll choice for this poll"
        ],
        "request_parameters": [
            {
                "parameter": "poll_choices[][text]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "poll_choices[][is_correct]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "poll_choices[][position]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_a_single_poll_choice"
    },
    {
        "api_method_name": "Delete a poll choice",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_choices.destroy",
        "subtopic": "PollChoices",
        "defined_in": [
            "Polling::PollChoicesController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_choices_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/polls/{poll_id}/poll_choices/{id}",
                "keys": [
                    "poll_id",
                    "id"
                ]
            }
        ],
        "description": [
            "204 No Content response code is returned if the deletion was successful."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_poll_choice"
    },
    {
        "api_method_name": "Get a single poll submission",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_submissions.show",
        "subtopic": "PollSubmissions",
        "defined_in": [
            "Polling::PollSubmissionsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_submissions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions/{id}",
                "keys": [
                    "poll_id",
                    "poll_session_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the poll submission with the given id"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_a_single_poll_submission"
    },
    {
        "api_method_name": "Create a single poll submission",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/poll_submissions.create",
        "subtopic": "PollSubmissions",
        "defined_in": [
            "Polling::PollSubmissionsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/poll_submissions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions",
                "keys": [
                    "poll_id",
                    "poll_session_id"
                ]
            }
        ],
        "description": [
            "Create a new poll submission for this poll session"
        ],
        "request_parameters": [
            {
                "parameter": "poll_submissions[][poll_choice_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_single_poll_submission"
    },
    {
        "api_method_name": "List polls",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/polls.index",
        "subtopic": "Polls",
        "defined_in": [
            "Polling::PollsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/polls_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/polls",
                "keys": []
            }
        ],
        "description": [
            "Returns the paginated list of polls for the current user."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_polls"
    },
    {
        "api_method_name": "Get a single poll",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/polls.show",
        "subtopic": "Polls",
        "defined_in": [
            "Polling::PollsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/polls_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/polls/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the poll with the given id"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_a_single_poll"
    },
    {
        "api_method_name": "Create a single poll",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/polls.create",
        "subtopic": "Polls",
        "defined_in": [
            "Polling::PollsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/polls_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/polls",
                "keys": []
            }
        ],
        "description": [
            "Create a new poll for the current user"
        ],
        "request_parameters": [
            {
                "parameter": "polls[][question]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "polls[][description]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_single_poll"
    },
    {
        "api_method_name": "Update a single poll",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/polls.update",
        "subtopic": "Polls",
        "defined_in": [
            "Polling::PollsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/polls_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/polls/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Update an existing poll belonging to the current user"
        ],
        "request_parameters": [
            {
                "parameter": "polls[][question]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "polls[][description]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_a_single_poll"
    },
    {
        "api_method_name": "Delete a poll",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.polling/polls.destroy",
        "subtopic": "Polls",
        "defined_in": [
            "Polling::PollsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/polling/polls_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/polls/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "204 No Content response code is returned if the deletion was successful."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_poll"
    },
    {
        "api_method_name": "Create/update proficiency ratings",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_proficiency_api.create",
        "subtopic": "Proficiency Ratings",
        "defined_in": [
            "OutcomeProficiencyApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_proficiency_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/outcome_proficiency",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/outcome_proficiency",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Create or update account-level proficiency ratings. These ratings will apply to all sub-accounts, unless they have their own account-level proficiency ratings defined."
        ],
        "request_parameters": [
            {
                "parameter": "ratings[][description]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "ratings[][points]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "ratings[][mastery]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "ratings[][color]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Proficiency"
        ],
        "paginated": false,
        "function_name": "create_update_proficiency_ratings"
    },
    {
        "api_method_name": "Get proficiency ratings",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.outcome_proficiency_api.show",
        "subtopic": "Proficiency Ratings",
        "defined_in": [
            "OutcomeProficiencyApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/outcome_proficiency_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/outcome_proficiency",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/outcome_proficiency",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Get account-level proficiency ratings. If not defined for this account, it will return proficiency ratings for the nearest super-account with ratings defined. Will return 404 if none found."
        ],
        "request_parameters": null,
        "returns": [
            "a Proficiency"
        ],
        "paginated": false,
        "function_name": "get_proficiency_ratings"
    },
    {
        "api_method_name": "Query progress",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.progress.show",
        "subtopic": "Progress",
        "defined_in": [
            "ProgressController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/progress_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/progress/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Return completion and status information about an asynchronous job"
        ],
        "request_parameters": null,
        "returns": [
            "a Progress"
        ],
        "paginated": false,
        "function_name": "query_progress"
    },
    {
        "api_method_name": "Query progress",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/ims/progress.show",
        "subtopic": "Progress",
        "defined_in": [
            "Lti::Ims::ProgressController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/progress_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/courses/{course_id}/progress/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Return completion and status information about an asynchronous job"
        ],
        "request_parameters": null,
        "returns": [
            "a Progress"
        ],
        "paginated": false,
        "function_name": "query_progress"
    },
    {
        "api_method_name": "Update Public JWK",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/public_jwk.update",
        "subtopic": "Public JWK",
        "defined_in": [
            "Lti::PublicJwkController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/public_jwk_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/lti/developer_key/update_public_jwk",
                "keys": []
            }
        ],
        "description": [
            "Rotate the public key in jwk format when using lti services"
        ],
        "request_parameters": [
            {
                "parameter": "public_jwk",
                "type": "json",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a DeveloperKey"
        ],
        "paginated": false,
        "function_name": "update_public_jwk"
    },
    {
        "api_method_name": "Retrieve assignment-overridden dates for Classic Quizzes",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_assignment_overrides.index",
        "subtopic": "Quiz Assignment Overrides",
        "defined_in": [
            "Quizzes::QuizAssignmentOverridesController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_assignment_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes/assignment_overrides",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Retrieve the actual due-at, unlock-at, and available-at dates for quizzes based on the assignment overrides active for the current API user."
        ],
        "request_parameters": [
            {
                "parameter": "quiz_assignment_overrides[0][quiz_ids][]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a QuizAssignmentOverrideSetContainer"
        ],
        "paginated": false,
        "function_name": "retrieve_assignment_overridden_dates_for_classic_quizzes"
    },
    {
        "api_method_name": "Retrieve assignment-overridden dates for New Quizzes",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_assignment_overrides.new_quizzes",
        "subtopic": "Quiz Assignment Overrides",
        "defined_in": [
            "Quizzes::QuizAssignmentOverridesController#new_quizzes",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_assignment_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/new_quizzes/assignment_overrides",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Retrieve the actual due-at, unlock-at, and available-at dates for quizzes based on the assignment overrides active for the current API user."
        ],
        "request_parameters": [
            {
                "parameter": "quiz_assignment_overrides[0][quiz_ids][]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a QuizAssignmentOverrideSetContainer"
        ],
        "paginated": false,
        "function_name": "retrieve_assignment_overridden_dates_for_new_quizzes"
    },
    {
        "api_method_name": "Set extensions for student quiz submissions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_extensions.create",
        "subtopic": "Quiz Extensions",
        "defined_in": [
            "Quizzes::QuizExtensionsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_extensions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/extensions",
                "keys": [
                    "course_id",
                    "quiz_id"
                ]
            }
        ],
        "description": [
            "Responses"
        ],
        "request_parameters": [
            {
                "parameter": "quiz_extensions[][user_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "quiz_extensions[][extra_attempts]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz_extensions[][extra_time]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz_extensions[][manually_unlocked]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz_extensions[][extend_from_now]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz_extensions[][extend_from_end_at]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "set_extensions_for_student_quiz_submissions"
    },
    {
        "api_method_name": "Get available quiz IP filters.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_ip_filters.index",
        "subtopic": "Quiz IP Filters",
        "defined_in": [
            "Quizzes::QuizIpFiltersController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_ip_filters_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/ip_filters",
                "keys": [
                    "course_id",
                    "quiz_id"
                ]
            }
        ],
        "description": [
            "Get a list of available IP filters for this Quiz.",
            "200 OK response code is returned if the request was successful."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_available_quiz_ip_filters_"
    },
    {
        "api_method_name": "Get a single quiz group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_groups.show",
        "subtopic": "Quiz Question Groups",
        "defined_in": [
            "Quizzes::QuizGroupsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns details of the quiz group with the given id."
        ],
        "request_parameters": null,
        "returns": [
            "a QuizGroup"
        ],
        "paginated": false,
        "function_name": "get_a_single_quiz_group"
    },
    {
        "api_method_name": "Create a question group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_groups.create",
        "subtopic": "Quiz Question Groups",
        "defined_in": [
            "Quizzes::QuizGroupsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/groups",
                "keys": [
                    "course_id",
                    "quiz_id"
                ]
            }
        ],
        "description": [
            "Create a new question group for this quiz",
            "201 Created response code is returned if the creation was successful."
        ],
        "request_parameters": [
            {
                "parameter": "quiz_groups[][name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz_groups[][pick_count]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz_groups[][question_points]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz_groups[][assessment_question_bank_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_question_group"
    },
    {
        "api_method_name": "Update a question group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_groups.update",
        "subtopic": "Quiz Question Groups",
        "defined_in": [
            "Quizzes::QuizGroupsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update a question group"
        ],
        "request_parameters": [
            {
                "parameter": "quiz_groups[][name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz_groups[][pick_count]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz_groups[][question_points]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_a_question_group"
    },
    {
        "api_method_name": "Delete a question group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_groups.destroy",
        "subtopic": "Quiz Question Groups",
        "defined_in": [
            "Quizzes::QuizGroupsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Delete a question group",
            "<b>204 No Content<b> response code is returned if the deletion was successful."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_question_group"
    },
    {
        "api_method_name": "Reorder question groups",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_groups.reorder",
        "subtopic": "Quiz Question Groups",
        "defined_in": [
            "Quizzes::QuizGroupsController#reorder",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_groups_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}/reorder",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Change the order of the quiz questions within the group",
            "<b>204 No Content<b> response code is returned if the reorder was successful."
        ],
        "request_parameters": [
            {
                "parameter": "order[][id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "order[][type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "reorder_question_groups"
    },
    {
        "api_method_name": "List questions in a quiz or a submission",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_questions.index",
        "subtopic": "Quiz Questions",
        "defined_in": [
            "Quizzes::QuizQuestionsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_questions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/questions",
                "keys": [
                    "course_id",
                    "quiz_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of QuizQuestions in this quiz."
        ],
        "request_parameters": [
            {
                "parameter": "quiz_submission_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz_submission_attempt",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of QuizQuestions"
        ],
        "paginated": true,
        "function_name": "list_questions_in_a_quiz_or_a_submission"
    },
    {
        "api_method_name": "Get a single quiz question",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_questions.show",
        "subtopic": "Quiz Questions",
        "defined_in": [
            "Quizzes::QuizQuestionsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_questions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the quiz question with the given id"
        ],
        "request_parameters": [
            {
                "parameter": "id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a QuizQuestion"
        ],
        "paginated": false,
        "function_name": "get_a_single_quiz_question"
    },
    {
        "api_method_name": "Create a single quiz question",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_questions.create",
        "subtopic": "Quiz Questions",
        "defined_in": [
            "Quizzes::QuizQuestionsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_questions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/questions",
                "keys": [
                    "course_id",
                    "quiz_id"
                ]
            }
        ],
        "description": [
            "Create a new quiz question for this quiz"
        ],
        "request_parameters": [
            {
                "parameter": "question[question_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[question_text]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[quiz_group_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[question_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[position]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[points_possible]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[correct_comments]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[incorrect_comments]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[neutral_comments]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[text_after_answers]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[answers]",
                "type": "[Answer]",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a QuizQuestion"
        ],
        "paginated": false,
        "function_name": "create_a_single_quiz_question"
    },
    {
        "api_method_name": "Update an existing quiz question",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_questions.update",
        "subtopic": "Quiz Questions",
        "defined_in": [
            "Quizzes::QuizQuestionsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_questions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Updates an existing quiz question for this quiz"
        ],
        "request_parameters": [
            {
                "parameter": "quiz_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "question[question_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[question_text]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[quiz_group_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[question_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[position]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[points_possible]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[correct_comments]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[incorrect_comments]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[neutral_comments]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[text_after_answers]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "question[answers]",
                "type": "[Answer]",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a QuizQuestion"
        ],
        "paginated": false,
        "function_name": "update_an_existing_quiz_question"
    },
    {
        "api_method_name": "Delete a quiz question",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_questions.destroy",
        "subtopic": "Quiz Questions",
        "defined_in": [
            "Quizzes::QuizQuestionsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_questions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "204 No Content response code is returned if the deletion was successful."
        ],
        "request_parameters": [
            {
                "parameter": "quiz_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_quiz_question"
    },
    {
        "api_method_name": "Retrieve all quiz reports",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_reports.index",
        "subtopic": "Quiz Reports",
        "defined_in": [
            "Quizzes::QuizReportsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_reports_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/reports",
                "keys": [
                    "course_id",
                    "quiz_id"
                ]
            }
        ],
        "description": [
            "Returns a list of all available reports."
        ],
        "request_parameters": [
            {
                "parameter": "includes_all_versions",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of QuizReports"
        ],
        "paginated": false,
        "function_name": "retrieve_all_quiz_reports"
    },
    {
        "api_method_name": "Create a quiz report",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_reports.create",
        "subtopic": "Quiz Reports",
        "defined_in": [
            "Quizzes::QuizReportsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_reports_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/reports",
                "keys": [
                    "course_id",
                    "quiz_id"
                ]
            }
        ],
        "description": [
            "Create and return a new report for this quiz. If a previously generated report matches the arguments and is still current (i.e. there have been no new submissions), it will be returned.",
            "Responses"
        ],
        "request_parameters": [
            {
                "parameter": "quiz_report[report_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "quiz_report[includes_all_versions]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include",
                "type": "String[]",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a QuizReport"
        ],
        "paginated": false,
        "function_name": "create_a_quiz_report"
    },
    {
        "api_method_name": "Get a quiz report",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_reports.show",
        "subtopic": "Quiz Reports",
        "defined_in": [
            "Quizzes::QuizReportsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_reports_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the data for a single quiz report."
        ],
        "request_parameters": [
            {
                "parameter": "include",
                "type": "String[]",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a QuizReport"
        ],
        "paginated": false,
        "function_name": "get_a_quiz_report"
    },
    {
        "api_method_name": "Abort the generation of a report, or remove a previously generated one",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_reports.abort",
        "subtopic": "Quiz Reports",
        "defined_in": [
            "Quizzes::QuizReportsController#abort",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_reports_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "This API allows you to cancel a previous request you issued for a report to be generated. Or in the case of an already generated report, you'd like to remove it, perhaps to generate it another time with an updated version that provides new features.",
            "You must check the report's generation status before attempting to use this interface. See the \u201cworkflow_state\u201d property of the QuizReport's Progress object for more information. Only when the progress reports itself in a \u201cqueued\u201d state can the generation be aborted.",
            "Responses"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "abort_the_generation_of_a_report__or_remove_a_previously_generated_one"
    },
    {
        "api_method_name": "Fetching the latest quiz statistics",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_statistics.index",
        "subtopic": "Quiz Statistics",
        "defined_in": [
            "Quizzes::QuizStatisticsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_statistics_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/statistics",
                "keys": [
                    "course_id",
                    "quiz_id"
                ]
            }
        ],
        "description": [
            "This endpoint provides statistics for all quiz versions, or for a specific quiz version, in which case the output is guaranteed to represent the latest and most current version of the quiz.",
            "200 OK response code is returned if the request was successful."
        ],
        "request_parameters": [
            {
                "parameter": "all_versions",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "fetching_the_latest_quiz_statistics"
    },
    {
        "api_method_name": "Submit captured events",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submission_events_api.create",
        "subtopic": "Quiz Submission Events",
        "defined_in": [
            "Quizzes::QuizSubmissionEventsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submission_events_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/events",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Store a set of events which were captured during a quiz taking session.",
            "On success, the response will be 204 No Content with an empty body."
        ],
        "request_parameters": [
            {
                "parameter": "quiz_submission_events[]",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "submit_captured_events"
    },
    {
        "api_method_name": "Retrieve captured events",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submission_events_api.index",
        "subtopic": "Quiz Submission Events",
        "defined_in": [
            "Quizzes::QuizSubmissionEventsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submission_events_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/events",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Retrieve the set of events captured during a specific submission attempt."
        ],
        "request_parameters": [
            {
                "parameter": "attempt",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "retrieve_captured_events"
    },
    {
        "api_method_name": "Upload a file",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submission_files.create",
        "subtopic": "Quiz Submission Files",
        "defined_in": [
            "Quizzes::QuizSubmissionFilesController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submission_files_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/self/files",
                "keys": [
                    "course_id",
                    "quiz_id"
                ]
            }
        ],
        "description": [
            "Associate a new quiz submission file",
            "This API endpoint is the first step in uploading a quiz submission file. See the File Upload Documentation for details on the file upload workflow as these parameters are interpreted as per the documentation there."
        ],
        "request_parameters": [
            {
                "parameter": "name",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "on_duplicate",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "upload_a_file"
    },
    {
        "api_method_name": "Get all quiz submission questions.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submission_questions.index",
        "subtopic": "Quiz Submission Questions",
        "defined_in": [
            "Quizzes::QuizSubmissionQuestionsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submission_questions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/quiz_submissions/{quiz_submission_id}/questions",
                "keys": [
                    "quiz_submission_id"
                ]
            }
        ],
        "description": [
            "Get a list of all the question records for this quiz submission.",
            "200 OK response code is returned if the request was successful."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_all_quiz_submission_questions_"
    },
    {
        "api_method_name": "Answering questions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submission_questions.answer",
        "subtopic": "Quiz Submission Questions",
        "defined_in": [
            "Quizzes::QuizSubmissionQuestionsController#answer",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submission_questions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/quiz_submissions/{quiz_submission_id}/questions",
                "keys": [
                    "quiz_submission_id"
                ]
            }
        ],
        "description": [
            "Provide or update an answer to one or more QuizQuestions."
        ],
        "request_parameters": [
            {
                "parameter": "attempt",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "validation_token",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "access_code",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz_questions[]",
                "type": "QuizSubmissionQuestion",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of QuizSubmissionQuestions"
        ],
        "paginated": false,
        "function_name": "answering_questions"
    },
    {
        "api_method_name": "Get a formatted student numerical answer.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submission_questions.formatted_answer",
        "subtopic": "Quiz Submission Questions",
        "defined_in": [
            "Quizzes::QuizSubmissionQuestionsController#formatted_answer",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submission_questions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/formatted_answer",
                "keys": [
                    "quiz_submission_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Matches the intended behavior of the UI when a numerical answer is entered and returns the resulting formatted number"
        ],
        "request_parameters": [
            {
                "parameter": "answer",
                "type": "Numeric",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_a_formatted_student_numerical_answer_"
    },
    {
        "api_method_name": "Flagging a question.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submission_questions.flag",
        "subtopic": "Quiz Submission Questions",
        "defined_in": [
            "Quizzes::QuizSubmissionQuestionsController#flag",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submission_questions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/flag",
                "keys": [
                    "quiz_submission_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Set a flag on a quiz question to indicate that you want to return to it later."
        ],
        "request_parameters": [
            {
                "parameter": "attempt",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "validation_token",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "access_code",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "flagging_a_question_"
    },
    {
        "api_method_name": "Unflagging a question.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submission_questions.unflag",
        "subtopic": "Quiz Submission Questions",
        "defined_in": [
            "Quizzes::QuizSubmissionQuestionsController#unflag",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submission_questions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/unflag",
                "keys": [
                    "quiz_submission_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Remove the flag that you previously set on a quiz question after you've returned to it."
        ],
        "request_parameters": [
            {
                "parameter": "attempt",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "validation_token",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "access_code",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "unflagging_a_question_"
    },
    {
        "api_method_name": "Send a message to unsubmitted or submitted users for the quiz",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submission_users.message",
        "subtopic": "Quiz Submission User List",
        "defined_in": [
            "Quizzes::QuizSubmissionUsersController#message",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submission_users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/quizzes/{id}/submission_users/message",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "{",
            "}"
        ],
        "request_parameters": [
            {
                "parameter": "conversations",
                "type": "QuizUserConversation",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "send_a_message_to_unsubmitted_or_submitted_users_for_the_quiz"
    },
    {
        "api_method_name": "Get all quiz submissions.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submissions_api.index",
        "subtopic": "Quiz Submissions",
        "defined_in": [
            "Quizzes::QuizSubmissionsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions",
                "keys": [
                    "course_id",
                    "quiz_id"
                ]
            }
        ],
        "description": [
            "Get a list of all submissions for this quiz. Users who can view or manage grades for a course will have submissions from multiple users returned. A user who can only submit will have only their own submissions returned. When a user has an in-progress submission, only that submission is returned. When there isn't an in-progress quiz_submission, all completed submissions, including previous attempts, are returned.",
            "200 OK response code is returned if the request was successful."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_all_quiz_submissions_"
    },
    {
        "api_method_name": "Get the quiz submission.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submissions_api.submission",
        "subtopic": "Quiz Submissions",
        "defined_in": [
            "Quizzes::QuizSubmissionsApiController#submission",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/submission",
                "keys": [
                    "course_id",
                    "quiz_id"
                ]
            }
        ],
        "description": [
            "Get the submission for this quiz for the current user.",
            "200 OK response code is returned if the request was successful."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_the_quiz_submission_"
    },
    {
        "api_method_name": "Get a single quiz submission.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submissions_api.show",
        "subtopic": "Quiz Submissions",
        "defined_in": [
            "Quizzes::QuizSubmissionsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Get a single quiz submission.",
            "200 OK response code is returned if the request was successful."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_a_single_quiz_submission_"
    },
    {
        "api_method_name": "Create the quiz submission (start a quiz-taking session)",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submissions_api.create",
        "subtopic": "Quiz Submissions",
        "defined_in": [
            "Quizzes::QuizSubmissionsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions",
                "keys": [
                    "course_id",
                    "quiz_id"
                ]
            }
        ],
        "description": [
            "Start taking a Quiz by creating a QuizSubmission which you can use to answer questions and submit your answers.",
            "Responses"
        ],
        "request_parameters": [
            {
                "parameter": "access_code",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "preview",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_the_quiz_submission__start_a_quiz_taking_session_"
    },
    {
        "api_method_name": "Update student question scores and comments.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submissions_api.update",
        "subtopic": "Quiz Submissions",
        "defined_in": [
            "Quizzes::QuizSubmissionsApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update the amount of points a student has scored for questions they've answered, provide comments for the student about their answer(s), or simply fudge the total score by a specific amount of points.",
            "Responses",
            "See Also:"
        ],
        "request_parameters": [
            {
                "parameter": "quiz_submissions[][attempt]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "quiz_submissions[][fudge_points]",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz_submissions[][questions]",
                "type": "Hash",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_student_question_scores_and_comments_"
    },
    {
        "api_method_name": "Complete the quiz submission (turn it in).",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submissions_api.complete",
        "subtopic": "Quiz Submissions",
        "defined_in": [
            "Quizzes::QuizSubmissionsApiController#complete",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/complete",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Complete the quiz submission by marking it as complete and grading it. When the quiz submission has been marked as complete, no further modifications will be allowed.",
            "Responses"
        ],
        "request_parameters": [
            {
                "parameter": "attempt",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "validation_token",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "access_code",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "complete_the_quiz_submission__turn_it_in__"
    },
    {
        "api_method_name": "Get current quiz submission times.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quiz_submissions_api.time",
        "subtopic": "Quiz Submissions",
        "defined_in": [
            "Quizzes::QuizSubmissionsApiController#time",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quiz_submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/time",
                "keys": [
                    "course_id",
                    "quiz_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Get the current timing data for the quiz attempt, both the end_at timestamp and the time_left parameter.",
            "Responses"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_current_quiz_submission_times_"
    },
    {
        "api_method_name": "List quizzes in a course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quizzes_api.index",
        "subtopic": "Quizzes",
        "defined_in": [
            "Quizzes::QuizzesApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quizzes_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of Quizzes in this course."
        ],
        "request_parameters": [
            {
                "parameter": "search_term",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Quizzes"
        ],
        "paginated": true,
        "function_name": "list_quizzes_in_a_course"
    },
    {
        "api_method_name": "Get a single quiz",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quizzes_api.show",
        "subtopic": "Quizzes",
        "defined_in": [
            "Quizzes::QuizzesApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quizzes_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/quizzes/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the quiz with the given id."
        ],
        "request_parameters": null,
        "returns": [
            "a Quiz"
        ],
        "paginated": false,
        "function_name": "get_a_single_quiz"
    },
    {
        "api_method_name": "Create a quiz",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quizzes_api.create",
        "subtopic": "Quizzes",
        "defined_in": [
            "Quizzes::QuizzesApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quizzes_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/quizzes",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Create a new quiz for this course."
        ],
        "request_parameters": [
            {
                "parameter": "quiz[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "quiz[description]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[quiz_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[assignment_group_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[time_limit]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[shuffle_answers]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[hide_results]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[show_correct_answers]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[show_correct_answers_last_attempt]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[show_correct_answers_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[hide_correct_answers_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[allowed_attempts]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[scoring_policy]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[one_question_at_a_time]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[cant_go_back]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[access_code]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[ip_filter]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[due_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[lock_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[unlock_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[published]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[one_time_results]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "quiz[only_visible_to_overrides]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Quiz"
        ],
        "paginated": false,
        "function_name": "create_a_quiz"
    },
    {
        "api_method_name": "Edit a quiz",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quizzes_api.update",
        "subtopic": "Quizzes",
        "defined_in": [
            "Quizzes::QuizzesApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quizzes_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/quizzes/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Modify an existing quiz. See the documentation for quiz creation.",
            "Additional arguments:"
        ],
        "request_parameters": [
            {
                "parameter": "quiz[notify_of_update]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Quiz"
        ],
        "paginated": false,
        "function_name": "edit_a_quiz"
    },
    {
        "api_method_name": "Delete a quiz",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quizzes_api.destroy",
        "subtopic": "Quizzes",
        "defined_in": [
            "Quizzes::QuizzesApiController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quizzes_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/quizzes/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_quiz"
    },
    {
        "api_method_name": "Reorder quiz items",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quizzes_api.reorder",
        "subtopic": "Quizzes",
        "defined_in": [
            "Quizzes::QuizzesApiController#reorder",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quizzes_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/quizzes/{id}/reorder",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Change order of the quiz questions or groups within the quiz",
            "204 No Content response code is returned if the reorder was successful."
        ],
        "request_parameters": [
            {
                "parameter": "order[][id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "order[][type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "reorder_quiz_items"
    },
    {
        "api_method_name": "Validate quiz access code",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.quizzes/quizzes_api.validate_access_code",
        "subtopic": "Quizzes",
        "defined_in": [
            "Quizzes::QuizzesApiController#validate_access_code",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/quizzes/quizzes_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/quizzes/{id}/validate_access_code",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Accepts an access code and returns a boolean indicating whether that access code is correct"
        ],
        "request_parameters": [
            {
                "parameter": "access_code",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "validate_quiz_access_code"
    },
    {
        "api_method_name": "Show a collection of Results",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/ims/results.index",
        "subtopic": "Result",
        "defined_in": [
            "Lti::Ims::ResultsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/results_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/courses/{course_id}/line_items/{line_item_id}/results",
                "keys": [
                    "course_id",
                    "line_item_id"
                ]
            }
        ],
        "description": [
            "Show existing Results of a line item. Can be used to retrieve a specific student's result by adding the user_id (defined as the lti_user_id or the Canvas user_id) as a query parameter (i.e. user_id=1000). If user_id is included, it will return only one Result in the collection if the result exists, otherwise it will be empty. May also limit number of results by adding the limit query param (i.e. limit=100)"
        ],
        "request_parameters": null,
        "returns": [
            "a Result"
        ],
        "paginated": false,
        "function_name": "show_a_collection_of_results"
    },
    {
        "api_method_name": "Show a Result",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/ims/results.show",
        "subtopic": "Result",
        "defined_in": [
            "Lti::Ims::ResultsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/results_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/courses/{course_id}/line_items/{line_item_id}/results/{id}",
                "keys": [
                    "course_id",
                    "line_item_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Show existing Result of a line item."
        ],
        "request_parameters": null,
        "returns": [
            "a Result"
        ],
        "paginated": false,
        "function_name": "show_a_result"
    },
    {
        "api_method_name": "List roles",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.role_overrides.api_index",
        "subtopic": "Roles",
        "defined_in": [
            "RoleOverridesController#api_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/role_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/roles",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "A paginated list of the roles available to an account."
        ],
        "request_parameters": [
            {
                "parameter": "account_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "state[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "show_inherited",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Roles"
        ],
        "paginated": true,
        "function_name": "list_roles"
    },
    {
        "api_method_name": "Get a single role",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.role_overrides.show",
        "subtopic": "Roles",
        "defined_in": [
            "RoleOverridesController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/role_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/roles/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Retrieve information about a single role"
        ],
        "request_parameters": [
            {
                "parameter": "account_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "role_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "role",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Role"
        ],
        "paginated": false,
        "function_name": "get_a_single_role"
    },
    {
        "api_method_name": "Create a new role",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.role_overrides.add_role",
        "subtopic": "Roles",
        "defined_in": [
            "RoleOverridesController#add_role",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/role_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/roles",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Create a new course-level or account-level role."
        ],
        "request_parameters": [
            {
                "parameter": "label",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "role",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "base_role_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "permissions[<X>][explicit]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "permissions[<X>][enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "permissions[<X>][locked]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "permissions[<X>][applies_to_self]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "permissions[<X>][applies_to_descendants]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Role"
        ],
        "paginated": false,
        "function_name": "create_a_new_role"
    },
    {
        "api_method_name": "Deactivate a role",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.role_overrides.remove_role",
        "subtopic": "Roles",
        "defined_in": [
            "RoleOverridesController#remove_role",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/role_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/accounts/{account_id}/roles/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Deactivates a custom role.  This hides it in the user interface and prevents it from being assigned to new users.  Existing users assigned to the role will continue to function with the same permissions they had previously. Built-in roles cannot be deactivated."
        ],
        "request_parameters": [
            {
                "parameter": "role_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "role",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Role"
        ],
        "paginated": false,
        "function_name": "deactivate_a_role"
    },
    {
        "api_method_name": "Activate a role",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.role_overrides.activate_role",
        "subtopic": "Roles",
        "defined_in": [
            "RoleOverridesController#activate_role",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/role_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/roles/{id}/activate",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Re-activates an inactive role (allowing it to be assigned to new users)"
        ],
        "request_parameters": [
            {
                "parameter": "role_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "role",
                "type": "Deprecated",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Role"
        ],
        "paginated": false,
        "function_name": "activate_a_role"
    },
    {
        "api_method_name": "Update a role",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.role_overrides.update",
        "subtopic": "Roles",
        "defined_in": [
            "RoleOverridesController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/role_overrides_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/roles/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update permissions for an existing role.",
            "Recognized roles are:"
        ],
        "request_parameters": [
            {
                "parameter": "label",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "permissions[<X>][explicit]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "permissions[<X>][enabled]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "permissions[<X>][applies_to_self]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "permissions[<X>][applies_to_descendants]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Role"
        ],
        "paginated": false,
        "function_name": "update_a_role"
    },
    {
        "api_method_name": "Create a single rubric",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.rubrics.create",
        "subtopic": "Rubrics",
        "defined_in": [
            "RubricsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/rubrics",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the rubric with the given id.",
            "Unfortuantely this endpoint does not return a standard Rubric object, instead it returns a hash that looks like",
            "This may eventually be deprecated in favor of a more standardized return value, but that is not currently planned."
        ],
        "request_parameters": [
            {
                "parameter": "id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric[free_form_criterion_comments]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[association_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[association_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[use_for_grading]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[hide_score_total]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[purpose]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric[criteria]",
                "type": "Hash",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_single_rubric"
    },
    {
        "api_method_name": "Update a single rubric",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.rubrics.update",
        "subtopic": "Rubrics",
        "defined_in": [
            "RubricsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/rubrics/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the rubric with the given id.",
            "Unfortuantely this endpoint does not return a standard Rubric object, instead it returns a hash that looks like",
            "This may eventually be deprecated in favor of a more standardized return value, but that is not currently planned."
        ],
        "request_parameters": [
            {
                "parameter": "id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric[free_form_criterion_comments]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric[skip_updating_points_possible]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[association_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[association_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[use_for_grading]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[hide_score_total]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[purpose]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric[criteria]",
                "type": "Hash",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_a_single_rubric"
    },
    {
        "api_method_name": "Delete a single rubric",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.rubrics.destroy",
        "subtopic": "Rubrics",
        "defined_in": [
            "RubricsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/rubrics/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Deletes a Rubric and removes all RubricAssociations."
        ],
        "request_parameters": null,
        "returns": [
            "a Rubric"
        ],
        "paginated": false,
        "function_name": "delete_a_single_rubric"
    },
    {
        "api_method_name": "List rubrics",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.rubrics_api.index",
        "subtopic": "Rubrics",
        "defined_in": [
            "RubricsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/rubrics",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/rubrics",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the paginated list of active rubrics for the current context."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_rubrics"
    },
    {
        "api_method_name": "Get a single rubric",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.rubrics_api.show",
        "subtopic": "Rubrics",
        "defined_in": [
            "RubricsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubrics_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/rubrics/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/rubrics/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the rubric with the given id."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "style",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Rubric"
        ],
        "paginated": false,
        "function_name": "get_a_single_rubric"
    },
    {
        "api_method_name": "Create a single rubric assessment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.rubric_assessments.create",
        "subtopic": "RubricAssessments",
        "defined_in": [
            "RubricAssessmentsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubric_assessments_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/rubric_associations/{rubric_association_id}/rubric_assessments",
                "keys": [
                    "course_id",
                    "rubric_association_id"
                ]
            }
        ],
        "description": [
            "Returns the rubric assessment with the given id. The returned object also provides the information of"
        ],
        "request_parameters": [
            {
                "parameter": "course_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "provisional",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "final",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "graded_anonymously",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_assessment",
                "type": "Hash",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_single_rubric_assessment"
    },
    {
        "api_method_name": "Update a single rubric assessment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.rubric_assessments.update",
        "subtopic": "RubricAssessments",
        "defined_in": [
            "RubricAssessmentsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubric_assessments_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/rubric_associations/{rubric_association_id}/rubric_assessments/{id}",
                "keys": [
                    "course_id",
                    "rubric_association_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the rubric assessment with the given id. The returned object also provides the information of"
        ],
        "request_parameters": [
            {
                "parameter": "id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "provisional",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "final",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "graded_anonymously",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_assessment",
                "type": "Hash",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_a_single_rubric_assessment"
    },
    {
        "api_method_name": "Delete a single rubric assessment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.rubric_assessments.destroy",
        "subtopic": "RubricAssessments",
        "defined_in": [
            "RubricAssessmentsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubric_assessments_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/rubric_associations/{rubric_association_id}/rubric_assessments/{id}",
                "keys": [
                    "course_id",
                    "rubric_association_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Deletes a rubric assessment"
        ],
        "request_parameters": null,
        "returns": [
            "a RubricAssessment"
        ],
        "paginated": false,
        "function_name": "delete_a_single_rubric_assessment"
    },
    {
        "api_method_name": "Create a RubricAssociation",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.rubric_associations.create",
        "subtopic": "RubricAssociations",
        "defined_in": [
            "RubricAssociationsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubric_associations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/rubric_associations",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the rubric with the given id."
        ],
        "request_parameters": [
            {
                "parameter": "rubric_association[rubric_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[association_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[association_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[use_for_grading]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[hide_score_total]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[purpose]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[bookmarked]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a RubricAssociation"
        ],
        "paginated": false,
        "function_name": "create_a_rubricassociation"
    },
    {
        "api_method_name": "Update a RubricAssociation",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.rubric_associations.update",
        "subtopic": "RubricAssociations",
        "defined_in": [
            "RubricAssociationsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubric_associations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/rubric_associations/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Returns the rubric with the given id."
        ],
        "request_parameters": [
            {
                "parameter": "id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[rubric_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[association_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[association_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[use_for_grading]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[hide_score_total]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[purpose]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_association[bookmarked]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a RubricAssociation"
        ],
        "paginated": false,
        "function_name": "update_a_rubricassociation"
    },
    {
        "api_method_name": "Delete a RubricAssociation",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.rubric_associations.destroy",
        "subtopic": "RubricAssociations",
        "defined_in": [
            "RubricAssociationsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/rubric_associations_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/rubric_associations/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Delete the RubricAssociation with the given ID"
        ],
        "request_parameters": null,
        "returns": [
            "a RubricAssociation"
        ],
        "paginated": false,
        "function_name": "delete_a_rubricassociation"
    },
    {
        "api_method_name": "Get SIS import error list",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sis_import_errors_api.index",
        "subtopic": "SIS Import Errors",
        "defined_in": [
            "SisImportErrorsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sis_import_errors_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/sis_imports/{id}/errors",
                "keys": [
                    "account_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/sis_import_errors",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns the list of SIS import errors for an account or a SIS import. Import errors are only stored for 30 days.",
            "Example:",
            "Example:"
        ],
        "request_parameters": [
            {
                "parameter": "failure",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of SisImportErrors"
        ],
        "paginated": false,
        "function_name": "get_sis_import_error_list"
    },
    {
        "api_method_name": "Get SIS import list",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sis_imports_api.index",
        "subtopic": "SIS Imports",
        "defined_in": [
            "SisImportsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sis_imports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/sis_imports",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns the list of SIS imports for an account",
            "Example:"
        ],
        "request_parameters": [
            {
                "parameter": "created_since",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "created_before",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "workflow_state[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of SisImports"
        ],
        "paginated": false,
        "function_name": "get_sis_import_list"
    },
    {
        "api_method_name": "Get the current importing SIS import",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sis_imports_api.importing",
        "subtopic": "SIS Imports",
        "defined_in": [
            "SisImportsApiController#importing",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sis_imports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/sis_imports/importing",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Returns the SIS imports that are currently processing for an account. If no imports are running, will return an empty array.",
            "Example:"
        ],
        "request_parameters": null,
        "returns": [
            "a SisImport"
        ],
        "paginated": false,
        "function_name": "get_the_current_importing_sis_import"
    },
    {
        "api_method_name": "Import SIS data",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sis_imports_api.create",
        "subtopic": "SIS Imports",
        "defined_in": [
            "SisImportsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sis_imports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/sis_imports",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Import SIS data into Canvas. Must be on a root account with SIS imports enabled.",
            "For more information on the format that's expected here, please see the \u201cSIS CSV\u201d section in the API docs."
        ],
        "request_parameters": [
            {
                "parameter": "import_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "attachment",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "extension",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "batch_mode",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "batch_mode_term_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "multi_term_batch_mode",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "skip_deletes",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "override_sis_stickiness",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "add_sis_stickiness",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "clear_sis_stickiness",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "diffing_data_set_identifier",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "diffing_remaster_data_set",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "diffing_drop_status",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "batch_mode_enrollment_drop_status",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "change_threshold",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "diff_row_count_threshold",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a SisImport"
        ],
        "paginated": false,
        "function_name": "import_sis_data"
    },
    {
        "api_method_name": "Get SIS import status",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sis_imports_api.show",
        "subtopic": "SIS Imports",
        "defined_in": [
            "SisImportsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sis_imports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/sis_imports/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Get the status of an already created SIS import."
        ],
        "request_parameters": null,
        "returns": [
            "a SisImport"
        ],
        "paginated": false,
        "function_name": "get_sis_import_status"
    },
    {
        "api_method_name": "Restore workflow_states of SIS imported items",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sis_imports_api.restore_states",
        "subtopic": "SIS Imports",
        "defined_in": [
            "SisImportsApiController#restore_states",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sis_imports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/sis_imports/{id}/restore_states",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "This will restore the the workflow_state for all the items that changed their workflow_state during the import being restored. This will restore states for items imported with the following importers: accounts.csv terms.csv courses.csv sections.csv group_categories.csv groups.csv users.csv admins.csv This also restores states for other items that changed during the import. An example would be if an enrollment was deleted from a sis import and the group_membership was also deleted as a result of the enrollment deletion, both items would be restored when the sis batch is restored."
        ],
        "request_parameters": [
            {
                "parameter": "batch_mode",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "undelete_only",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "unconclude_only",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Progress"
        ],
        "paginated": false,
        "function_name": "restore_workflow_states_of_sis_imported_items"
    },
    {
        "api_method_name": "Abort SIS import",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sis_imports_api.abort",
        "subtopic": "SIS Imports",
        "defined_in": [
            "SisImportsApiController#abort",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sis_imports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/sis_imports/{id}/abort",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Abort a SIS import that has not completed.",
            "Aborting a sis batch that is running can take some time for every process to see the abort event. Subsequent sis batches begin to process 10 minutes after the abort to allow each process to clean up properly."
        ],
        "request_parameters": null,
        "returns": [
            "a SisImport"
        ],
        "paginated": false,
        "function_name": "abort_sis_import"
    },
    {
        "api_method_name": "Abort all pending SIS imports",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sis_imports_api.abort_all_pending",
        "subtopic": "SIS Imports",
        "defined_in": [
            "SisImportsApiController#abort_all_pending",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sis_imports_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/sis_imports/abort_all_pending",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Abort already created but not processed or processing SIS imports."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "abort_all_pending_sis_imports"
    },
    {
        "api_method_name": "Retrieve assignments enabled for grade export to SIS",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sis_api.sis_assignments",
        "subtopic": "SIS Integration",
        "defined_in": [
            "SisApiController#sis_assignments",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sis_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/sis/accounts/{account_id}/assignments",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/sis/courses/{course_id}/assignments",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Retrieve a list of published assignments flagged as \u201cpost_to_sis\u201d. See the Assignments API for more details on assignments. Assignment group and section information are included for convenience.",
            "Each section includes course information for the origin course and the cross-listed course, if applicable. The `origin_course` is the course to which the section belongs or the course from which the section was cross-listed. Generally, the `origin_course` should be preferred when performing integration work. The `xlist_course` is provided for consistency and is only present when the section has been cross-listed. See Sections API and Courses Api for me details.",
            "The `override` is only provided if the Differentiated Assignments course feature is turned on and the assignment has an override for that section. When there is an override for the assignment the override object's keys/values can be merged with the top level assignment object to create a view of the assignment object specific to that section. See Assignments api for more information on assignment overrides.",
            "restricts to courses that start before this date (if they have a start date) restricts to courses that end after this date (if they have an end date) information to include."
        ],
        "request_parameters": [
            {
                "parameter": "account_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "starts_before",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "ends_after",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "retrieve_assignments_enabled_for_grade_export_to_sis"
    },
    {
        "api_method_name": "Disable assignments currently enabled for grade export to SIS",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.disable_post_to_sis_api.disable_post_to_sis",
        "subtopic": "SIS Integration",
        "defined_in": [
            "DisablePostToSisApiController#disable_post_to_sis",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/disable_post_to_sis_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/sis/courses/{course_id}/disable_post_to_sis",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Disable all assignments flagged as \u201cpost_to_sis\u201d, with the option of making it specific to a grading period, in a course.",
            "On success, the response will be 204 No Content with an empty body.",
            "On failure, the response will be 400 Bad Request with a body of a specific message.",
            "For disabling assignments in a specific grading period"
        ],
        "request_parameters": [
            {
                "parameter": "course_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grading_period_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "disable_assignments_currently_enabled_for_grade_export_to_sis"
    },
    {
        "api_method_name": "Create a Score",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/ims/scores.create",
        "subtopic": "Score",
        "defined_in": [
            "Lti::Ims::ScoresController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/ims/scores_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/lti/courses/{course_id}/line_items/{line_item_id}/scores",
                "keys": [
                    "course_id",
                    "line_item_id"
                ]
            }
        ],
        "description": [
            "Create a new Result from the score params. If this is for the first created line_item for a resourceLinkId, or it is a line item that is not attached to a resourceLinkId, then a submission record will be created for the associated assignment when gradingProgress is set to FullyGraded or PendingManual.",
            "The submission score will also be updated when a score object is sent with either of those two values for gradingProgress. If a score object is sent with either of FullyGraded or PendingManual as the value for gradingProgress and scoreGiven is missing, the assignment will not be graded. This also supposes the line_item meets the condition to create a submission.",
            "A submission comment with an unknown author will be created when the comment value is included. This also supposes the line_item meets the condition to create a submission.",
            "NOTE: Upcoming Feature It will soon be possible to submit a file along with this score, which will attach the file to the submission that is created. Files should be formatted as Content Items, with the correct syntax below.",
            "Returns a url pointing to the Result. If any files were submitted, also returns the Content Items which were sent in the request, each with a url pointing to the Progress of the file upload."
        ],
        "request_parameters": [
            {
                "parameter": "userId",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "activityProgress",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "gradingProgress",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "timestamp",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "scoreGiven",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "scoreMaximum",
                "type": "number",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "comment",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "https://canvas.instructure.com/lti/submission",
                "type": "Object",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_score"
    },
    {
        "api_method_name": "Find recipients",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.search.recipients",
        "subtopic": "Search",
        "defined_in": [
            "SearchController#recipients",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/search_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/conversations/find_recipients",
                "keys": []
            },
            {
                "method": "GET",
                "url": "/api/v1/search/recipients",
                "keys": []
            }
        ],
        "description": [
            "Find valid recipients (users, courses and groups) that the current user can send messages to. The /api/v1/search/recipients path is the preferred endpoint, /api/v1/conversations/find_recipients is deprecated.",
            "Pagination is supported."
        ],
        "request_parameters": [
            {
                "parameter": "search",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "context",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "exclude[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "from_conversation_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "permissions[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "find_recipients"
    },
    {
        "api_method_name": "List all courses",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.search.all_courses",
        "subtopic": "Search",
        "defined_in": [
            "SearchController#all_courses",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/search_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/search/all_courses",
                "keys": []
            }
        ],
        "description": [
            "A paginated list of all courses visible in the public index"
        ],
        "request_parameters": [
            {
                "parameter": "search",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "public_only",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "open_enrollment_only",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "list_all_courses"
    },
    {
        "api_method_name": "List course sections",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sections.index",
        "subtopic": "Sections",
        "defined_in": [
            "SectionsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sections_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/sections",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "A paginated list of the list of sections for this course."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Sections"
        ],
        "paginated": true,
        "function_name": "list_course_sections"
    },
    {
        "api_method_name": "Create course section",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sections.create",
        "subtopic": "Sections",
        "defined_in": [
            "SectionsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sections_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/sections",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Creates a new section for this course."
        ],
        "request_parameters": [
            {
                "parameter": "course_section[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_section[sis_section_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_section[integration_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_section[start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_section[end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_section[restrict_enrollments_to_section_dates]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enable_sis_reactivation",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Section"
        ],
        "paginated": false,
        "function_name": "create_course_section"
    },
    {
        "api_method_name": "Cross-list a Section",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sections.crosslist",
        "subtopic": "Sections",
        "defined_in": [
            "SectionsController#crosslist",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sections_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/sections/{id}/crosslist/{new_course_id}",
                "keys": [
                    "id",
                    "new_course_id"
                ]
            }
        ],
        "description": [
            "Move the Section to another course.  The new course may be in a different account (department), but must belong to the same root account (institution)."
        ],
        "request_parameters": null,
        "returns": [
            "a Section"
        ],
        "paginated": false,
        "function_name": "cross_list_a_section"
    },
    {
        "api_method_name": "De-cross-list a Section",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sections.uncrosslist",
        "subtopic": "Sections",
        "defined_in": [
            "SectionsController#uncrosslist",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sections_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/sections/{id}/crosslist",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Undo cross-listing of a Section, returning it to its original course."
        ],
        "request_parameters": null,
        "returns": [
            "a Section"
        ],
        "paginated": false,
        "function_name": "de_cross_list_a_section"
    },
    {
        "api_method_name": "Edit a section",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sections.update",
        "subtopic": "Sections",
        "defined_in": [
            "SectionsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sections_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/sections/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Modify an existing section."
        ],
        "request_parameters": [
            {
                "parameter": "course_section[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_section[sis_section_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_section[integration_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_section[start_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_section[end_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_section[restrict_enrollments_to_section_dates]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Section"
        ],
        "paginated": false,
        "function_name": "edit_a_section"
    },
    {
        "api_method_name": "Get section information",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sections.show",
        "subtopic": "Sections",
        "defined_in": [
            "SectionsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sections_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/sections/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/sections/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Gets details about a specific section"
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Section"
        ],
        "paginated": false,
        "function_name": "get_section_information"
    },
    {
        "api_method_name": "Delete a section",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.sections.destroy",
        "subtopic": "Sections",
        "defined_in": [
            "SectionsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/sections_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/sections/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Delete an existing section.  Returns the former Section."
        ],
        "request_parameters": null,
        "returns": [
            "a Section"
        ],
        "paginated": false,
        "function_name": "delete_a_section"
    },
    {
        "api_method_name": "Get Kaltura config",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.services_api.show_kaltura_config",
        "subtopic": "Services",
        "defined_in": [
            "ServicesApiController#show_kaltura_config",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/services_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/services/kaltura",
                "keys": []
            }
        ],
        "description": [
            "Return the config information for the Kaltura plugin in json format."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_kaltura_config"
    },
    {
        "api_method_name": "Start Kaltura session",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.services_api.start_kaltura_session",
        "subtopic": "Services",
        "defined_in": [
            "ServicesApiController#start_kaltura_session",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/services_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/services/kaltura_session",
                "keys": []
            }
        ],
        "description": [
            "Start a new Kaltura session, so that new media can be recorded and uploaded to this Canvas instance's Kaltura instance."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "start_kaltura_session"
    },
    {
        "api_method_name": "Share a BrandConfig (Theme)",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.shared_brand_configs.create",
        "subtopic": "Shared Brand Configs",
        "defined_in": [
            "SharedBrandConfigsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/shared_brand_configs_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/shared_brand_configs",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Create a SharedBrandConfig, which will give the given brand_config a name and make it available to other users of this account."
        ],
        "request_parameters": [
            {
                "parameter": "shared_brand_config[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "shared_brand_config[brand_config_md5]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a SharedBrandConfig"
        ],
        "paginated": false,
        "function_name": "share_a_brandconfig__theme_"
    },
    {
        "api_method_name": "Update a shared theme",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.shared_brand_configs.update",
        "subtopic": "Shared Brand Configs",
        "defined_in": [
            "SharedBrandConfigsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/shared_brand_configs_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/accounts/{account_id}/shared_brand_configs/{id}",
                "keys": [
                    "account_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Update the specified shared_brand_config with a new name or to point to a new brand_config. Uses same parameters as create."
        ],
        "request_parameters": null,
        "returns": [
            "a SharedBrandConfig"
        ],
        "paginated": false,
        "function_name": "update_a_shared_theme"
    },
    {
        "api_method_name": "Un-share a BrandConfig (Theme)",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.shared_brand_configs.destroy",
        "subtopic": "Shared Brand Configs",
        "defined_in": [
            "SharedBrandConfigsController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/shared_brand_configs_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/shared_brand_configs/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Delete a SharedBrandConfig, which will unshare it so you nor anyone else in your account will see it as an option to pick from."
        ],
        "request_parameters": null,
        "returns": [
            "a SharedBrandConfig"
        ],
        "paginated": false,
        "function_name": "un_share_a_brandconfig__theme_"
    },
    {
        "api_method_name": "Edit a submission comment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submission_comments_api.update",
        "subtopic": "Submission Comments",
        "defined_in": [
            "SubmissionCommentsApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submission_comments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/comments/{id}",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "user_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Edit the given submission comment."
        ],
        "request_parameters": [
            {
                "parameter": "comment",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a SubmissionComment"
        ],
        "paginated": false,
        "function_name": "edit_a_submission_comment"
    },
    {
        "api_method_name": "Delete a submission comment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submission_comments_api.destroy",
        "subtopic": "Submission Comments",
        "defined_in": [
            "SubmissionCommentsApiController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submission_comments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/comments/{id}",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "user_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Delete the given submission comment."
        ],
        "request_parameters": null,
        "returns": [
            "a SubmissionComment"
        ],
        "paginated": false,
        "function_name": "delete_a_submission_comment"
    },
    {
        "api_method_name": "Upload a file",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submission_comments_api.create_file",
        "subtopic": "Submission Comments",
        "defined_in": [
            "SubmissionCommentsApiController#create_file",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submission_comments_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/comments/files",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "user_id"
                ]
            }
        ],
        "description": [
            "Upload a file to attach to a submission comment",
            "See the File Upload Documentation for details on the file upload workflow.",
            "The final step of the file upload workflow will return the attachment data, including the new file id. The caller can then PUT the file_id to the submission API to attach it to a comment"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "upload_a_file"
    },
    {
        "api_method_name": "Submit an assignment",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submissions.create",
        "subtopic": "Submissions",
        "defined_in": [
            "SubmissionsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submissions_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/sections/{section_id}/assignments/{assignment_id}/submissions",
                "keys": [
                    "section_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Make a submission for an assignment. You must be enrolled as a student in the course/section to do this.",
            "All online turn-in submission types are supported in this API. However, there are a few things that are not yet supported:"
        ],
        "request_parameters": [
            {
                "parameter": "comment[text_comment]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "submission[submission_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "submission[body]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "submission[url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "submission[file_ids][]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "submission[media_comment_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "submission[media_comment_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "submission[user_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "submission[annotatable_attachment_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "submission[submitted_at]",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "submit_an_assignment"
    },
    {
        "api_method_name": "List assignment submissions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submissions_api.index",
        "subtopic": "Submissions",
        "defined_in": [
            "SubmissionsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/sections/{section_id}/assignments/{assignment_id}/submissions",
                "keys": [
                    "section_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "A paginated list of all existing submissions for an assignment."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grouped",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Submissions"
        ],
        "paginated": true,
        "function_name": "list_assignment_submissions"
    },
    {
        "api_method_name": "List submissions for multiple assignments",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submissions_api.for_students",
        "subtopic": "Submissions",
        "defined_in": [
            "SubmissionsApiController#for_students",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/students/submissions",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/sections/{section_id}/students/submissions",
                "keys": [
                    "section_id"
                ]
            }
        ],
        "description": [
            "A paginated list of all existing submissions for a given set of students and assignments."
        ],
        "request_parameters": [
            {
                "parameter": "student_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "assignment_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grouped",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "post_to_sis",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "submitted_since",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "graded_since",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grading_period_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "workflow_state",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_state",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "state_based_on_date",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "order",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "order_direction",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "list_submissions_for_multiple_assignments"
    },
    {
        "api_method_name": "Get a single submission",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submissions_api.show",
        "subtopic": "Submissions",
        "defined_in": [
            "SubmissionsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "user_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}",
                "keys": [
                    "section_id",
                    "assignment_id",
                    "user_id"
                ]
            }
        ],
        "description": [
            "Get a single submission, based on user id."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_a_single_submission"
    },
    {
        "api_method_name": "Upload a file",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submissions_api.create_file",
        "subtopic": "Submissions",
        "defined_in": [
            "SubmissionsApiController#create_file",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/files",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "user_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/files",
                "keys": [
                    "section_id",
                    "assignment_id",
                    "user_id"
                ]
            }
        ],
        "description": [
            "Upload a file to a submission.",
            "This API endpoint is the first step in uploading a file to a submission as a student. See the File Upload Documentation for details on the file upload workflow.",
            "The final step of the file upload workflow will return the attachment data, including the new file id. The caller can then POST to submit the online_upload assignment with these file ids."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "upload_a_file"
    },
    {
        "api_method_name": "Grade or comment on a submission",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submissions_api.update",
        "subtopic": "Submissions",
        "defined_in": [
            "SubmissionsApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "user_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}",
                "keys": [
                    "section_id",
                    "assignment_id",
                    "user_id"
                ]
            }
        ],
        "description": [
            "Comment on and/or update the grading for a student's assignment submission. If any submission or rubric_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section)."
        ],
        "request_parameters": [
            {
                "parameter": "comment[text_comment]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "comment[group_comment]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "comment[media_comment_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "comment[media_comment_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "comment[file_ids][]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[visibility]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "submission[posted_grade]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "submission[excuse]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "submission[late_policy_status]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "submission[seconds_late_override]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "rubric_assessment",
                "type": "RubricAssessment",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "grade_or_comment_on_a_submission"
    },
    {
        "api_method_name": "List gradeable students",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submissions_api.gradeable_students",
        "subtopic": "Submissions",
        "defined_in": [
            "SubmissionsApiController#gradeable_students",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/gradeable_students",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "A paginated list of students eligible to submit the assignment. The caller must have permission to view grades.",
            "If anonymous grading is enabled for the current assignment and the allow_new_anonymous_id parameter is passed, the returned data will not include any values identifying the student, but will instead include an assignment-specific anonymous ID for each student.",
            "Section-limited instructors will only see students in their own sections."
        ],
        "request_parameters": null,
        "returns": [
            "a list of UserDisplays"
        ],
        "paginated": true,
        "function_name": "list_gradeable_students"
    },
    {
        "api_method_name": "List multiple assignments gradeable students",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submissions_api.multiple_gradeable_students",
        "subtopic": "Submissions",
        "defined_in": [
            "SubmissionsApiController#multiple_gradeable_students",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments/gradeable_students",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "A paginated list of students eligible to submit a list of assignments. The caller must have permission to view grades for the requested course.",
            "Section-limited instructors will only see students in their own sections."
        ],
        "request_parameters": [
            {
                "parameter": "assignment_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "list_multiple_assignments_gradeable_students"
    },
    {
        "api_method_name": "Grade or comment on multiple submissions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submissions_api.bulk_update",
        "subtopic": "Submissions",
        "defined_in": [
            "SubmissionsApiController#bulk_update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/submissions/update_grades",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/update_grades",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/sections/{section_id}/submissions/update_grades",
                "keys": [
                    "section_id"
                ]
            },
            {
                "method": "POST",
                "url": "/api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/update_grades",
                "keys": [
                    "section_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Update the grading and comments on multiple student's assignment submissions in an asynchronous job.",
            "The user must have permission to manage grades in the appropriate context (course or section)."
        ],
        "request_parameters": [
            {
                "parameter": "grade_data[<student_id>][posted_grade]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grade_data[<student_id>][excuse]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grade_data[<student_id>][rubric_assessment]",
                "type": "RubricAssessment",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grade_data[<student_id>][text_comment]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grade_data[<student_id>][group_comment]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grade_data[<student_id>][media_comment_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grade_data[<student_id>][media_comment_type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grade_data[<student_id>][file_ids][]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "grade_data[<student_id>][assignment_id]",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Progress"
        ],
        "paginated": false,
        "function_name": "grade_or_comment_on_multiple_submissions"
    },
    {
        "api_method_name": "Mark submission as read",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submissions_api.mark_submission_read",
        "subtopic": "Submissions",
        "defined_in": [
            "SubmissionsApiController#mark_submission_read",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "user_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read",
                "keys": [
                    "section_id",
                    "assignment_id",
                    "user_id"
                ]
            }
        ],
        "description": [
            "No request fields are necessary.",
            "On success, the response will be 204 No Content with an empty body."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "mark_submission_as_read"
    },
    {
        "api_method_name": "Mark submission as unread",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submissions_api.mark_submission_unread",
        "subtopic": "Submissions",
        "defined_in": [
            "SubmissionsApiController#mark_submission_unread",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read",
                "keys": [
                    "course_id",
                    "assignment_id",
                    "user_id"
                ]
            },
            {
                "method": "DELETE",
                "url": "/api/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read",
                "keys": [
                    "section_id",
                    "assignment_id",
                    "user_id"
                ]
            }
        ],
        "description": [
            "No request fields are necessary.",
            "On success, the response will be 204 No Content with an empty body."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "mark_submission_as_unread"
    },
    {
        "api_method_name": "Submission Summary",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.submissions_api.submission_summary",
        "subtopic": "Submissions",
        "defined_in": [
            "SubmissionsApiController#submission_summary",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/submissions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/assignments/{assignment_id}/submission_summary",
                "keys": [
                    "course_id",
                    "assignment_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/sections/{section_id}/assignments/{assignment_id}/submission_summary",
                "keys": [
                    "section_id",
                    "assignment_id"
                ]
            }
        ],
        "description": [
            "Returns the number of submissions for the given assignment based on gradeable students that fall into three categories: graded, ungraded, not submitted."
        ],
        "request_parameters": [
            {
                "parameter": "grouped",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "submission_summary"
    },
    {
        "api_method_name": "List available tabs for a course or group",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.tabs.index",
        "subtopic": "Tabs",
        "defined_in": [
            "TabsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/tabs_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/tabs",
                "keys": [
                    "account_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/tabs",
                "keys": [
                    "course_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/groups/{group_id}/tabs",
                "keys": [
                    "group_id"
                ]
            },
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/tabs",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Returns a paginated list of navigation tabs available in the current context."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "list_available_tabs_for_a_course_or_group"
    },
    {
        "api_method_name": "Update a tab for a course",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.tabs.update",
        "subtopic": "Tabs",
        "defined_in": [
            "TabsController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/tabs_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/courses/{course_id}/tabs/{tab_id}",
                "keys": [
                    "course_id",
                    "tab_id"
                ]
            }
        ],
        "description": [
            "Home and Settings tabs are not manageable, and can't be hidden or moved",
            "Returns a tab object"
        ],
        "request_parameters": [
            {
                "parameter": "position",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "hidden",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a Tab"
        ],
        "paginated": false,
        "function_name": "update_a_tab_for_a_course"
    },
    {
        "api_method_name": "List observees",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.user_observees.index",
        "subtopic": "User Observees",
        "defined_in": [
            "UserObserveesController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/user_observees_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/observees",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "A paginated list of the users that the given user is observing.",
            "Note: all users are allowed to list their own observees. Administrators can list other users' observees.",
            "The returned observees will include an attribute \u201cobservation_link_root_account_ids\u201d, a list of ids for the root accounts the observer and observee are linked on. The observer will only be able to observe in courses associated with these root accounts."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Users"
        ],
        "paginated": true,
        "function_name": "list_observees"
    },
    {
        "api_method_name": "List observers",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.user_observees.observers",
        "subtopic": "User Observees",
        "defined_in": [
            "UserObserveesController#observers",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/user_observees_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/observers",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "A paginated list of the users that the given user is observing.",
            "Note: all users are allowed to list their own observees. Administrators can list other users' observees.",
            "The returned observees will include an attribute \u201cobservation_link_root_account_ids\u201d, a list of ids for the root accounts the observer and observee are linked on. The observer will only be able to observe in courses associated with these root accounts."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Users"
        ],
        "paginated": true,
        "function_name": "list_observers"
    },
    {
        "api_method_name": "Add an observee with credentials",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.user_observees.create",
        "subtopic": "User Observees",
        "defined_in": [
            "UserObserveesController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/user_observees_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/users/{user_id}/observees",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Register the given user to observe another user, given the observee's credentials.",
            "Note: all users are allowed to add their own observees, given the observee's credentials or access token are provided. Administrators can add observees given credentials, access token or the observee's id."
        ],
        "request_parameters": [
            {
                "parameter": "observee[unique_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "observee[password]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "access_token",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "pairing_code",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "root_account_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a User"
        ],
        "paginated": false,
        "function_name": "add_an_observee_with_credentials"
    },
    {
        "api_method_name": "Show an observee",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.user_observees.show",
        "subtopic": "User Observees",
        "defined_in": [
            "UserObserveesController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/user_observees_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/observees/{observee_id}",
                "keys": [
                    "user_id",
                    "observee_id"
                ]
            }
        ],
        "description": [
            "Gets information about an observed user.",
            "Note: all users are allowed to view their own observees."
        ],
        "request_parameters": null,
        "returns": [
            "a User"
        ],
        "paginated": false,
        "function_name": "show_an_observee"
    },
    {
        "api_method_name": "Show an observer",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.user_observees.show_observer",
        "subtopic": "User Observees",
        "defined_in": [
            "UserObserveesController#show_observer",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/user_observees_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/observers/{observer_id}",
                "keys": [
                    "user_id",
                    "observer_id"
                ]
            }
        ],
        "description": [
            "Gets information about an observed user.",
            "Note: all users are allowed to view their own observers."
        ],
        "request_parameters": null,
        "returns": [
            "a User"
        ],
        "paginated": false,
        "function_name": "show_an_observer"
    },
    {
        "api_method_name": "Add an observee",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.user_observees.update",
        "subtopic": "User Observees",
        "defined_in": [
            "UserObserveesController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/user_observees_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/users/{user_id}/observees/{observee_id}",
                "keys": [
                    "user_id",
                    "observee_id"
                ]
            }
        ],
        "description": [
            "Registers a user as being observed by the given user."
        ],
        "request_parameters": [
            {
                "parameter": "root_account_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a User"
        ],
        "paginated": false,
        "function_name": "add_an_observee"
    },
    {
        "api_method_name": "Remove an observee",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.user_observees.destroy",
        "subtopic": "User Observees",
        "defined_in": [
            "UserObserveesController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/user_observees_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/{user_id}/observees/{observee_id}",
                "keys": [
                    "user_id",
                    "observee_id"
                ]
            }
        ],
        "description": [
            "Unregisters a user as being observed by the given user."
        ],
        "request_parameters": [
            {
                "parameter": "root_account_id",
                "type": "integer",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a User"
        ],
        "paginated": false,
        "function_name": "remove_an_observee"
    },
    {
        "api_method_name": "Create observer pairing code",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.observer_pairing_codes_api.create",
        "subtopic": "User Observees",
        "defined_in": [
            "ObserverPairingCodesApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/observer_pairing_codes_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/users/{user_id}/observer_pairing_codes",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "If the user is a student, will generate a code to be used with self registration or observees APIs to link another user to this student."
        ],
        "request_parameters": null,
        "returns": [
            "a PairingCode"
        ],
        "paginated": false,
        "function_name": "create_observer_pairing_code"
    },
    {
        "api_method_name": "List users in account",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.api_index",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#api_index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/accounts/{account_id}/users",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "A paginated list of of users associated with this account."
        ],
        "request_parameters": [
            {
                "parameter": "search_term",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enrollment_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "sort",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "order",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Users"
        ],
        "paginated": true,
        "function_name": "list_users_in_account"
    },
    {
        "api_method_name": "List the activity stream",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.activity_stream",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#activity_stream",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/self/activity_stream",
                "keys": []
            },
            {
                "method": "GET",
                "url": "/api/v1/users/activity_stream",
                "keys": []
            }
        ],
        "description": [
            "Returns the current user's global activity stream, paginated.",
            "There are many types of objects that can be returned in the activity stream. All object types have the same basic set of shared attributes:",
            "In addition, each item type has its own set of attributes available.",
            "DiscussionTopic:",
            "For DiscussionTopic, the message is truncated at 4kb.",
            "Announcement:",
            "For Announcement, the message is truncated at 4kb.",
            "Conversation:",
            "Message:",
            "Submission:",
            "Returns an Submission with its Course and Assignment data.",
            "Conference:",
            "Collaboration:",
            "AssessmentRequest:"
        ],
        "request_parameters": [
            {
                "parameter": "only_active_courses",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "list_the_activity_stream"
    },
    {
        "api_method_name": "Activity stream summary",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.activity_stream_summary",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#activity_stream_summary",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/self/activity_stream/summary",
                "keys": []
            }
        ],
        "description": [
            "Returns a summary of the current user's global activity stream."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "activity_stream_summary"
    },
    {
        "api_method_name": "List the TODO items",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.todo_items",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#todo_items",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/self/todo",
                "keys": []
            }
        ],
        "description": [
            "A paginated list of the current user's list of todo items.",
            "There is a limit to the number of items returned.",
            "The `ignore` and `ignore_permanently` URLs can be used to update the user's preferences on what items will be displayed. Performing a DELETE request against the `ignore` URL will hide that item from future todo item requests, until the item changes. Performing a DELETE request against the `ignore_permanently` URL will hide that item forever."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": true,
        "function_name": "list_the_todo_items"
    },
    {
        "api_method_name": "List counts for todo items",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.todo_item_count",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#todo_item_count",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/self/todo_item_count",
                "keys": []
            }
        ],
        "description": [
            "Counts of different todo items such as the number of assignments needing grading as well as the number of assignments needing submitting.",
            "There is a limit to the number of todo items this endpoint will count. It will only look at the first 100 todo items for the user. If the user has more than 100 todo items this count may not be reliable. The largest reliable number for both counts is 100."
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "list_counts_for_todo_items"
    },
    {
        "api_method_name": "List upcoming assignments, calendar events",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.upcoming_events",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#upcoming_events",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/self/upcoming_events",
                "keys": []
            }
        ],
        "description": [
            "A paginated list of the current user's upcoming events."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_upcoming_assignments__calendar_events"
    },
    {
        "api_method_name": "List Missing Submissions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.missing_submissions",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#missing_submissions",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/missing_submissions",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "A paginated list of past-due assignments for which the student does not have a submission. The user sending the request must either be the student, an admin or a parent observer using the parent app"
        ],
        "request_parameters": [
            {
                "parameter": "user_id",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "filter[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "course_ids[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of Assignments"
        ],
        "paginated": true,
        "function_name": "list_missing_submissions"
    },
    {
        "api_method_name": "Hide a stream item",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.ignore_stream_item",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#ignore_stream_item",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/self/activity_stream/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Hide the given stream item."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "hide_a_stream_item"
    },
    {
        "api_method_name": "Hide all stream items",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.ignore_all_stream_items",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#ignore_all_stream_items",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/self/activity_stream",
                "keys": []
            }
        ],
        "description": [
            "Hide all stream items for the user"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "hide_all_stream_items"
    },
    {
        "api_method_name": "Upload a file",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.create_file",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#create_file",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/users/{user_id}/files",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Upload a file to the user's personal files section.",
            "This API endpoint is the first step in uploading a file to a user's files. See the File Upload Documentation for details on the file upload workflow.",
            "Note that typically users will only be able to upload files to their own files section. Passing a user_id of self is an easy shortcut to specify the current user."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "upload_a_file"
    },
    {
        "api_method_name": "Show user details",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.api_show",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#api_show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Shows details for user.",
            "Also includes an attribute \u201cpermissions\u201d, a non-comprehensive list of permissions for the user. Example:"
        ],
        "request_parameters": [
            {
                "parameter": "include[]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a User"
        ],
        "paginated": false,
        "function_name": "show_user_details"
    },
    {
        "api_method_name": "Create a user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.create",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/users",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Create and return a new user and pseudonym for an account.",
            "login details for users\u201c permission, but self-registration is enabled on the account, you can still use this endpoint to register new users. Certain fields will be required, and others will be ignored (see below)."
        ],
        "request_parameters": [
            {
                "parameter": "user[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[short_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[sortable_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[time_zone]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[locale]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[terms_of_use]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[skip_registration]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "pseudonym[unique_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "pseudonym[password]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "pseudonym[sis_user_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "pseudonym[integration_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "pseudonym[send_confirmation]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "pseudonym[force_self_registration]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "pseudonym[authentication_provider_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "communication_channel[type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "communication_channel[address]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "communication_channel[confirmation_url]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "communication_channel[skip_confirmation]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "force_validations",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "enable_sis_reactivation",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "destination",
                "type": "URL",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "initial_enrollment_type",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "pairing_code[code]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a User"
        ],
        "paginated": false,
        "function_name": "create_a_user"
    },
    {
        "api_method_name": "[DEPRECATED] Self register a user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.create_self_registered_user",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#create_self_registered_user",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/accounts/{account_id}/self_registration",
                "keys": [
                    "account_id"
                ]
            }
        ],
        "description": [
            "Self register and return a new user and pseudonym for an account.",
            "If self-registration is enabled on the account, you can use this endpoint to self register new users."
        ],
        "request_parameters": [
            {
                "parameter": "user[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "user[short_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[sortable_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[time_zone]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[locale]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[terms_of_use]",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "pseudonym[unique_id]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "communication_channel[type]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "communication_channel[address]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a User"
        ],
        "paginated": false,
        "function_name": "_deprecated__self_register_a_user"
    },
    {
        "api_method_name": "Update user settings.",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.settings",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#settings",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{id}/settings",
                "keys": [
                    "id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/users/{id}/settings",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Update an existing user's settings."
        ],
        "request_parameters": [
            {
                "parameter": "manual_mark_as_read",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "release_notes_badge_disabled",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "collapse_global_nav",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "hide_dashcard_color_overlays",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "comment_library_suggestions_enabled",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "elementary_dashboard_disabled",
                "type": "boolean",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_user_settings_"
    },
    {
        "api_method_name": "Get custom colors",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.get_custom_colors",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#get_custom_colors",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{id}/colors",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Returns all custom colors that have been saved for a user."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_custom_colors"
    },
    {
        "api_method_name": "Get custom color",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.get_custom_color",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#get_custom_color",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{id}/colors/{asset_string}",
                "keys": [
                    "id",
                    "asset_string"
                ]
            }
        ],
        "description": [
            "Returns the custom colors that have been saved for a user for a given context.",
            "The asset_string parameter should be in the format 'context_id', for example 'course_42'."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_custom_color"
    },
    {
        "api_method_name": "Update custom color",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.set_custom_color",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#set_custom_color",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/users/{id}/colors/{asset_string}",
                "keys": [
                    "id",
                    "asset_string"
                ]
            }
        ],
        "description": [
            "Updates a custom color for a user for a given context.  This allows colors for the calendar and elsewhere to be customized on a user basis.",
            "The asset string parameter should be in the format 'context_id', for example 'course_42'"
        ],
        "request_parameters": [
            {
                "parameter": "hexcode",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "update_custom_color"
    },
    {
        "api_method_name": "Get dashboard positions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.get_dashboard_positions",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#get_dashboard_positions",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{id}/dashboard_positions",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Returns all dashboard positions that have been saved for a user."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_dashboard_positions"
    },
    {
        "api_method_name": "Update dashboard positions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.set_dashboard_positions",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#set_dashboard_positions",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/users/{id}/dashboard_positions",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Updates the dashboard positions for a user for a given context.  This allows positions for the dashboard cards and elsewhere to be customized on a per user basis.",
            "The asset string parameter should be in the format 'context_id', for example 'course_42'"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "update_dashboard_positions"
    },
    {
        "api_method_name": "Edit a user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.update",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/users/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Modify an existing user. To modify a user's login, see the documentation for logins."
        ],
        "request_parameters": [
            {
                "parameter": "user[name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[short_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[sortable_name]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[time_zone]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[email]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[locale]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[avatar][token]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[avatar][url]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[title]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[bio]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "user[pronouns]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a User"
        ],
        "paginated": false,
        "function_name": "edit_a_user"
    },
    {
        "api_method_name": "Merge user into another user",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.merge_into",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#merge_into",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/users/{id}/merge_into/{destination_user_id}",
                "keys": [
                    "id",
                    "destination_user_id"
                ]
            },
            {
                "method": "PUT",
                "url": "/api/v1/users/{id}/merge_into/accounts/{destination_account_id}/users/{destination_user_id}",
                "keys": [
                    "id",
                    "destination_account_id",
                    "destination_user_id"
                ]
            }
        ],
        "description": [
            "Merge a user into another user. To merge users, the caller must have permissions to manage both users. This should be considered irreversible. This will delete the user and move all the data into the destination user.",
            "User merge details and caveats: The from_user is the user that was deleted in the user_merge process. The destination_user is the user that remains, that is being split.",
            "Avatars: When both users have avatars, only the destination_users avatar will remain. When one user has an avatar, will it will end up on the destination_user.",
            "Terms of Use: If either user has accepted terms of use, it will be be left as accepted.",
            "Communication Channels: All unique communication channels moved to the destination_user. All notification preferences are moved to the destination_user.",
            "Enrollments: All unique enrollments are moved to the destination_user. When there is an enrollment that would end up making it so that a user would be observing themselves, the enrollment is not moved over. Everything that is tied to the from_user at the course level relating to the enrollment is also moved to the destination_user.",
            "Submissions: All submissions are moved to the destination_user. If there are enrollments for both users in the same course, we prefer submissions that have grades then submissions that have work in them, and if there are no grades or no work, they are not moved.",
            "Other notes: Access Tokens are moved on merge. Conversations are moved on merge. Favorites are moved on merge. Courses will commonly use LTI tools. LTI tools reference the user with IDs that are stored on a user object. Merging users deletes one user and moves all records from the deleted user to the destination_user. These IDs are kept for all enrollments, group_membership, and account_users for the from_user at the time of the merge. When the destination_user launches an LTI tool from a course that used to be the from_user's, it doesn't appear as a new user to the tool provider. Instead it will send the stored ids. The destination_user's LTI IDs remain as they were for the courses that they originally had. Future enrollments for the destination_user will use the IDs that are on the destination_user object. LTI IDs that are kept and tracked per context include lti_context_id, lti_id and uuid. APIs that return the LTI ids will return the one for the context that it is called for, except for the user uuid. The user UUID will display the destination_users uuid, and when getting the uuid from an api that is in a context that was recorded from a merge event, an additional attribute is added as past_uuid.",
            "When finding users by SIS ids in different accounts the destination_account_id is required.",
            "The account can also be identified by passing the domain in destination_account_id."
        ],
        "request_parameters": null,
        "returns": [
            "a User"
        ],
        "paginated": false,
        "function_name": "merge_user_into_another_user"
    },
    {
        "api_method_name": "Split merged users into separate users",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.split",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#split",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/users/{id}/split",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "Merged users cannot be fully restored to their previous state, but this will attempt to split as much as possible to the previous state. To split a merged user, the caller must have permissions to manage all of the users logins. If there are multiple users that have been merged into one user it will split each merge into a separate user. A split can only happen within 180 days of a user merge. A user merge deletes the previous user and may be permanently deleted. In this scenario we create a new user object and proceed to move as much as possible to the new user. The user object will not have preserved the name or settings from the previous user. Some items may have been deleted during a user_merge that cannot be restored, and/or the data has become stale because of other changes to the objects since the time of the user_merge.",
            "Split users details and caveats:",
            "The from_user is the user that was deleted in the user_merge process. The destination_user is the user that remains, that is being split.",
            "Avatars: When both users had avatars, both will be remain. When from_user had an avatar and destination_user did not have an avatar, the destination_user's avatar will be deleted if it still matches what was there are the time of the merge. If the destination_user's avatar was changed at anytime after the merge, it will remain on the destination user. If the from_user had an avatar it will be there after split.",
            "Terms of Use: If from_user had not accepted terms of use, they will be prompted again to accept terms of use after the split. If the destination_user had not accepted terms of use, hey will be prompted again to accept terms of use after the split. If neither user had accepted the terms of use, but since the time of the merge had accepted, both will be prompted to accept terms of use. If both had accepted terms of use, this will remain.",
            "Communication Channels: All communication channels are restored to what they were prior to the merge. If a communication channel was added after the merge, it will remain on the destination_user. Notification preferences remain with the communication channels.",
            "Enrollments: All enrollments from the time of the merge will be moved back to where they were. Enrollments created since the time of the merge that were created by sis_import will go to the user that owns that sis_id used for the import. Other new enrollments will remain on the destination_user. Everything that is tied to the destination_user at the course level relating to an enrollment is moved to the from_user. When both users are in the same course prior to merge this can cause some unexpected items to move.",
            "Submissions: Unlike other items tied to a course, submissions are explicitly recorded to avoid problems with grades. All submissions were moved are restored to the spot prior to merge. All submission that were created in a course that was moved in enrollments are moved over to the from_user.",
            "Other notes: Access Tokens are moved back on split. Conversations are moved back on split. Favorites that existing at the time of merge are moved back on split. LTI ids are restored to how they were prior to merge."
        ],
        "request_parameters": null,
        "returns": [
            "a list of Users"
        ],
        "paginated": false,
        "function_name": "split_merged_users_into_separate_users"
    },
    {
        "api_method_name": "Get a Pandata Events jwt token and its expiration date",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.pandata_events_token",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#pandata_events_token",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/users/self/pandata_events_token",
                "keys": []
            }
        ],
        "description": [
            "Returns a jwt auth and props token that can be used to send events to Pandata.",
            "NOTE: This is currently only available to the mobile developer keys."
        ],
        "request_parameters": [
            {
                "parameter": "app_key",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "get_a_pandata_events_jwt_token_and_its_expiration_date"
    },
    {
        "api_method_name": "Get a users most recently graded submissions",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.users.user_graded_submissions",
        "subtopic": "Users",
        "defined_in": [
            "UsersController#user_graded_submissions",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/users_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{id}/graded_submissions",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "get_a_users_most_recently_graded_submissions"
    },
    {
        "api_method_name": "Get user profile",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.profile.settings",
        "subtopic": "Users",
        "defined_in": [
            "ProfileController#settings",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/profile_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/profile",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Returns user profile data, including user id, name, and profile pic.",
            "When requesting the profile for the user accessing the API, the user's calendar feed URL and LTI user id will be returned as well."
        ],
        "request_parameters": null,
        "returns": [
            "a Profile"
        ],
        "paginated": false,
        "function_name": "get_user_profile"
    },
    {
        "api_method_name": "List avatar options",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.profile.profile_pics",
        "subtopic": "Users",
        "defined_in": [
            "ProfileController#profile_pics",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/profile_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/avatars",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "A paginated list of the possible user avatar options that can be set with the user update endpoint. The response will be an array of avatar records. If the 'type' field is 'attachment', the record will include all the normal attachment json fields; otherwise it will include only the 'url' and 'display_name' fields. Additionally, all records will include a 'type' field and a 'token' field. The following explains each field in more detail"
        ],
        "request_parameters": null,
        "returns": [
            "a list of Avatars"
        ],
        "paginated": true,
        "function_name": "list_avatar_options"
    },
    {
        "api_method_name": "List user page views",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.page_views.index",
        "subtopic": "Users",
        "defined_in": [
            "PageViewsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/page_views_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/page_views",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Return a paginated list of the user's page view history in json format, similar to the available CSV download. Page views are returned in descending order, newest to oldest."
        ],
        "request_parameters": [
            {
                "parameter": "start_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            },
            {
                "parameter": "end_time",
                "type": "DateTime",
                "description": null,
                "allowed_values": null,
                "required": false,
                "deprecated": null
            }
        ],
        "returns": [
            "a list of PageViews"
        ],
        "paginated": true,
        "function_name": "list_user_page_views"
    },
    {
        "api_method_name": "Store custom data",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.custom_data.set_data",
        "subtopic": "Custom Data",
        "defined_in": [
            "CustomDataController#set_data",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_data_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/users/{user_id}/custom_data(/*scope)",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Store arbitrary user data as JSON.",
            "Arbitrary JSON data can be stored for a User. A typical scenario would be an external site/service that registers users in Canvas and wants to capture additional info about them.  The part of the URL that follows /custom_data/ defines the scope of the request, and it reflects the structure of the JSON data to be stored or retrieved.",
            "The value self may be used for user_id to store data associated with the calling user. In order to access another user's custom data, you must be an account administrator with permission to manage users.",
            "A namespace parameter, ns, is used to prevent custom_data collisions between different apps.  This parameter is required for all custom_data requests.",
            "A request with Content-Type multipart/form-data or Content-Type application/x-www-form-urlencoded can only be used to store strings.",
            "Example PUT with multipart/form-data data:",
            "Response:",
            "Subscopes (or, generated scopes) can also be specified by passing values to data[subscope].",
            "Example PUT specifying subscopes:",
            "Response:",
            "Following such a request, subsets of the stored data to be retrieved directly from a subscope.",
            "Example GET from a generated scope",
            "Response:",
            "If you want to store more than just strings (i.e. numbers, arrays, hashes, true, false, and/or null), you must make a request with Content-Type application/json as in the following example.",
            "Example PUT with JSON data:",
            "Response:",
            "If the data is an Object (as it is in the above example), then subsets of the data can be accessed by including the object's (possibly nested) keys in the scope of a GET request.",
            "Example GET with a generated scope:",
            "Response:",
            "On success, this endpoint returns an object containing the data that was stored.",
            "Responds with status code 200 if the scope already contained data, and it was overwritten by the data specified in the request.",
            "Responds with status code 201 if the scope was previously empty, and the data specified in the request was successfully stored there.",
            "Responds with status code 400 if the namespace parameter, ns, is missing or invalid, or if the data parameter is missing.",
            "Responds with status code 409 if the requested scope caused a conflict and data was not stored. This happens when storing data at the requested scope would cause data at an outer scope to be lost.  e.g., if /custom_data was {\u201cfashion_app\u201d: {\u201chair\u201d: \u201cblonde\u201d}}, but you tried to `PUT /custom_data/fashion_app/hair/style -F data=buzz`, then for the request to succeed,the value of /custom_data/fashion_app/hair would have to become a hash, and its old string value would be lost.  In this situation, an error object is returned with the following format:"
        ],
        "request_parameters": [
            {
                "parameter": "ns",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "data",
                "type": "JSON",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "store_custom_data"
    },
    {
        "api_method_name": "Load custom data",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.custom_data.get_data",
        "subtopic": "Custom Data",
        "defined_in": [
            "CustomDataController#get_data",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_data_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/{user_id}/custom_data(/*scope)",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Load custom user data.",
            "Arbitrary JSON data can be stored for a User.  This API call retrieves that data for a (optional) given scope. See Store Custom Data for details and examples.",
            "On success, this endpoint returns an object containing the data that was requested.",
            "Responds with status code 400 if the namespace parameter, ns, is missing or invalid, or if the specified scope does not contain any data."
        ],
        "request_parameters": [
            {
                "parameter": "ns",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "load_custom_data"
    },
    {
        "api_method_name": "Delete custom data",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.custom_data.delete_data",
        "subtopic": "Custom Data",
        "defined_in": [
            "CustomDataController#delete_data",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/custom_data_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/{user_id}/custom_data(/*scope)",
                "keys": [
                    "user_id"
                ]
            }
        ],
        "description": [
            "Delete custom user data.",
            "Arbitrary JSON data can be stored for a User.  This API call deletes that data for a given scope.  Without a scope, all custom_data is deleted. See Store Custom Data for details and examples of storage and retrieval.",
            "As an example, we'll store some data, then delete a subset of it.",
            "Example PUT with valid JSON data:",
            "Response:",
            "Example DELETE:",
            "Response:",
            "Example GET following the above DELETE:",
            "Response:",
            "Note that hashes left empty after a DELETE will get removed from the custom_data store. For example, following the previous commands, if we delete /custom_data/veggies/root/onion, then the entire /custom_data/veggies scope will be removed.",
            "Example DELETE that empties a parent scope:",
            "Response:",
            "Example GET following the above DELETE:",
            "Response:",
            "On success, this endpoint returns an object containing the data that was deleted.",
            "Responds with status code 400 if the namespace parameter, ns, is missing or invalid, or if the specified scope does not contain any data."
        ],
        "request_parameters": [
            {
                "parameter": "ns",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "delete_custom_data"
    },
    {
        "api_method_name": "List course nicknames",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.course_nicknames.index",
        "subtopic": "Course Nicknames",
        "defined_in": [
            "CourseNicknamesController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/course_nicknames_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/self/course_nicknames",
                "keys": []
            }
        ],
        "description": [
            "Returns all course nicknames you have set."
        ],
        "request_parameters": null,
        "returns": [
            "a list of CourseNicknames"
        ],
        "paginated": false,
        "function_name": "list_course_nicknames"
    },
    {
        "api_method_name": "Get course nickname",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.course_nicknames.show",
        "subtopic": "Course Nicknames",
        "defined_in": [
            "CourseNicknamesController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/course_nicknames_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/users/self/course_nicknames/{course_id}",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Returns the nickname for a specific course."
        ],
        "request_parameters": null,
        "returns": [
            "a CourseNickname"
        ],
        "paginated": false,
        "function_name": "get_course_nickname"
    },
    {
        "api_method_name": "Set course nickname",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.course_nicknames.update",
        "subtopic": "Course Nicknames",
        "defined_in": [
            "CourseNicknamesController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/course_nicknames_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/v1/users/self/course_nicknames/{course_id}",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Set a nickname for the given course. This will replace the course's name in output of API calls you make subsequently, as well as in selected places in the Canvas web user interface."
        ],
        "request_parameters": [
            {
                "parameter": "nickname",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [
            "a CourseNickname"
        ],
        "paginated": false,
        "function_name": "set_course_nickname"
    },
    {
        "api_method_name": "Remove course nickname",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.course_nicknames.delete",
        "subtopic": "Course Nicknames",
        "defined_in": [
            "CourseNicknamesController#delete",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/course_nicknames_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/self/course_nicknames/{course_id}",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Remove the nickname for the given course. Subsequent course API calls will return the actual name for the course."
        ],
        "request_parameters": null,
        "returns": [
            "a CourseNickname"
        ],
        "paginated": false,
        "function_name": "remove_course_nickname"
    },
    {
        "api_method_name": "Clear course nicknames",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.course_nicknames.clear",
        "subtopic": "Course Nicknames",
        "defined_in": [
            "CourseNicknamesController#clear",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/course_nicknames_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/v1/users/self/course_nicknames",
                "keys": []
            }
        ],
        "description": [
            "Remove all stored course nicknames."
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "clear_course_nicknames"
    },
    {
        "api_method_name": "Create a Webhook Subscription",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/subscriptions_api.create",
        "subtopic": "Webhooks Subscriptions",
        "defined_in": [
            "Lti::SubscriptionsApiController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/subscriptions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/lti/subscriptions",
                "keys": []
            }
        ],
        "description": [
            "Creates a webook subscription for the specified event type and context."
        ],
        "request_parameters": [
            {
                "parameter": "subscription[ContextId]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "subscription[ContextType]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "subscription[EventTypes]",
                "type": "Array",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "subscription[Format]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "subscription[TransportMetadata]",
                "type": "Object",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            },
            {
                "parameter": "subscription[TransportType]",
                "type": "string",
                "description": null,
                "allowed_values": null,
                "required": true,
                "deprecated": null
            }
        ],
        "returns": [],
        "paginated": false,
        "function_name": "create_a_webhook_subscription"
    },
    {
        "api_method_name": "Delete a Webhook Subscription",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/subscriptions_api.destroy",
        "subtopic": "Webhooks Subscriptions",
        "defined_in": [
            "Lti::SubscriptionsApiController#destroy",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/subscriptions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "DELETE",
                "url": "/api/lti/subscriptions/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "delete_a_webhook_subscription"
    },
    {
        "api_method_name": "Show a single Webhook Subscription",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/subscriptions_api.show",
        "subtopic": "Webhooks Subscriptions",
        "defined_in": [
            "Lti::SubscriptionsApiController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/subscriptions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/subscriptions/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "show_a_single_webhook_subscription"
    },
    {
        "api_method_name": "Update a Webhook Subscription",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/subscriptions_api.update",
        "subtopic": "Webhooks Subscriptions",
        "defined_in": [
            "Lti::SubscriptionsApiController#update",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/subscriptions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "PUT",
                "url": "/api/lti/subscriptions/{id}",
                "keys": [
                    "id"
                ]
            }
        ],
        "description": [
            "This endpoint uses the same parameters as the create endpoint"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": false,
        "function_name": "update_a_webhook_subscription"
    },
    {
        "api_method_name": "List all Webhook Subscription for a tool proxy",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.lti/subscriptions_api.index",
        "subtopic": "Webhooks Subscriptions",
        "defined_in": [
            "Lti::SubscriptionsApiController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/lti/subscriptions_api_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/lti/subscriptions",
                "keys": []
            }
        ],
        "description": [
            "This endpoint returns a paginated list with a default limit of 100 items per result set. You can retrieve the next result set by setting a 'StartKey' header in your next request with the value of the 'EndKey' header in the response.",
            "Example use of a 'StartKey' header object:"
        ],
        "request_parameters": null,
        "returns": [],
        "paginated": true,
        "function_name": "list_all_webhook_subscription_for_a_tool_proxy"
    },
    {
        "api_method_name": "List courses with their latest ePub export",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.epub_exports.index",
        "subtopic": "ePub Exports",
        "defined_in": [
            "EpubExportsController#index",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/epub_exports_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/epub_exports",
                "keys": []
            }
        ],
        "description": [
            "A paginated list of all courses a user is actively participating in, and the latest ePub export associated with the user & course."
        ],
        "request_parameters": null,
        "returns": [
            "a list of CourseEpubExports"
        ],
        "paginated": true,
        "function_name": "list_courses_with_their_latest_epub_export"
    },
    {
        "api_method_name": "Create ePub Export",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.epub_exports.create",
        "subtopic": "ePub Exports",
        "defined_in": [
            "EpubExportsController#create",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/epub_exports_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "POST",
                "url": "/api/v1/courses/{course_id}/epub_exports",
                "keys": [
                    "course_id"
                ]
            }
        ],
        "description": [
            "Begin an ePub export for a course.",
            "You can use the Progress API to track the progress of the export. The export's progress is linked to with the progress_url value.",
            "When the export completes, use the Show content export endpoint to retrieve a download URL for the exported content."
        ],
        "request_parameters": null,
        "returns": [
            "a EpubExport"
        ],
        "paginated": false,
        "function_name": "create_epub_export"
    },
    {
        "api_method_name": "Show ePub export",
        "url": "https://canvas.instructure.com/doc/api/all_resources.html#method.epub_exports.show",
        "subtopic": "ePub Exports",
        "defined_in": [
            "EpubExportsController#show",
            "https://github.com/instructure/canvas-lms/blob/master/app/controllers/epub_exports_controller.rb"
        ],
        "beta": null,
        "scopes": [
            {
                "method": "GET",
                "url": "/api/v1/courses/{course_id}/epub_exports/{id}",
                "keys": [
                    "course_id",
                    "id"
                ]
            }
        ],
        "description": [
            "Get information about a single ePub export."
        ],
        "request_parameters": null,
        "returns": [
            "a EpubExport"
        ],
        "paginated": false,
        "function_name": "show_epub_export"
    }
]